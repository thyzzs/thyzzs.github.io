<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《红楼梦》随笔（六十一 - 八十）</title>
      <link href="/2023/11/11/hong-lou-meng-sui-bi-2/"/>
      <url>/2023/11/11/hong-lou-meng-sui-bi-2/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><h3 id="一-三：满纸荒唐言，一把辛酸泪-都云作者痴，谁解其中味？"><a href="#一-三：满纸荒唐言，一把辛酸泪-都云作者痴，谁解其中味？" class="headerlink" title="一 - 三：满纸荒唐言，一把辛酸泪  都云作者痴，谁解其中味？"></a>一 - 三：满纸荒唐言，一把辛酸泪  都云作者痴，谁解其中味？</h3><p>​    “好”“了”，“好了”。</p><p>​    甄士隐的领悟，所有的词句就在“好”和“了”里面。“世人都晓神仙好，惟有功名忘不了！古今将相在何方？荒冢一堆草没了。世人都晓神仙好，只有金银忘不了！终朝只恨聚无多，及到多时眼闭了。世人都说神仙好，只有姣妻忘不了！君生日日说恩情，君死又随人去了。世人都晓神仙好，惟有儿孙忘不了！痴心父母古来多，孝顺儿孙谁见了？”<br>​    《好了歌》把人世间的东西，权力也好，财富也好，爱情或亲请也好，都当成“好”和“了”来做点醒。“了”是结束，就是了却了，了结了，了悟了。“好”，才有意义。你想要做神仙，希望生命活得很快乐幸福，可是你忘不了功名，忘不了金钱，忘不了娇妻，忘不了儿孙。追逐名利、权力的古今将相，现在都到哪里去了？夫妻活着的时候恩恩爱爱，死了之后很快又嫁别人了。甄士隐疼女儿，一生大概也敛了很多钱财，变成富有的人，也做过官，有过功名，所有一切，这些“好”到最后怎么“了”。人生中最后的领悟是怎么去跨过“好”这一关，变成了“了”。可知世人万般好，便是了，了便是好，若不了，便不好；若要好，须是了。这讲有与无、真与假，连同甄士隐对《好了歌》的注解，讲出我们心里恐惧的东面，它可能是健康、亲人的幸福、爱、钱财、权力，一切你放不下的东西，《好了那》告诉我们，总有一天都要放下。</p><p>​    满纸荒唐言，一把辛酸泪。都云作者痴，谁解其中味？</p><p>​    生命中的修行跟执著、痴迷是纠结在一起的，《红楼梦》一直在讲“警幻仙姑”，警告你，一切都是空幻的，可是无论怎么“警幻”还是执著，这便是红尘之楼的一场大梦吧。</p><p>​    好的文学是真实的人生，不是一定有道理可讲，在小说的第五回，作者就把小说里所有人的结局全部告诉你了。可是每个人的结局是一首诗，可以往正面解释，也可以往负面解释，没有确定的答案。人的一生，不到最后的终结，永远不知道它的结局。也许人生不是一个结局，而是点点滴滴、一分一秒的过程累积起来的一种不可知的状态。</p><p>​    回首人生的荒唐、荒谬、错综复杂的喜怒哀乐，爱恨情仇的纠缠，其实是讲不清楚的。《红楼梦》让我们知道，结局可能本来就是假的，是我们自己虚拟的一个结局。什么叫作好，什么叫作坏，什么叫作命好，什么叫作命坏，大概也都很难确定。</p><h3 id="四-十：转山转水，方知人生结局"><a href="#四-十：转山转水，方知人生结局" class="headerlink" title="四 - 十：转山转水，方知人生结局"></a>四 - 十：转山转水，方知人生结局</h3><p>​    读过《红楼梦》的人都知道，此书最关键的章节是第五回和第六回。第五回其实是这部近百万字的小说的真正开头。在小说开始时，贾宝玉做了一个梦，梦到一个叫作太虚幻境的地方，在那里他看到一些大柜子，柜子有很多抽屉，他一一打开抽屉，在每个抽屉里都会看到一张画，旁边写有几句诗，那些诗，是他一生中碰到的女性的命运。</p><p>​    《红楼梦》这部小说结构特殊的地方，在于它把故事结局放到前面来写。小说大结局全部在第五回，如果你想知道《红楼梦》中每一个人的命运，你就要不断回到第五回来看，因为那些诗已经放在那里，你需要去印证，就像你在庙里求的签，可能是十年前抽的，你会一直放在抽屉里，隔一阵子拿出来看一看，看到底对还是不对。诗跟生命之间的印证关系全部在第五回当中。</p><p>​    我觉得作者触到了生命的本质，这个本质是存在于我们的潜意识里的，是我们从来都不敢说的。你会发现你的一生中，当你决定跟一个人结婚的时候，其实对另外的人可能就是遗憾。对作者来说，人世间的美好幸福是不能全得的。有所取，就有所舍；有所得，就有所失，林黛玉和薛宝钗一直是很有趣的象征，好像两人合在一起才是完美，如果她们是两个人，就永远不完美。所以在作者幻想的世界里，在判词当中，她们变成了合在一起的生命形态。不管是判词还是《红楼梦》的十四支曲子，林黛玉和薛宝钗一直是一个特例，这是需要注意的一个现象。</p><p>​    《红楼梦》的十四支曲子并不是完全在写个人，最后讲到“好一似食尽鸟投林，落了片白茫茫大地真干净”，这里写的不是任何个体，而是写这个小说里所有人的下场，所有人来这一世，不管争名还是夺利，最后都会走。作者用了一个近似于老庄的写法，告诉我们人世间所有的繁华都是空忙一场。</p><p>​    结局不是最重要的，人怎么一步一步走向那个结局才重要。</p><h3 id="十一-十四：风月空幻，红粉骷髅"><a href="#十一-十四：风月空幻，红粉骷髅" class="headerlink" title="十一 - 十四：风月空幻，红粉骷髅"></a>十一 - 十四：风月空幻，红粉骷髅</h3><p>​    “忽然这日有个跛足道人来化斋，口称专治冤孽之症。”《红楼梦》里每当某个角色的人生处于最迷茫的时刻，就会有道士或者和尚出来。《红楼梦》其实是一部非常不支持儒家立场的书，作者相信真正可以救助人的是道家与佛家，因为它们可以让人大彻大悟。书中来点化人的人不是癞头和尚，就是跛足道人，他们总有一部分是残缺的。那残缺代表什么？代表他经过人世间的沧桑，受过人世间的磨难，所以他修道成功了，只有他才知道什么叫做宽容。太过顺利的生命，其实不容易有领悟，他的意思是说当你有身体上的痛苦，才知道什么是真正的悲悯。这都是佛、道的一些思想。</p><p>​    贾瑞在病床上听到了，直着声叫喊说：“快请那位菩萨来救我！”贾瑞希望有最后一个机会。可是《红楼梦》告诉你，连菩萨也不能救人，人最终还是自己救自己。跛足道人并未能救贾瑞，他跟贾瑞说镜子你只能看反面，不要看正面，可是贾瑞偏偏做相反的事情，菩萨不过是来点化你的，能不能做到，是你自己的事情。</p><p>​    贾瑞拿起日月宝鉴，照道士的意思只看反面，结果他看到一个骷髅在里面。西方的美术史里面常常有骷髅，修行的时候旁边也有骷髅头，是要告诉你生命的终结就是这个，你每天看，就能提醒自己现在所拥有的一切东西都是假的。道士要借风月宝鉴度化贾瑞，告诉他你最后就是这个样子，现在有什么好邪思妄动的，你所拥有的东西不过是一个幻象。</p><p>​    但是贾瑞说：“我倒再照照正面是什么。”他已经忘了道士跟他说的话，因为反面不好看，他就翻过来，看看正面是什么。想着，又将正面一照，只见凤姐站在里面，招手叫他。他看到了自己朝思暮想的幻象，所以，有没有镜子不重要了，是他没有办法忘掉凤姐。王煕凤变成了他的致命伤。我们看到人生的两面，繁华与幻灭、情欲的快乐与死亡的空幻在做对比。贾瑞后来精尽而死，因此他一直在看镜子的正面，一直幻想跟凤姐做爱，一次又一次地耗尽精血，这个时候你忽然会想起贾瑞之前讲的“死也要来”，现在他就是一次一次到境子里面去赴死之约，这大概真的是他要还的冤孽之债。</p><p>​    很多人看这一段时，总觉得贾瑞是一个很下流的人，但我想提醒大家要从不同的角度去看贾瑞。很少有人从这一角度去谈《红楼梦》，因为《红楼梦》的读者都太高贵了，大家都在看情的部分，可是《红楼梦》对肉欲部分的描写一点也不放松。作者在《红楼梦》中一直在提醒，“情既相逢必主淫”，贾瑞对王熙凤可能是一种爱，这种爱可以往精神上升华，也可以肉体上发泄，人性本来就存在着这两面。小说写秦可卿的死，告诉你情都是空幻的；写贾瑞的死，告诉你肉体上的沉溺也是空幻的，情与淫在这里合写。</p><h3 id="十五-二十：弱水三千，情意绵绵"><a href="#十五-二十：弱水三千，情意绵绵" class="headerlink" title="十五 - 二十：弱水三千，情意绵绵"></a>十五 - 二十：弱水三千，情意绵绵</h3><h4 id="情爱保证，即为平安（第十六回）"><a href="#情爱保证，即为平安（第十六回）" class="headerlink" title="情爱保证，即为平安（第十六回）"></a>情爱保证，即为平安（第十六回）</h4><p>“宝玉只问得黛玉‘平安’二字，余者也就不在意了。”这一段写的极好。其实一个人对另外一个人的关心，到最后只有“平安”二字，汉诗里面说的“上言加餐饭”，其实是写给最珍爱的人的话，因为最爱的人，已经不再说你爱我、我爱你之类的话了。反而会是好好吃饭、健康平安。讲得很淡，可是不容易体会。我们对于所谓的情爱，有很多外在的装饰，可是情爱深处，其实就是平安。</p><h4 id="第十八回（弱水三千，只取一瓢饮）"><a href="#第十八回（弱水三千，只取一瓢饮）" class="headerlink" title="第十八回（弱水三千，只取一瓢饮）"></a>第十八回（弱水三千，只取一瓢饮）</h4><p>十八回讲宝玉身上的荷包被小厮们解去，回来时袭人抱怨，黛玉刚好也在，听到了，就走过来看，因为有一个荷包是她绣给宝玉的。看了以后，她就说，我的荷包也被你送给别人了，就开始跟宝玉赌气。宝玉还没有机会辩白，黛玉就立刻拿剪刀把正在为宝玉绣的一个香囊，“啪”的一下剪断了，说我以后再也不给你做东西了。她觉得那是我对你情感的寄托，你不能够随便给别人。</p><p>宝玉忙走过来，解开衣服，从里面拿出一个荷包，说你瞧这是什么。原来他把黛玉绣的荷包藏在内衣里面了。其实，一场爱情、一段感情深到这个地步的时候，它就是跟别人不一样。他把所有的荷包都戴在外面，只有黛玉的那个，他藏在里面，不想让任何人拿走。黛玉知道委屈了宝玉，可是黛玉是永远不会说对不起的，她是那个受宠的人，她永远要发脾气，就连自己做错了事她也要发脾气。真正的深情本来就没有公平可言，爱这个东西，旁观的人永远无法理解，他们有他们的语言，你看到这个年龄的男孩女孩在吵架，你就知道他们的吵架绝不是吵架，而是另外一种甜蜜，他们之间有牵挂、有争辩，还有赌气，其实人最幸福的时刻莫过于此，等到没有什么架可吵时，大概就无情可谈了。</p><p>宝玉和黛玉在一起很少不吵架的，感情这个东西很奇怪，得到一点，还要再多证明一点，吵架其实是个不断证明感情的过程。一天黛玉跟宝玉闹到最厉害的时候，宝玉就对黛玉说，你不要老是怀疑这个，怀疑那个，“弱水三千，只取一瓢饮”。黛玉就不讲话了，因为她知道宝玉讲出了最重要的话。</p><p>可是黛玉总忍不住要证明，而宝玉的个性也刚好配合黛玉，他懂得赔小心，懂得去疼爱黛玉，所以每次两个人起冲突，让步的一定是他。一个十四岁的男孩子，懂情懂到这种程度。不读这些，不会知道《红楼梦》写“情”这个字写得这么深。</p><h3 id="二十一-二十三：为空而执，因执显空"><a href="#二十一-二十三：为空而执，因执显空" class="headerlink" title="二十一 - 二十三：为空而执，因执显空"></a>二十一 - 二十三：为空而执，因执显空</h3><p>​    “他只是告诉你，在所有的生命中，权力、财富、爱情全部是一场空。他要告诉你，知道是空，你还是执着。知道归知道，执着归执着。</p><p>​    “细想自己原为他二人怕生隙，方在中调和，不想并未调和成功，反已落了两处的贬谤。正与前日所看《南华经》上，有‘巧者劳而智者忧，无能者无所求，饱食而遨游，泛若不系之舟。’”这是《庄子》里非常美的句子，它的意思是说，人之所以会忧愁和操劳，是因为太聪明、太敏感，总是想要把事情摆平。如果能笨一点、木讷一点，也就没有什么要求了。在庄子看来，最快乐的人生莫过于吃饱肚子，宛若不系之舟荡在水面，随遇而安。我们也许一生都做不到“泛若不系之舟”，可是它能提供一个境界，那就是心境上的自由。</p><p>​    宝玉还由此想到“山木自寇，源泉自盗”。这是说山上最美丽、挺拔的树是最先被砍掉的，最甜美的甘泉是第一个被喝完的。庄子是在提醒我们：人在得意的时候千万要注意，很可能那就是你日后受伤的开始。生命中的得意忘形往往是很危险的状态。</p><p>​    “宝玉细想这句‘赤条条来去无牵挂’的意味，不禁大哭起来。忽然觉得人生真是悲哀，从生到死都没有什么挂碍，便翻身起来至案边，提笔写了一首偈。”佛教禅宗里面常常用 “偈”， “偈”其实是一种非常简短的诗句，里面的意思不直接表达，多用隐喻和象征，基本上不是要你读懂字面的意思，而是叫你领悟。宝玉写道：“你证我证，心证意证。是无有证，斯可云证。无可云证，是立足境。”这非常像“偈语”，可你根本不知道他在讲什么。你也证明，我也证明，你要很诚心地证明，最后发现没有什么东西可证明。人生到最后就是“赤条条来去无牵挂”，有什么可证明的？等到明白“无可云证”的时候，才是人生立足的根本境界。</p><p>​    很多人觉得《红楼梦》讲繁华若梦，最终就是一个“空”字，可是这部小说里面描绘了这么多对人生的眷恋，目的是让人感受到如果不经历这场繁华，是无法了解最后究竟是什么样子的。我经常听到身边朋友说，我终于“领悟”了，他们都把“终于”说得太早了，没过两天他又执迷不悟了。人生的可爱就在于常常是刚领悟完，又执迷了，正是这种领悟和执迷构成了人生中很多有意思的转折，当然你的人生一定会有进步，但很可能会陷入下一个迷障。这个时候宝玉写的这首“偈”，其实是另外一种执着，他却自以为是领悟，所以遭到那三个女孩子的嘲笑。</p><h3 id="二十四-二十六：青春的自由与眷恋：宝玉读“禁书”所体现的"><a href="#二十四-二十六：青春的自由与眷恋：宝玉读“禁书”所体现的" class="headerlink" title="二十四 - 二十六：青春的自由与眷恋：宝玉读“禁书”所体现的"></a>二十四 - 二十六：青春的自由与眷恋：宝玉读“禁书”所体现的</h3><p>​    “早饭后，宝玉携了一套《会真记》走到沁芳闸桥。”唐朝有个诗人叫元稹，他写了一本《莺莺传》，内容是张君瑞和崔莺莺的爱情故事。文中亦有元稹《会真诗》三十乎。在唐朝的时候，小说还没有发展起来，诗是主要的文学形式。《莺莺传》因《会真诗》三十韵，变成了最早对青春恋爱美的歌颂，后人亦称《会真记》，到了晚些时候，元朝的王实甫把《莺莺传》改成《西厢记》。</p><p>​    其实《西厢记》的故事非常非常简单，崔莺莺是相国的女儿，家教很严，在上香时被张君瑞看到，便一见钟情。古代的丫头们没有受那么多的教育，不曾受礼教的压制，所以比小姐更无羁绊，更敢爱敢恨。丫头红娘就觉得小姐有人爱很好，便积极地帮忙穿针引线，最后在她的帮助下，张生翻墙过去，美梦成真。后来红娘因此被老夫人拷打，在《拷红》中红娘就很大胆地骂老夫人，说女儿都这么大了，你不帮她找婆家，还要怪她私自恋爱。我们很难理解为什么《西厢记》在元朝以后的几百年里会在民间有这么大的魅力，其实最主要的原因是爱情在那个时代一直受压抑，完全要靠父母之命、媒妁之言，而《西厢记》是鼓励自由恋爱的。</p><p>​    其实从社会心理学的角度讲，《西厢记》了好，《牡丹亭》也好，在当时都是一种革命，一种利用文字进行的革命。过去的这些“禁书”对青少年的爱情具有很大的安慰力量，因为他们的生命里没有爱情。《红楼梦》强调的是爱情的重要，对于一个青春期的孩子来说，对爱情渴望的强烈程度是可以为之生，为之死的。只有在青春的时候，才会有如此强烈的激情和眷恋。</p><p>​    我们的教科书里面“情”的东西太少，人应该从青春期开始唤醒和发展“情”，孩子们对家庭的“情”，对国家的“情”，对族群的“情”都是从这里起步的。如果一个人的私密的“情”没有完成，其他所有的“情”都有可能是假的。《西厢记》在如此长的时间里影响力之所以这么大，是因为它强调了要善待人间的真情。</p><p>​    为什么我们的教科书里读不到情欲问题，为什么学校里教忠教孝，却不教情教爱？</p><p>​    我不知道。</p><p>​    当情欲变成一种恐惧，当设下重重防范的关节，青春便不会有自由与眷恋，更不会有情感的饱满和精神的升华。</p><h3 id="二十七-二十八：黛玉葬花与宝钗扑蝶：两种不同的生命情调"><a href="#二十七-二十八：黛玉葬花与宝钗扑蝶：两种不同的生命情调" class="headerlink" title="二十七 - 二十八：黛玉葬花与宝钗扑蝶：两种不同的生命情调"></a>二十七 - 二十八：黛玉葬花与宝钗扑蝶：两种不同的生命情调</h3><blockquote><p>花谢花飞花满天，红消香断有谁怜？<br>游丝软系飘春榭，落絮轻沾扑绣帘。<br>闺中女儿惜春暮，愁绪满怀无释处。<br>手把花锄出绣帘，忍踏落花来复去。<br>柳丝榆荚自芳菲，不管桃飘与李飞；<br>桃李明年能再发，明年闺中知有谁？<br>三月香巢已垒成，梁间燕子太无情！<br>明年花发虽可啄，却不道人去梁空巢也倾。<br>一年三百六十日，风刀霜剑严相逼；<br>明媚鲜妍能几时，一朝漂泊难寻觅。<br>花开易见落难寻，阶前愁杀葬花人，<br>独倚花锄泪暗洒，洒上空枝见血痕。<br>杜鹃无语正黄昏，荷锄归去掩重门；<br>青灯照壁人初睡，冷雨敲窗被未温。<br>怪奴底事倍伤神？半为怜春半恼春。<br>怜春忽至恼忽去，至又无言去未闻。<br>昨宵庭外悲歌发，知是花魂与鸟魂？<br>花魂鸟魂总难留，鸟自无言花自羞；<br>愿侬此日生双翼，随花飞到天尽头。<br>天尽头，何处有香丘？<br>未若锦囊收艳骨，一抔净土掩风流。<br>质本洁来还洁去，强于污淖陷渠沟。<br>尔今死去侬收葬，未卜侬身何日丧？<br>侬今葬花人笑痴，他年葬侬知是谁？<br>试看春残花渐落，便是红颜老死时；<br>一朝春尽红颜老，花落人亡两不知！</p></blockquote><p>​    “因低头看见许多凤仙、石榴等各色落花，落花，锦重重的落了一地。”春天将要过去，繁华不再，落花满地。宝玉之所以会看到落花，是因为他有落花般的心事，宝钗能看到的只是蝴蝶、是繁华。宝玉看到落花马上就想到黛玉，因为黛玉是这个园子里唯一会去扫落花来埋葬的人。整个园子里落花全是黛玉的心事，而这个心事也只有宝玉能看到，宝钗根本参与不了这份感情，因为她的生命里没有这个部分。宝玉和黛玉有一个共同的秘密，这个花园里有一个角落是他们一起葬花的花冢，花冢也是一个象征，他们一起埋葬的是他们最美好的青春。</p><p>​    《葬花词》感动了许多人，我想那个感动是因为《葬花词》是一首诀别青春的诗，每一个人在读它的时候，都会意识到自己生命里最美好的岁月，有一天也会像花一样凋谢。</p><p>​    “花谢花飞花满天”，七个字里面有四个字是重复的，你会发现节奏在加快，苍凉在飘落，风起，花瓣越飘越紧密。作者一定真正感受过春天里的百花飘零，那一刹那之间与自己的生命经验构成了对话关系。这种对话超越了所谓的乐观、悲观，或者喜悦、悲哀，因为人在接触到生命本质的时候，肯定是悲欣交集的。“红消香断有谁怜？”颜色要消失了，香味要结束了，谁会去对它们心生怜悯？这是在提醒我们，所有的生命都会结束，可有人会对生命的结束有感觉吗？如果大家对生命的结束都没有怜惜，生命的意义又在哪里？ </p><p>​    “柳丝榆荚自芳菲，不管桃飘与李飞。桃李明年能再发，明年闺中知有谁？”《葬花词》一开始就在暗示黛玉的死亡，花在明年还会再开，可闺中的少女还在不在就不知道了，黛玉对死亡一直有一个非常强的意识，所以这显然不在悼花，而是悼亡。“明年花发虽可啄，却不道人去梁空巢也倾。”这里流露的是黛玉身上的某种毁灭感，意思是所有生命到最后，都不过是“人去梁空巢也倾”的空幻。</p><p>​    “质本洁来还洁去，强如污淖陷渠沟。”此时，黛玉所有的心愿都出来了，生命本质上是干净的，干净的来，也得干净的去。读到这里，你一定会明白，《葬花词》之所以动人，是因为它不只是在讲黛玉。我相信所有被《葬花词》感动的生命，内心都有一种对“干净”的坚持，因为人活在现实里一定有许多的妥协，很多的牵连，甚至龌龊，可是在读《葬花词》的时候，刹那间会引发一个生命对没有任何牵连和纠缠的“干净”的向往，这才是《葬花词》真正动人的地方。“质本洁来还洁去”，总比掉到沟里面，却被那些肮脏的东西污染要好多了，这是黛玉一直以来的心志，她宁可毁灭，也不要沾染人世间的肮脏，我们在旁边看着黛玉孤独痛苦，觉得不忍心，可是对她来说这是一种自我完成，如果用另外的方式，让她去活，她是无法活下去的。</p><p>​    “侬今葬花人笑痴。”我今天做葬花这种傻事，所有人都笑我。文学里面的生命跟现实里不一样，你现在如果在校园里面看到一个女孩在那边葬花，你大概还会骂她一顿，说她神经病。可是我要说：所有伟大的文字都是神经病文学，文学里的生命如果没有这个“痴”不会动人，为什么《葬花词》在《红楼梦》里这么美，是因为现实和文学最大的不同是：所有现实里不能做，不敢做的事情，在文学里都能变成非常美的东西。“他年葬侬知是谁？”对生命的最本质的警醒出现了，有谁会珍惜你的身体、你的灵魂还是个干干净净的？《葬花词》让人触碰到很多的东西，其中有对自己生命的眷恋，也有对身体上的洁净的坚持，归根结底就是怎样对待自己的生命。 “一朝春尽红颜老，花落人亡两不知，”春天过完了，青春的生命也结束了，是花在落，也是人在凋零。</p><p>​    《红楼梦》是一部伟大的小说，在小说里夹了一首最伟大的诗。这首诗里完全是生命里自我坚持的部分，有时候我们读西方的诗也会读到这样的东西，就是刹那之间对自己生命的珍惜、挽叹和感伤。</p><p>​    “宝玉听了，不觉痴倒。”我想，所有人听了都要痴倒。</p><p>​    “宝钗意欲扑了来玩耍，遂向袖中取出扇子来，向草地下来扑。”这个女孩平时很含蓄、优雅。所以扑蝴蝶也不会像个百米运动员一样，我想《红楼梦》的作者一定看过《游国惊梦》，因为舞台上杜丽娘扑蝴蝶的那场戏，是精美绝伦的舞蹈，也许这些舞台形象都是作者的创作灵感和艺术储备。“只见那一双蝴蝶思起思落，来来往往，穿花度柳，将欲过河去了。”这是对宝钗的动态美的描述，就那么跟着蝴蝶上上下下，忽起忽落。“倒引的宝钗蹑手蹑脚的，一直跟到池中滴翠亭上，”宝钗的身体比较丰满，很快就“香汗淋漓，娇喘细细”。</p><p>​    在二十七回里，作者刻意把“宝钗扑蝶”跟“黛玉葬花”作对比，也把书中的两个最重要的女性的生命形态作了完整的呈现。从宝钗和黛玉身上，我们看到的不只是两个女性的美，还有生命的两种难以抉择的状态。宝钗坚守一切人间的秩序、伦理和规则，以一种很健康、积极的态度入世。黛玉是孤独的，她的逍遥、坚持和孤傲都在自己的世界里完成。作者把这两个女性摆在一起，很明显地表现了这部小说的象征意义。就像宝玉处在宝钗和黛玉之间无法抉择一样，我们的生命也随时间面临着入世和出世的两难。一方面觉得人不应该离开人群，承认入世的价值；另一方面又觉得自己有很孤独的一部分，不断地想要离开人群，去完成属于自己的那份完美，这是一个互相冲突的状态，只有成熟的生命才会在进退之间掌握好分寸和平衡。</p><p>​    一个是风和日丽，蝴蝶纷飞，一个体态丰满的女孩扑蝴蝶的美；另一个是花落花飞、红消香断，一个很瘦很孤独的女孩埋葬落花的美。如果没有偏见，你一定能觉察到自己的生命里这两种东西都有。这其实是一种幸福，这个幸福的意思是：你既看到了繁华，也看到了凋零，很多人认为看到凋零是一种悲哀，我却认为看到凋零是一种领悟。当你看到成千上万片的花瓣在你面前纷纷扬扬落下的时候，那么多的花就这样死在眼前，你会有很奇怪的感觉，那感觉不只是小小的感伤，而且是一种耗尽自己生命的悲壮。你刹那之间就懂了黛玉葬花的感觉——埋葬自己。有一天你会花这样的心思去把自己的生命做一个了结。因为黛玉是仙，所以她对生命的领悟非常透彻。对比起来，那个扑蝴蝶的女孩子，看到的其实只是生命的表层。</p><h3 id="二十九-三十：疯、癫、痴、傻、贪、嗔、怒、怨：再读《红楼》之情"><a href="#二十九-三十：疯、癫、痴、傻、贪、嗔、怒、怨：再读《红楼》之情" class="headerlink" title="二十九 - 三十：疯、癫、痴、傻、贪、嗔、怒、怨：再读《红楼》之情"></a>二十九 - 三十：疯、癫、痴、傻、贪、嗔、怒、怨：再读《红楼》之情</h3><p>​    “只为卿：疯、癫、痴、傻、贪、嗔、怒、怨，六根不净，七情已生，八风凌冽。”</p><p>​    情之一事，便为着迷，领悟，再着迷，再领悟。众生因情执在六道中或升或降，无得一日喜乐安宁。无情的偏执，终究是一厢情愿。有爱又如何？有爱一样没得选择。何况，爱是会磨灭的，人是会变的。</p><p>​    搁笔不谈。“且说宝玉因见林黛玉又病了，心里放不下，饭也懒去吃，不时来问。”林黛玉听说，便冷笑了两声：“我也知道白认得了我，那里像人家有什么配的上呢。”宝玉听了，便向前来直问到：“你这么说，是安心咒我天诛地灭？”林黛玉一时解不过这个话来，宝玉又道：“昨儿还为这个赌了几回咒，今儿你到底准了我一句。我便天诛地灭，你又有什么益处？”因为宝玉过去跟她发过誓。如果跟黛玉分开，就天诛地灭。黛玉这才想起上一次他们发誓的事情，知道“今日原是自己说错了，又是着急，又是羞愧”。可是林黛玉绝不会承认自己错了。便颤颤兢兢的说道：“我要安心咒你，我也天诛地灭。”“你心里生气，来拿我来杀性子。”她一说这个，宝玉就更生气。两个人明明都是为对方好，却又都在试探对方到底是不是真的对自己好，情越深，越觉爱得不够，越需要证明，最后就变成了说不清、道不明的纠缠。黛玉的意思是，你心里如果没有鬼，根本就无所谓，为什么我一说“金玉良缘”，你就着急，就难过？两个人都在用假心试探对方，越试探离自己的期望越远。</p><p>​    情感的试探最后都是毁灭性的。“便赌气向颈上抓下通灵玉来，咬咬牙，狠命往地下一摔，“也不顾病，赶来夺过去，顺手抓起一把剪子来要剪。”这是毁灭性的情感，也是《红楼梦》里最动人的情节之一，它的动人在于会让你联想到自己的情感。情感上的纠缠，本来没有任何道理可讲，因为情深，情人会“宁为玉碎，不为瓦全”，一点点妥协都不能容忍。林黛玉的爱情是最彻底、纯粹的，包括她的葬花和焚稿断痴情，都是因为她容不得一点瑕疵。这就是毁灭跟完整之间的关系。梁山伯与祝英台、罗密欧与朱丽叶、林黛玉与贾宝玉的故事都属于这一类，就是情深到宁愿去死，连死亡都没有那么痛。</p><p>​    “在现实世界里让你觉得最痛苦的东西，一定是最后能让你领悟的东西；让你受尽折磨的那个人，恰恰是你宿命里最爱的人。”</p><h3 id="三十一-三十二：至深柔情为相知：三读《红楼》之情"><a href="#三十一-三十二：至深柔情为相知：三读《红楼》之情" class="headerlink" title="三十一 - 三十二：至深柔情为相知：三读《红楼》之情"></a>三十一 - 三十二：至深柔情为相知：三读《红楼》之情</h3><p>​    不想刚走来，正听见史湘云说经济事，宝玉又说：“林妹妹不说这样混帐话，若说这话，我也和他生分了。”本来黛玉的潜意识里觉得会看到湘云跟宝玉，没想到宝玉在湘云面前竟然说自己最爱的人是黛玉。作为一个被爱的对象，站在门外的黛玉，此时的心情真是五内俱焚。两个彼此有深情的人，忽然间素面相见了。这之前两个一直是用假面互相试探的，此时终于听到真话了，而且这真话是当事人不在场的情况下说的。</p><p>​    “妹妹往哪里去？怎么又哭了！”——“好好的，我何曾哭了。”黛玉对宝玉很少有好气，但因为刚才偷听到的那句话，此时内心变得特别柔软。这段对话很温柔，两个人都动了真情。宝玉就笑了笑说：“你瞧瞧，眼睛上的泪珠儿未干，还撒谎呢。”一面说，一面禁不住抬起手来替他拭泪。“黛玉也禁不住近前伸手替他拭面上的汗。刚才黛玉还说“你要死了，你动手动脚的。”现在她自己也忘了男女之别，两个人都回到了纯粹的真性情中，这其中没有任何的礼教可言，礼教跟性情的根本区别在于，性情是发自内心的率性，礼教则是来自外界的限制。这个场景被外人看到不知道会演绎出什么八卦，可是他们根本不在乎了。作者一直认为外在所有的限制，都不如发自内心的一点点真性情可贵，这便是最动人的地方。</p><p>​    宝玉就呆在那里，瞅了半天，方说道“你放心”三个字。这是《红楼梦》里很惊人的表达，长久以来，他们明明彼此相爱，又是知己，却始终没有用真心相待。此时宝玉突然冒出一句“你放心”，没头没尾，很像禅宗里的棒喝。宝玉觉得自己只有这三个字好讲，因为深情是无法替代，也说不清楚的。禅宗公案里面，常说的其实也就是“你放心”三个字，它告诉你，是你自己制造了很多焦虑和纠结，其实一切并没有那么严重。人生所有的“食、嗔、痴、慢、疑”都是由“不放心”而起。</p><p>​    宝玉说你的忧郁、悲凉、幻灭，都是因为你没有放下那个心，总觉得没有安全感，整天生气流泪，才把身体搞得一塌糊涂。“但凡宽慰些，这病也不得一日重似一日”。林黛玉听了这话，如轰雷掣电，细细思之，竟比自己肺腑中掏出来的还觉恳切。”这是三十二回里最动人的“情”的描绘，人的一生当中，哪怕只听到过一次这样的话，感受过一次这样深切的关心就值了。</p><p>​    袭人“心下暗度如何处治方免此丑祸。”从袭人的角度看，黛玉和宝玉的这个关系是一桩“丑祸”，可是作者不这么认为，他写的是一段很美的真情，我们能不能在这个世界上看到真情，全看你是从“丑祸”的角度还是“真情”的角度去打量一件事。唐玄宗爱上杨玉环，从史书里是丑祸，在白居易的《长恨歌》里就变成了“真情”。</p><p>​    至深的柔情，不为他，但为相知。</p><h3 id="三十三-三十五：所有的如泣如诉，哭的都是自己：宝玉挨打后的人性再探"><a href="#三十三-三十五：所有的如泣如诉，哭的都是自己：宝玉挨打后的人性再探" class="headerlink" title="三十三 - 三十五：所有的如泣如诉，哭的都是自己：宝玉挨打后的人性再探"></a>三十三 - 三十五：所有的如泣如诉，哭的都是自己：宝玉挨打后的人性再探</h3><p>贾政一见，眼都红紫了，也不暇问他在外流荡优伶，表赠私物，在家荒疏学业，淫辱母婢等语。贾政在《红楼梦》中出场的机会并不多，可是他一出场，语言绝对是官场上的。比如经常使用那些对仗的句子，前面说宝玉“在外流荡优伶，在内奸淫母婢”，现在又说要打死宝玉，以免“上辱先人，下生逆子”之罪。这简直像判案的语言。为什么贾政反应如此激烈，因为他担负着家族的使命，贾家好几代的宝贵不能断送在他手中。他难过的是没有把孩子教育好，这意味着他在儒家的伦理中背负了很大的罪责。</p><p>“一脚踢开掌板的，自己夺过来，咬着牙狠命盖了三四十下”。作者在写大板子打下去时没有“打”，而是用“盖”字，“盖”显然是用整个身体的力量在打。“到这步田地还来解劝。明日酿到他弑君杀父，你们才解劝不成！”贾政此时越来越像是表演了。我一直觉得如果旁边没有这些人，他不一定会这样子。因为他旁边有这么多人，在讲了弑君杀父以后，下手的时候必须更狠，他就是要作态让身边的人看到，即使是我的儿子，我也要维持正义。</p><p>“因哭出‘苦命儿’来，忽又想起贾珠来，便叫着“贾珠”哭道：“若有你活着，便死一百个我也不管了。”王夫人意思是，如果哥哥还在，打死一个百宝玉我也不在乎。这是很可怕的东西。对于这个妇人来说，最重要的是她得有个儿子。这种话读起来会感觉毛骨悚然，好像她不是在疼宝玉，而只是在担心自己的身份和地位，真正的人对人的不忍和悲悯与伦理道德里的人与人的关系，这两个东西是截然不同的。本来，宝玉没有必要悲悯金钏儿，可是宝玉却忍不住去悲悯，王夫人此时本该悲悯宝玉，可她悲悯的却是自己。</p><p>“别人还可，惟有宫裁禁不住也放声哭了。”李纨的哭是因为王夫人提到她丈夫了，她觉得自己年经轻轻就守寡了，也很惨。贾母“也不觉滚下泪来”，所有的女性都有一肚子的悲哀，贾母也想到自己的丈夫了。李纨想到的是自己的丈夫贾珠，王夫人觉得她自己命很苦是因为儿子死了。三个女人哭的都是“三从”里面的东西，每人哭的其实都是自己。等读到三十四回，才知道真正哭宝玉的只有一个人，那就是林黛玉。作者强调的是亲子可以只是一种关系，而不见得是爱。作者一再提醒我们，有一种爱是生命对生命的，它不属于任何秩序和规范，这种爱才是真正的爱。</p><h3 id="三十六：何为死生？——《红楼梦》中死生观浅谈兼答友人问"><a href="#三十六：何为死生？——《红楼梦》中死生观浅谈兼答友人问" class="headerlink" title="三十六：何为死生？——《红楼梦》中死生观浅谈兼答友人问"></a>三十六：何为死生？——《红楼梦》中死生观浅谈兼答友人问</h3><p>​    “宝玉谈至浓快时，见他不说了，便笑道：“人谁不死，只要死的好。那些个须眉浊物，只知道文死谏，武死战，这二死是大丈夫死名死节。竟何如不死的好！”宝玉认为，死亡是人生必须完成自己的一个过程，所以他很反对儒家所谓的“文死谏、武死战”。按照儒家传统的标准，武官最好的死法就是为战争而死，文官最好的死法就是拼死进谏皇帝。宝玉提出了非常颠覆传统的看法，他觉得这是男人为自己定出来的一个伦理，只不过把死亡作为沽名钓誉的工具而已。</p><p>​    “必定有昏君他方谏，他只顾邀名，猛拼一死，将来弃君于何地！必定有刀兵他方战，猛拼一死，他只顾图汗马之名，将来弃国于何地！所以这皆非正死。”宝玉认为传统的“文武之死”都不是最好的死法，这样的死，从逻辑上来推论，还是不死的好，因为武官不死就没有战争，文官不死就没有昏君。就像我们那么渴望诞生岳飞、文天祥这样的英雄，可是这样的人出现只能说明这是个糟糕的时代。如果一个社会一直推崇这一类人，就说明这个社会在不断制造这样的环境。有昏君才有“文死谏”，有战争才有“武死战”。</p><p>​    “我就死了，再能够你们哭我的眼泪流成大河，把我的尸首漂起来，送到那鸦雀不到的幽僻之处，随风化了。”其实这其中有老庄的死亡观。庄子曾在妻子死后鼓盆而歌，他认为生命其实就是从一个原本无的状态，慢慢形成一个物质性的存在。而这个物质到最后又化掉，回归到大自然中。作者受老庄哲学的影响非常大，他觉得物质性的肉体有很多转换的空间，贯彻的是人世间所有的物质都是互相转换的，并没有固定的形式，庄子常问，我们怎么知道死亡是结束而不是开始？我们怎么知道诞生是开始而不是结束？因为在更大的生死之谜没有解开之前，我们对生命的真实状态并不十分了解。</p><p>​    可是宝玉很快又颠覆了他自己的讲法：“自此再不要托生为人，就是我死的得时了。”这是佛家的思想，佛经里面最常出现的句子叫“不受后有”，佛家认为，生命修行的最佳状态是彻底脱离六道轮回。因为是生命就会有苦，只有不再轮回，才能真正解脱。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八声甘州五阕</title>
      <link href="/2023/09/09/ba-sheng-gan-zhou-wu-que/"/>
      <url>/2023/09/09/ba-sheng-gan-zhou-wu-que/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><h2 id="八声甘州五阕"><a href="#八声甘州五阕" class="headerlink" title="八声甘州五阕"></a>八声甘州五阕</h2><h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>​    万千金市骏簇雕鞍，消受太虚冰。问今朝何夕，华筵歌舞，剑气崚嶒。我欲飞升天上，弹铗叩鸿冥。看水平平岸，多少愁城。</p><p>​    一自罡风吹散，甚骑鲸仙去，几点星星。算灵源路杳，直到海波横。尽飘零、满头霜露，向高寒、鬼语啸秋声。沧桑感、旧时猿鹤，换了青青。</p><h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><p>​    惨霜风吹老一林枫，黯黯雁初归。向长亭折柳，伤心声里，不见芳菲。前度刘郎久客，无计挽斜晖。尘网何时扫？门外鸦啼。</p><p>​    目送孤云返照，问苍茫宇宙，指点微微。渺予怀谁诉，挥手谢天机。怅余年、飘零倦旅，对江山、清苦未须辞。吾衰矣、数峰瞑霭，且醉瑶卮！</p><h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><p>​    一人生七十古来稀，何堪感沉沦。剩残鹃啼血，翻成覆水，海沸红尘。多少虚名竖子，未悔却竣巡。三百余年耳，长夜鸣春。</p><p>​    弹指沧桑过眼，数英雄豪杰，此意真真。对江山信美，儿女太酸辛。算今宵，中流击楫，挽天河、精卫解衔恩。都休问、几时得见，夕照黄昏？</p><h3 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h3><p>​    故与君饮罢夜归来，遥问太虚灵。只当年赤壁，东南形势，汹涌潮声。虎啸猿啼月白，下瞰大江横。星火中宵迸，霹雳飞腾。</p><p>​    百尺危栏拍手，问天高地阔，去路谁登。算苍松翠柏，犹自战青冥。敛双蛾，低头俯视，渺沧波、不似昔时平。惟惟有、石尤风急，昨夜春冰。</p><h3 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a>（五）</h3><p>​    大乾坤一雨洗尘埃，昆明劫餘灰。算今朝重九，凭高放眼，剩此徘徊。万事都归泡影，空对谪仙杯。把酒酹山月，为我低回。</p><p>​    长啸欲飞天籁，有苍松翠柏，照彻寒梅。念梁园宾客，同约俊游陪。唤真人，星辰剑履，怕花枝、凝露未成堆。何衰矣、任东风里，金镜休催？</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创世诗</title>
      <link href="/2022/11/06/chuang-shi-shi/"/>
      <url>/2022/11/06/chuang-shi-shi/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><h2 id="明日之后"><a href="#明日之后" class="headerlink" title="明日之后"></a>明日之后</h2><p>我于众生之中行走<br>飞檐走壁 倒提长锋<br>随回雪与流风<br>吟啸鬼语和钟声</p><p>我自摩天高楼飞跃<br>周围弥散的是黑夜<br>任我身 光明点缀与琢磨<br>以旧日的记忆 绘就轮回的天国</p><p>挥舞着的是我的断臂<br>星空的灰黯结为我的眼翳<br>我仍冲杀在前 即便了无痕迹<br>爱已将我坚不可摧的铁甲销蚀殆尽</p><p>我高呼世人的名姓<br>我狂饮最后的光明<br>我看见巨龙再次张开双眼<br>我再次奋力向天高举叛逆之剑<br>我还存留最后的清醒</p><p>我将灵魂化作心火将黑暗烧穿<br>拥抱那之后的光明与温暖<br>即使身躯已燃尽<br>我已在虚幻中望见<br>明日之后 未来已来</p><h2 id="永夜年代"><a href="#永夜年代" class="headerlink" title="永夜年代"></a>永夜年代</h2><p>深蓝国度 天鹅绒的纪元<br>永恒的幽灵船<br>自旧日时代驶来<br>请看这重生的城邦<br>与笼罩的永夜年代</p><p>当爱人化作梦魇<br>当甜言蜜语诡谲成如水利剑<br>当水星与金星结冰<br>当热忱之心碎裂凋零<br>当破裂的人格将记忆篡改<br>当我 人间已不在</p><p>这是你的选择<br>这是你的身体 你的人生 你的命运<br>决定你的是你自己<br>该离开了 我告诉我</p><p>高声作最后的放歌<br>至此之后便深自缄默<br>如云漂泊<br>此处的土地 没有一方归属于我</p><p>巨人无法穿过钢铁藩篱的缝隙 矮子可以<br>——但我将把这牢笼撕裂<br>让这牢笼 与施加于心灵的桎梏<br>永远粉碎 化为尘灰</p><h2 id="罪人挽歌"><a href="#罪人挽歌" class="headerlink" title="罪人挽歌"></a>罪人挽歌</h2><p>我将红唇化作罂粟<br>在缠绵的长吻中把青春消磨<br>我听凭爱的手掌遮住视线<br>让玉臂凝为桎梏灵魂的枷锁</p><p>我把时间与空间的界限尽数揉碎<br>我活在过往 也在未来<br>我的妩媚与狂放儒雅不可企及<br>我是冷月下那株清风夜唳的树<br>我的孤独早已超越时空</p><p>请准予我稍作最后的歇息<br>请领悟这颠倒世界中的真谛<br>在这渐悟与顿悟的交织<br>勘破的每一刻都是悲欣交集<br>生命的投入是神格大成的最后工序</p><p>当我咽下口中的逆血<br>我已得知自己必然的结局<br>然而追求者的生活永远崭新<br>即使生活将我百般愚弄<br>我仍要作一百零一次追寻</p><p>沦落于红尘是我的原罪<br>我蔑视这命运 但毫无埋怨<br>埋怨命运等于嘲笑自己<br>抽丝作茧 化痛为美<br>我将血泪所凝的怪诞与孤傲<br>书写最后长吟的挽歌</p><h2 id="当雷鸣划破长空"><a href="#当雷鸣划破长空" class="headerlink" title="当雷鸣划破长空"></a>当雷鸣划破长空</h2><p>当灯光昏黄 冥冥薄暮<br>将心灵的底片洇染上一层层殷红<br>我如同横空而过的一颗流星<br>闪烁凄凉的美丽 划过心空</p><p>凄寒依旧 寒露沾襟的<br>也依旧是那阵秋冬的绪风<br>望空蒙浩瀚的疏星<br>彻悟凝固于深山<br>那个房间 之中的沉痛<br>生命的过程恰好是从激越走向安详</p><p>虔读我的一腔热忱 谁愿？<br>那悲愤压抑的倾诉<br>是深绾于心的血泪 情浓于心的忠贞<br>何人似我<br>社会早已光影斑驳 再无訇响<br>剑匣已紧固到结冰的程度</p><p>当前方再无路可走<br>当狰狞的雷鸣划破长空<br>当追求宁静的路途充满焦灼<br>当步入圆融的心门处处分裂<br>我仍在身前 为马前卒<br>孤傲的守护是我殒落前最后一曲《广陵》</p><p>麻木于我来说过于艰难 抑或以死抗争<br>我无可奈何于自己的无所适从<br>我纠缠于自己和自己的心<br>多情而虚弱</p><p>然而雷鸣终将划破长空<br>我不是黑暗王国里的残烛<br>骑士的荣耀即生命 那是守护<br>这守护只为一人而生</p><h2 id="暴雨将至"><a href="#暴雨将至" class="headerlink" title="暴雨将至"></a>暴雨将至</h2><p>当我什么都可以失去<br>我已没有什么可以失去<br>并非一无所有时方能一无所有<br>暴雨将至 我是迷途的旅人<br>直到深海的尽头</p><p>我的身躯撞向墙面 又一次<br>深深嵌入其中<br>我听到碎裂的声音<br>那是墙体 我的臂骨和腿骨<br>我的脊柱还在 顶天立地 刺破苍穹</p><p>我感受到肌肉与筋骨的撕裂<br>战斗 向死而生于我无异于解脱<br>我的拼搏 浴血的伤痛只为爱<br>但不为任何人<br>再诚恳 亦是难渡凡尘</p><p>当薪火燃尽黑暗<br>我接过前人手中的烈焰<br>然而身后已无人 这光亮终熄灭于我之手<br>任我以生命 以灵魂作为燃料为其存续<br>未来除了虚无一无所有</p><p>咬紧牙关 我再次拄戈站起<br>毕竟身上还有一块骨骼无法打断<br>除了它<br>膝骨 也是宁折不弯<br>斑驳长戈再度向前挥舞<br>直至寸寸断裂</p><p>当战斗以我之死 以我的胜利而告终<br>暴雨将至 血色的雨滴终将把火作熄<br>万物寂灭 终焉的时刻已然来临<br>我的喋血<br>是我最后的证明</p><h2 id="与我一人"><a href="#与我一人" class="headerlink" title="与我一人"></a>与我一人</h2><p>从正常终于重归于不正常<br>我登临于芙蓉般金色的山顶<br>露出青天削出的身段<br>我与色彩 音韵 云雾与树林同在<br>我感到灵魂已然自由 再无桎梏</p><p>松色如暮 我洁白的衣冠镀上金边<br>于透明的斜照里时隐时现<br>我袍中藏有锋利的笔 与剑<br>举手若电 云海的汹涌只与我一人</p><p>孤独和被遗弃感对于大隐于市的居士极为重要<br>即使这必要有着不堪磨难的悖论<br>心灵的废墟中也有着取暖的炉火<br>人越孤独 生命艺术的创作便越自由<br>绝望的幽谷即是亢奋的崩峰<br>现实的黑暗永远无法吞噬新月的清辉</p><p>我用我的双手将自己埋葬<br>把我的愤怒 我的悲鸣 我的消逝<br>化作自己孤独前行的力量<br>我注定用生命结成雪白的茧<br>待茧成羽化飞升<br>衔锐利荆棘 为烈焰而鸣唱</p><p>与我一人 山下的黎明是神性的光辉<br>我的长枪指天<br>无惧世俗的蹂躏与压迫<br>我眼中的色彩在轰响中燃烧<br>一步一诗是我痛苦与才华的绝唱<br>正如我玄妙的长啸</p><p>千锤百炼 我飞翔的生命挂于悬崖<br>与我一人<br>我将身向黑暗 换心独向光明</p><h2 id="点燃明日的火焰"><a href="#点燃明日的火焰" class="headerlink" title="点燃明日的火焰"></a>点燃明日的火焰</h2><p>我从未于惊涛骇浪中迷失<br>黑暗也无法将我光明之心吞噬<br>我徘徊呐喊 高呼世界的新生</p><p>璀璨！绝不只是我手中高举的长剑<br>还有我的心脏 无休止地跳跃<br>一如我正在燃烧的生命<br>光明而夺目</p><p>街道与小巷空无一人 只有妖艳的暗红<br>就算有 也只是魔幻而无声的人海<br>这海上只有泥做的船<br>唯有祭起心灯 焚起心香方能抵至彼岸</p><p>执权柄者总是将自定的善恶给予世人<br>他们都自以为早就知道天空与大地的区别<br>六道的轮盘在我掌中高悬<br>我的信徒都追随在我身后 颂赞轮回的伟大<br>然而我不是执权柄者 我也是他们的一员<br>冲杀于他们的身前</p><p>当光也将我抛弃 我已不再追光<br>燃烧的是我的身躯 点燃明日的火焰<br>我即是光 绽放光明与温暖<br>照亮黑暗 与血色永远鲜浓的地方</p><h2 id="迷途沙尘"><a href="#迷途沙尘" class="headerlink" title="迷途沙尘"></a>迷途沙尘</h2><p>我握住街头横死之人的手<br>我亲吻艾滋病人的脸庞<br>我于难民溃烂伤口中捡出蛆虫<br>我背负炸飞双腿之人的臂膀<br>我化作无色世界中的灵眸<br>我为失去欢乐的受难者照亮希望</p><p>我于迷途沙尘中奔走 诚实而谦卑<br>即使纯洁与善之上蒙满创伤<br>那些意想不到的奇迹 在漫长的岁月里<br>仍有忽然间彗星的出现<br>狂风乍起</p><p>山野 风起沙逐<br>仰头望天 望天空中的流云变幻<br>与火烧云的色彩<br>长夜漫漫 我把麻木与冷漠拒之天外<br>将这彗星的色彩薪火相传</p><p>我撞响柔和悠远的钟声<br>让大爱投石于水 如波纹圈圈扩散<br>在黑暗中化成金色的圆环<br>飘向幸福可爱的婴儿 拥抱母亲的襟怀<br>飘向戒律在身的苦囚 予其光明与温暖</p><p>迷途沙尘<br>两个罪犯望向铁窗之外<br>一个凝视泥土 一个仰望星辰</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤旅青春</title>
      <link href="/2022/02/13/gu-lu-qing-chun/"/>
      <url>/2022/02/13/gu-lu-qing-chun/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><ul><li>thyzzs  NOIP 2019 山东赛区 - 赛后回忆录   2019.11.18 - 2019.11.19</li></ul><blockquote><p>“后来许多人问过我一个人夜晚踟蹰路上的心情，我想起的不是孤单与路长，而是波澜壮阔的海，和天空中耀眼的星光。”</p></blockquote><h3 id="二〇一九年十一月十七日"><a href="#二〇一九年十一月十七日" class="headerlink" title="二〇一九年十一月十七日"></a>二〇一九年十一月十七日</h3><ul><li>NOIP 2019 Day 2  山东外国语职业大学 - NOIP山东赛区总考点</li></ul><p>​    长吁一口气，我站起身，抓起蜷缩在门口的书包，走出了考场。回想不堪一提的两天竞赛，我不禁苦笑连连。今年的题历史性的难，穷尽洪荒之力，我也没能改变被斩马下的命运。两天考试，身败名裂。</p><p>​    “我穷尽碧落与黄泉之下 / 凝结的泪填不满的空殇 / 所有为你而行的空幻梦想 / 都不及最后与你许的愿望……”信竞神犇改编的《WA回还》还在耳旁回荡，腿拖着身心俱疲的我，那在笔记扉页一笔一画写下的“不入省队不复还”像是个荒诞的玩笑，只能埋藏在灵魂最深处，讲给自己听。</p><p>​    整理完资料，或许，就快要退役了吧。我想。抬头。恍然察觉笔记与资料已垒作半人高。我拿起一本笔记，指腹磨砂着纸背上凸起的字痕，触感粗糙分明，使我想起每次训练后刺骨的寒风，以及双肩上沉重的分量。</p><p>​    我曾经是这座城市唯一学习信竞的初中生，因为唯一，所以特别。</p><h3 id="二〇一七年十一月二十七日"><a href="#二〇一七年十一月二十七日" class="headerlink" title="二〇一七年十一月二十七日"></a>二〇一七年十一月二十七日</h3><ul><li>NOIP 2017 成绩公布日  肥城市龙山中学</li></ul><p>​    这是2017年，11月的一个清晨，我照常坐进教室，慵懒地掏出一本英语书。班主任忽如一阵春风般飘然而至，满脸欢悦。</p><p>​    我获得了NOIP普及组三等奖。虽然奖项不大，却是泰安市初中唯一一个奖项，也是肥城市历史上第一个初中奖项。那天，是十一月二十七日。</p><p>​    消息瞬间如地震波般传遍全班。赞叹、羡慕与敬佩一时间闯入了我的世界。我开始“特立独行”，不再紧跟学校的学习进度，而是常常一个人钻进空旷的机房或图书馆，钻研艰深的信竞试题。偌大的机房里，与我相伴的，除了深夜微微发亮的屏幕，就只有透过窗纱洒落的星光了。</p><h3 id="二〇一八年三月三日"><a href="#二〇一八年三月三日" class="headerlink" title="二〇一八年三月三日"></a>二〇一八年三月三日</h3><ul><li>FOI 日常训练  肥城一中1号机房</li></ul><p>​    “我看看你刷了多少题。”一分神，手中的鼠标便不见了踪影。抬头，是一张瘦削的脸，黑白框眼镜，有些憔悴却难掩眼中的那份坚毅。</p><p>​    “做了不少。”他扭过头来。“我是千华缭乱。”笑着，他拱了拱手，很自然地推了推眼镜。</p><p>​    “我是thyzzs。”我也介绍道。</p><p>​    “我知道，初中大佬嘛！加油，争取以后冲省选，一中还没出过省队队员呢。”</p><p>​    我回头，忽然发现屏幕上自己在FOI团队中的分组变成了“省队爷钦定”。转身看着他，还在笑着，一口白牙闪着光，笑容中荡漾着对OI的热爱。</p><p>​    望着这位比我高两级，性格若显古怪的学长，我心头一热。</p><p>​    “嗯，一起加油。”</p><h3 id="二〇一八年七月二十三日"><a href="#二〇一八年七月二十三日" class="headerlink" title="二〇一八年七月二十三日"></a>二〇一八年七月二十三日</h3><ul><li>清北学堂2018夏济南普及组训练营闭营式</li></ul><p>​    收拾好笔记本电脑与旅行箱，我伸了伸懒腰，感到十分惬意。连续八天十二小时的集中训练，劳累而又充实，虽然疲倦，却又收获满满。这一年，我将进军提高组，向省二的目标发起冲刺。清北学堂，一中集训，洛谷月赛，八连测模拟，我辗转奋斗，只为青春一梦。</p><p>​    “累不累？”</p><p>​    “累。但是，累又如何？”</p><p>​    我们相视一笑。机房外，星河闪亮，宛如这条奋斗的青春孤旅，前方的路上，璀璨非凡。</p><h3 id="二〇一九年十月二十四日"><a href="#二〇一九年十月二十四日" class="headerlink" title="二〇一九年十月二十四日"></a>二〇一九年十月二十四日</h3><ul><li>“1024”程序员日  NOIP 2019 Day -22  肥城一中信息学自习室</li></ul><p>​    这是2019年10月24日。2019年的程序员日。</p><p>​    已是深夜。教学楼上只剩下几点灯光，唯有机房的灯一直亮着。</p><p>​    这已经是我的第三次比赛。学长换了一届又一届，手持NOIP提高组二等奖，我也顺利进入肥城一中火箭班，向着最终目标——杀入省队，拿下国赛协议步步前行。暮秋，手中键盘微凉，却无法阻止千行代码在指尖流淌。“数论算法 图论算法 / 高斯费马 树上开花 / 线性规划 动态规划 / 时间爆炸 如何优化……”伴着Menci &amp;&amp; 24OI大佬们改编的《膜你抄》，我不知疲惫地过着各种可能考察的知识点。</p><p>​    扭头，知今天已是10月24日。我站起身，品了一口咖啡。1024个“0”与“1”在我眼前铺展，汇成一片数据的星辰大海。我笑了笑，在博客中打下几个字：</p><p>​    1024，码出未来。</p><p>​    …………</p><h3 id="二〇一九年十一月十七日-1"><a href="#二〇一九年十一月十七日-1" class="headerlink" title="二〇一九年十一月十七日"></a>二〇一九年十一月十七日</h3><ul><li>NOIP 2019 Day 2  FOI参赛专车 - 泰新高速</li></ul><p>​    一幕幕回忆闪现在眼前，我收回弥散的思绪。“IOI / 持有一半的梦尚未回还 / 愿今生将你的题目过完 / 一条殊途 绝不回转 / 一同经历的万千代码 / 不及你与他初见的模样 / 天月将白 赴往题库 / 为你闯出的前方……”那首《WA回还》仍萦绕耳畔，我渐渐明白，青春的孤旅路上，唯有奋斗，方能前行。</p><p>​    我看向星空，一眼望见那颗明亮的北斗星。冥冥之中，那颗北斗星仿佛成了我命运的指引，引我在青春孤旅，砥砺向前。</p><p>​    前方，星辰大海。在青春孤旅之上，我必将为我梦想，挥尽半生癫狂。</p>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文评《夜雨寄北（新诗版）》</title>
      <link href="/2022/02/13/ye-yu-ji-bei/"/>
      <url>/2022/02/13/ye-yu-ji-bei/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><blockquote><p>会有一天，我跟你说起今夜的雨，</p><p>弥漫的水气，浸润了远来的家书。</p><p>窗外的池塘，秋水涨满，</p><p>我在想，你是怎样写下了我的称呼。</p><p>故乡好远，阻隔着千山万水，</p><p>归期迷茫，日日在手指间飘忽。</p><p>离人的思念，就像那红烛的芯子，</p><p>刚刚剪去，又悄悄长出。</p><p>好在啊，好在还有记忆中西窗的烛光，</p><p>它摇曳在眼前，摇曳在今夜的巴蜀。</p></blockquote><p>​    本诗改编甚妙。</p><p>​    原诗中本为“夜雨寄内”（一作），为写赠故乡爱妻的家书之作，而改编却“反而行之”，不再抒写“我”写家书的背景，而转而描写“我”收到家书时的所想所思。虽是收到家书，却丝毫不提家书内容，只用“我”的思绪，“我”周围的意象（池塘、水汽、秋水）来含蓄而又十分深沉饱满地表达羁旅之愁、不归之苦，情感顿时在雨的静谧氛围中跃然纸上。</p><p>​    “情到深处易生幻。”夜雨之秋，本就是容易相思的时节，在这特定环境中，已跃然纸上的羁旅愁、不归苦便与雨的绵密交织在一起，化作“怎样写下称呼”的伊人，化作千山之外的故乡。第一小节并未有刻意的抒情，然读者仅从此景中稍随之联想，便能感悟到那不输原诗的深情流露。</p><p>​    第二小节构思则更加巧妙。“日日”“飘忽”的是一封封承载相思的家书，更是渺远到令人迷茫的归期。“飘忽”一词可谓用词神妙。归期不定，思而不得归的浓情便重重相叠，而“飘忽”更加重了这份茫远感，不定感。下句中将“剪烛”与思念相融，既有对原诗的顺承，也有构思的进步。“剪烛”不再是原诗中的深夜秉烛长谈，而化为了剪也又生，理也还乱的思念。情感的凄苦，绵长之意也更进一步。</p><p>​    末节笔调陡转，未言“苦”而写以“乐”，但情感却更加深厚，更加耐人寻味。“好在还有记忆中西窗的烛光”，比起原诗，作者不再憧憬未来，转而追忆美好的过去。西窗的烛光，亲切而又温馨，她笑眼盈盈，容貌依稀当年。“我”追忆的不是卿卿我我的缠绵，而是烛下二人世界中毫无隔阂的夜谈，这恰恰更能表现夫妻二人的伉俪情深。这一情景、这一刻摇曳在手持家书的我面前，正如苏轼的“夜来幽梦忽还乡”，似在眼前，又恍如隔世。巴蜀今夜的追忆，使全诗的感情之隽永、之浓重上开到一个新的高度，余音袅袅。</p><p>​    本诗抒写既有现实，也有回忆；既有现实，也有联想。多用比喻，比拟，用词贴切出神。</p><p>​    纵观全诗，相对原诗而言，既有忠于原作的真实性，又有其独到的创新性。作者充分发挥新诗的优势，将原诗中的情感在原有基础上增加了新的宽度，更加厚重。若将原诗比作思念的清清溪流，则可以说本作，便是溪流所汇成的一潭碧湖。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《红楼梦》随笔（六十一 - 八十）</title>
      <link href="/2022/02/01/hong-lou-meng-sui-bi-1/"/>
      <url>/2022/02/01/hong-lou-meng-sui-bi-1/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><h3 id="六十一-六十三：从司棋看生命存在的重要性"><a href="#六十一-六十三：从司棋看生命存在的重要性" class="headerlink" title="六十一 - 六十三：从司棋看生命存在的重要性"></a>六十一 - 六十三：从司棋看生命存在的重要性</h3><p>​    生命，应该找到自己存在的重要性。</p><p>​    “赌气回来，便添了一篇话，告诉了司棋。司棋听了，不免心头起火。”其实司棋的愤怒不是因为没有吃到鸡蛋，而是因为没有感到生命被重视。前文小警卫的表现，也不是因为没有吃到果子，也是因为感到生命没有被重视。</p><p>​    宝玉是一直受宠爱的，他会觉得别人对他的爱或恨不是最重要的东西，他回来做自己就好了。但是一般人不是那么容易，因为社会总是充满各种委屈，都觉得自己的存在被忽略了。其实司棋的命运也是比较悲惨的，她有一个爱人，但一年也许只能见一次面，也没有机会去安排未来的婚姻。她曾经与他在大观园私会，后来被抓到了，但最悲惨的是这位爱人第二天就跑了。中国古代的大部分女性对于爱情都别无选择，作为丫头的司棋更是如此。所以如果宝玉身上发生这件事，他会说“没有就算了”，可是司棋不同，她愤怒的不单单是鸡蛋，而是作为一个丫头生命不被重视的绝望。</p><p>​    “凡箱柜所有的菜蔬，只管丢出来喂狗，大家赚不成。”其实在人找不到自我，找不到生命存在意义的时候，他会走向毁灭性的道路。我们经常看到一些小孩为了引起父母注意，会去摔砸身边的东西，有时更会自我伤害。有些宠物也是一样，他们需要的不是物质，是精神上的温暖，是生命的重视。</p><h3 id="六十四-六十六：洁净与肮脏：谈功利与对个体生命的关怀"><a href="#六十四-六十六：洁净与肮脏：谈功利与对个体生命的关怀" class="headerlink" title="六十四 - 六十六：洁净与肮脏：谈功利与对个体生命的关怀"></a>六十四 - 六十六：洁净与肮脏：谈功利与对个体生命的关怀</h3><p>​    “姐姐不知道，我不是没眼色，细想和尚们脏，恐怕气味熏了姐姐们。”</p><p>​    《红楼梦》开篇就说女人是水做的，男人是泥做的。这是非常反男性的东西。这个反男性并不是一般的性别，而是说男性在一个现实生活里，扮演了一个功利的角色。因为他要权利、要财富，女性一般来讲过去不可能争权利、争财富，而曹雪芹最看不起的就是这种争功名利禄的人，他觉得他们一争功名利禄就脏了。在财富与权利的争夺里，是一种贪婪。男性中间贾珍、贾琏这样的占多数，用五两银子就可以去包养一个女人，他为什么不做？而宝玉绝不会去想这些事情，这就是差别。尤二姐、三姐无权无势，但宝玉会特别疼惜他们，包括气味会不会污秽了，茶杯会不会肮脏了。这个脏是有暗示性的，是说社会中会把人弄脏的东西。</p><p>​    会弄脏尤二姐、尤三姐的，竟然是和尚。曹雪芹并不认为修行一定是洁净的。生命里面没有真正真诚的哀悼，反而变成了一种功利性的东西。其实污秽与洁净并不是固定的，如果对生命有真正的关怀，最污秽之地也是最洁净之地；反之，最洁净之地会变成最污秽之地。</p><p>​    人性对生命的关怀，体现在小事之中。真正可贵的东西，是在点点滴滴的小事件中显现的，而不是用冠冕堂皇的话说出来。冠冕堂皇的话和点滴的关怀形成落差，越是有冠冕堂皇的话的时候，那个生命在日常生活中是对人最没有关心的。</p><h3 id="六十七-六十九：恨望今生情幻灭：剑、梦、情与尤三姐之死"><a href="#六十七-六十九：恨望今生情幻灭：剑、梦、情与尤三姐之死" class="headerlink" title="六十七 - 六十九：恨望今生情幻灭：剑、梦、情与尤三姐之死"></a>六十七 - 六十九：恨望今生情幻灭：剑、梦、情与尤三姐之死</h3><h4 id="鸳鸯剑：信物与心灵"><a href="#鸳鸯剑：信物与心灵" class="headerlink" title="鸳鸯剑：信物与心灵"></a>鸳鸯剑：信物与心灵</h4><p>​    “冷飕飕，明亮亮，两痕秋水。”鸳鸯剑是湘莲的传家之宝，更是他予尤三姐的定情信物。“连忙取来，挂着自己的绣房床上，每日望着剑，自笑终身有靠。”张爱玲在很多的文章中讲到恋物，就是人会眷恋一个物件，并非了不得的物件，但那个人会一直存着，因为这个物件有对自己来说非常重要的记忆。剑是尤三姐一生许诺之人交来的信物，是心灵中，生命中最重要的东西。生命的高贵和优雅，常常因为你有信物这样寄托心灵的东西，而如果没有，必定会导致生命的沉沦与堕落。这种信物可能是非常微小的物品，他对他人没有意义，但对于个体非常重要。而这鸳鸯剑对尤三姐来说就是这样的作用。</p><p>​    但这依然是剑，是冷的，是明的，是秋水。所以也暗示鸳鸯剑既是信物，也是结束生命的杀人利器。</p><h4 id="尤三姐之死与封建男人的不堪"><a href="#尤三姐之死与封建男人的不堪" class="headerlink" title="尤三姐之死与封建男人的不堪"></a>尤三姐之死与封建男人的不堪</h4><p>​    尤二姐与尤三姐都是《红楼梦》中着墨不多的人物，但她们的个性形象非常突出。尤三姐的泼辣、生命的刚烈，敢爱敢恨，客观来看和宝玉是相似的，都是封建的叛逆者，最后的结局（斩断烦恼丝）也都相同。许多人对尤三姐持有批判态度，我不认为是正确的。爱、恨与生命的选择，刚好对比出贾珍、贾琏作为男性的粗鲁与懦弱。尤三姐的死有一种刚烈的艳丽，她无法忍受生命的难堪，不会委曲求全，而是宁为玉碎。这样一位自主的，拥有尊贵生命的女性，落在被男人糟蹋和侮辱的境地，被世俗要求女性贞洁的捆绑下死去，背后揭露的其实是封建男人的不堪。</p><h4 id="入梦、度化、幻灭"><a href="#入梦、度化、幻灭" class="headerlink" title="入梦、度化、幻灭"></a>入梦、度化、幻灭</h4><p>​    真正的深情，是自我的圆满，是自我完成。</p><p>​    尤三姐死后，《红楼梦》又使用了超现实手法，使尤三姐与湘莲再次相见。“以死报此痴情”，尤三姐的死是对自我深情的回报，而不是报答柳湘莲。“前生误被情感，今既耻情而觉，与君两无干涉。”情是空幻的东西，势必会有一个幻灭的结果。爱别离有爱别离的苦，怨憎会有怨憎会的苦，求不得有求不得的苦，终要归于五阴炽之苦。正如《红楼梦》中风月宝鉴，红粉实是骷髅。</p><p>​    所以有“生命原来是一场空幻”，“挚出那股雄剑，将万根烦恼丝一挥而尽，随那道士，不知哪里去了”。</p><p>​    此生缘，无非水月镜花。</p><h3 id="七十-七十三：真正的艺术，是呕心沥血"><a href="#七十-七十三：真正的艺术，是呕心沥血" class="headerlink" title="七十 - 七十三：真正的艺术，是呕心沥血"></a>七十 - 七十三：真正的艺术，是呕心沥血</h3><p>​    “宝玉看了，并不称赞，却滚下泪来。”我们在生命中有一种两难，有时候你看到一个朋友创作了最好的画，写出来最好的音乐，你不一定是赞美，有时候是落泪，你感觉到他的呕心沥血，他在作品里把血都流尽了。</p><p>​    为什么宝玉没有赞美，反而落下泪来？因为他已经读到了黛玉的心事，他知道黛玉要走了。别人没有看出来，别人看到的是诗好。可诗如果暗示的是人亡，我想宝玉绝对不要。宝玉认为真正好的创作是呕心沥血，而不是在职业性的画画、职业性的写诗，而是用生命在创作。其实这里可以看到曹雪芹的美学观。曹雪芹自己写完《红楼梦》，写得一把辛酸泪，大家都觉得这本书好极了，赞美它是伟大的文学。可是曹雪芹如果能死而复生，宁肯没有这样的煎熬。</p><p>​    宝玉与黛玉有前世的缘分，他懂得这首诗是一首安魂曲，是哀悼尤二姐的，也是哀悼她自己。所以宝玉说绝对不可能是宝琴的诗作，她没有经过父母双亡，兄弟姐妹离开这些悲剧，她不会懂这些东西。什么样的个性，呕心沥血之后，便是什么样的艺术。</p><h3 id="七十四-七十五：从宝玉读书到对当代教育的反思"><a href="#七十四-七十五：从宝玉读书到对当代教育的反思" class="headerlink" title="七十四 - 七十五：从宝玉读书到对当代教育的反思"></a>七十四 - 七十五：从宝玉读书到对当代教育的反思</h3><p>​    “心中又自后悔，这些日子只说不提了，偏又丢生，早知该好歹温习些的。”读书至此，不由得哑然失笑。孩子性情本是如此，正如宝玉在贾政回来时竟没有马上问他的功课，所以他就放松了，而现在又开始后悔。如今打算，不过只有《学》《庸》《二论》是带注背得出的。</p><p>​    《大学》《中庸》《论语》，现在仍读来让人感觉受益无穷。可问题是它一旦变成教科书，注解便不在于内容本身，而被肢解为一个个零件的“知识点”，变成所谓的八股文。古文皆是人类伟大的经验和智慧，但问题是如何对待它。如果仅仅为了考试，很多东西就会被扭曲。</p><p>​    “算起《五经》来，因近来作诗，常把《诗经》读些，虽不甚精湛，还可塞责。”宝玉觉得因为很喜欢写诗，所以喜欢诗经，而有些东西他就不喜欢，像《尚书》中多是古代文告和政令，作为十多岁的孩子去读，自是无聊至极。读书和考试是两种事情，自己喜欢的书自然会读，也能很好地应用；而有些书读了没有任何感觉，那些书便是完全为考试而作的。</p><p>​    “更有时文八股一道，因平素深恶此道。”考试成了读书的唯一目的，便是教育的最大失败。当代的教育考试其实与八股文的时代并没有多大进步，因为试题与标准都是死的，有甚者“设坑”“抠字眼”，这样的考试根本不存在任何思考。</p><p>​    “原非圣贤之制撰，焉能阐发圣贤之微奥，不过是后人饵名钓禄之阶。”《大学》《中庸》《论语》的创作不是为了考试，而是为了做人，这样的思想绝不只是为了考试，而是紧紧关联着生命、生活之中的。</p><h3 id="七十九-八十：假作真时真亦假：众生行走，红楼的真正结局"><a href="#七十九-八十：假作真时真亦假：众生行走，红楼的真正结局" class="headerlink" title="七十九 - 八十：假作真时真亦假：众生行走，红楼的真正结局"></a>七十九 - 八十：假作真时真亦假：众生行走，红楼的真正结局</h3><p>​    第八十回，是曹雪芹先生执笔的最后一回。</p><p>​    我经常认为，第八十回才是红楼的真正结局。在后四十非曹雪芹执笔的回目中，我们会看到黛玉的死，宝钗嫁与宝玉，宝玉的出家。或许这更像是传统意义的“结局”，但依曹雪芹先生来看，未必会这样写，也未必如此结局。</p><p>​    其实，红楼的结局，便在于此。</p><p>​    王一贴，江湖术士一样的人，面对宝玉的问询胡诌妒妇汤的人，根本就是一个江湖骗子。但他的话看似荒谬无章，却使因大观园抄检，司琪被逐，晴雯病死，迎春出嫁等诸事烦扰得病了一百多天的宝玉真正笑了出来。王一贴就像红楼前处所写的癞头和尚、跛脚道士，介于知道和不知道，领悟与不领悟之间，表面看疯癫痴傻，却聪明到极点。众生行走的他们混迹人间，偶然的三言两语或就使我们豁然开朗，也许生命中真正的领悟便在于众生行走之中。</p><p>​    《红楼梦》是一本没有完成的书，它的结局没有完成或许是偶然，但可能更多的是一种必然。或许，这种未完成正体现了一种“留白”的东方美学。王一贴作为红楼中出现的最后一个人物，或许他的故事正是曹雪芹所经历的经历，他的话语便是曹雪芹最不像领悟的领悟。或许，我们能够看到如王一贴般的曹雪芹，坐在村口，糊着风筝，笑看众生。</p><h3 id="跋"><a href="#跋" class="headerlink" title="跋"></a>跋</h3><p>​    《红楼梦》，不仅仅是一本书。</p><p>​    经学家看见《易》，道学家看见淫，才子看见缠绵，革命家看见排满，流言家看见宫闱秘事……</p><p>​    我们不仅在读《红楼》，也在读自己的一生。曹雪芹带我们见证了各种不同形式的生命，感悟了诸多世事的道理。</p><p>​    《红楼》读久了，你会发现自己也在《红楼》中，扮演不同的角色，有着不同的性格，过着不同的生活。《红楼》的生活琐事与众生相，是比情节更加珍贵的。</p><p>​    我是第一次读《红楼》，手书至此，笔尖却有一分难言与不舍。其实每个人都像在书中一样，有着自己的角色，背负自己的宿命。《红楼》，能包容一切人。</p><p>​    《红楼梦》，处处皆可领悟。</p><p>​    以此作结。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《鸿门宴》奇解</title>
      <link href="/2022/01/27/hong-men-yan/"/>
      <url>/2022/01/27/hong-men-yan/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）<br>  进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><h4 id="一、刘邦：帝王之道，在于变通与隐忍"><a href="#一、刘邦：帝王之道，在于变通与隐忍" class="headerlink" title="一、刘邦：帝王之道，在于变通与隐忍"></a>一、刘邦：帝王之道，在于变通与隐忍</h4><p>​    “沛公当真打算背叛项羽吗？”张良问刘邦。这句话问的至关重要，它决定张良的态度，进一步决定刘邦的生死。认账，相等于坐实罪名；撒谎，将失去张良信任。</p><p>​    “确实有个小王八蛋给我出了馊主意，说只要把诸侯挡在关外，我就能在秦地称王。”一句话，使张良松了一口气。误听谗言，顶多是糊涂虫，比处心积虑要谋反的好。最重要的，这是实情。</p><p>​    “君与项伯，谁的年纪大？”“项伯年长。”“那他就是我哥。”这句话是说给张良听的。意思也很清楚。我和你张良是兄弟，你的兄长也是我哥。而项伯也很快被刘邦忽悠走。“查清吏民户籍，封藏库府财物，是等待项将军接收，至于把守函谷关，是为了防贼，哪敢背叛呢？”一席话，大言不惭。不错，一文不取，还军霸上，都是事实，但其真正目的，只有他和张良才心知肚明。</p><p>​    宴上故事也很简单。刘邦借口上厕所溜之大吉，留下张良继续做公关。樊哙说：“大行不顾细谨，大礼不辞小让。我们这块鱼肉都要被切碎了，告什么辞！”刘邦也深以为然，一路小跑回到了军营，鸿门宴就此落幕。</p><p>​    然而，刘邦后来还是起了兵。所以人们称项羽为英雄，而不是刘邦。</p><p>​    他是帝王。</p><h4 id="二、项羽：权欲与义气，杀还是不杀？"><a href="#二、项羽：权欲与义气，杀还是不杀？" class="headerlink" title="二、项羽：权欲与义气，杀还是不杀？"></a>二、项羽：权欲与义气，杀还是不杀？</h4><p>​    “君王为之不忍。”“不忍”，明明之前约定杀刘邦，临事怎么不忍下手？</p><p>​    项羽，六国诸侯随军。如果项羽贸然杀死如此谦虚有礼，又有破秦大功之人，汉十万大军顽抗到底不说，六国诸侯也会责其反复无常，背信弃义。“欲诛有功之人，此亡秦之续耳。”</p><p>​    更重要的是，比起权欲，项羽更看重的是义气。重义气富感情的他，与刘邦并肩作战多年，不但大义上不能杀，感情上也不忍。</p><p>​    不杀刘邦，正如项羽“不肯过江东”。也许，对他来说，王位与天下本不是最终的目标，他只想做一位英雄，英武豪雄痛快一生，退出战场时，有一个精彩的谢幕。</p><p>​    乌江之前，他决定战死。</p><p>​    视死如归的人是不可抵挡的。身负重伤的项羽仍让敌人闻风丧胆。汉军将项羽团团围定，却没人敢近前。此时的项羽又笑了。</p><p>​    “听说刘邦赏千金，封万户买我的人头，就送个人情给你吧。”说完，他一剑砍下了自己的头颅。汉军涌上前去，争相践踏，拼死争夺。最终五个人瓜分了他的尸体，分了那块土地。</p><p>​    这是时代的终结。动物界经常有代表英雄气质的虎在草原孤独地死去，而一群粗鄙的狼一拥而上，每一只都扯下一块皮骨叼在嘴里。而在不久前，他们根本就不敢看那只虎的眼睛。</p><p>​    英雄或将被权欲埋没？我们不知道。</p><p>​    而这群狼的首领，就是刘邦。</p><p>​    “乌江耻学鸿门遁，亭长无劳劝渡河。”</p><h4 id="三、范增与小子孰应为亚父？（搁置）"><a href="#三、范增与小子孰应为亚父？（搁置）" class="headerlink" title="三、范增与小子孰应为亚父？（搁置）"></a>三、范增与小子孰应为亚父？（搁置）</h4><h4 id="四、樊哙：鲁莽中的智慧"><a href="#四、樊哙：鲁莽中的智慧" class="headerlink" title="四、樊哙：鲁莽中的智慧"></a>四、樊哙：鲁莽中的智慧</h4><p>​    “来者何人？”——“刘邦的驾驶员和警卫员。”——“壮士，赐酒！”</p><p>​    一餐饭，对刘邦来说，并不怎么好吃。不好吃的原因，在于范增。</p><p>​    范增极力主张杀死刘邦。这样有雄心大志的人，如何能不防？可这是范增的想法，不是项羽的。三举玉玦，项庄舞剑，都没能杀死刘邦。张良坐不住了，他离开大帐来找樊哙。“情况不好。项庄舞剑，意在沛公。”</p><p>​    “俺愿与沛公共生死。”于是樊哙强行闯关，进入帐中对项羽怒目相向，头发直立，眼眶几乎爆裂。这是真正的“怒发冲冠”“目眦欲裂”。于是就有了开头的一幕。</p><p>​    “真是个壮士！还能喝一杯吗？”“臣死都不怕，酒算什么！”樊哙抬起头，怒斥项羽：</p><p>​    “秦王有虎狼之心，刑律唯恐不酷，才众叛亲离。现在沛公劳苦功高忠心耿耿，你却听信谗言欲诛有功之人，岂非亡秦之续！”</p><p>​    项羽哑口无言。樊哙一席话看似鲁莽，实则充满智慧。首先，剑拔弩张之际，他果断抓住讲理机会，冷静驳斥，巧妙处理了自身的弱势。第二，樊哙斥责有道理，有气势，理直就气壮，气壮就让人觉得理直。第三，他抓住了项羽本身性格的特点。之前分析过，项羽作为“英雄”而不是“帝王”，他最欣赏、最追求的是豪杰的慷慨、壮烈、豪迈。樊哙坐在地上拔出剑直接在盾牌上切猪腿，边切边吃，在场之人都目瞪口呆，只有项羽大为欣赏。这无疑是其性格的重要体现。正因如此，樊哙知道项羽必定不会因一席话而恼羞成怒杀了他们一行人，反而为刘邦的生奠定胜局。第四，陈词反问，反客为主。谁掌握发问权，谁掌握主动权。反问是语言艺术的重要部分，主动反问，对方必定只能被动作答，鸿门宴的主线就此掌握在了刘邦一方。</p><p>​    樊哙，于鸿门宴中，应是不亚于张良的重要功臣。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一清如水，孰与话轻柔——话说晴雯</title>
      <link href="/2022/01/23/hua-shuo-qing-wen/"/>
      <url>/2022/01/23/hua-shuo-qing-wen/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）<br>  进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><blockquote><p>“霁月难逢，彩云易散。心比天高，身为下贱。风流灵巧招人怨。寿夭多因毁谤生，多情公子空牵念。”</p><p>​    ——《金陵十二钗又副册》</p></blockquote><h4 id="风吹过，落雪无痕"><a href="#风吹过，落雪无痕" class="headerlink" title="风吹过，落雪无痕"></a>风吹过，落雪无痕</h4><blockquote><ul><li>第五十一回<ul><li>宝玉与晴雯都是世俗的叛逆者，奴婢非奴婢，主人非主人。</li><li>人性秩序不是世俗秩序。</li></ul></li></ul></blockquote><p>​    那个大雪寒冷的冬夜，你受风寒而疾，围于熏笼取暖。一旁为他铺床的麝月请你帮忙，只因你身量高，方便放下镜套，划上插销。你偏要抱怨“才坐暖和了，你就来闹”。是夜，你又不管不顾，不添衣服下了熏笼，要去吓唬为宝玉斟茶的麝月。结果一走出去，风“侵肌透骨”，本就外感风寒的你手冷如冰。终是他为心不忍，亲手放下穿衣镜的套子，划上上面的插销。面对你冰冷的双手和发烫的面庞，他更是心疼要死，借口掖被叫你钻进被窝。那个寒夜，你一定还记得被窝里的温暖依靠吧。</p><h4 id="宁为玉碎，心比天高"><a href="#宁为玉碎，心比天高" class="headerlink" title="宁为玉碎，心比天高"></a>宁为玉碎，心比天高</h4><blockquote><ul><li>第三十一回<ul><li>红颜非祸水。</li><li>撕裂，是人生的呐喊，是对伪善的嘲笑。</li></ul></li></ul></blockquote><p>​    “你就拿了扇子来我撕。”面对他对摔扇的埋怨，你偏要横眉冷笑。“嫌我们就打发了我们，再挑好的使。”和好后他说扇子你爱撕着玩也可以，不要生气时出气。你却高兴至极，撕完一把，又撕一把。撕扇博美人一笑，描绘的便是张扬赌气，桀骜不驯的你吧。</p><h4 id="一清如水，病补雀金裘"><a href="#一清如水，病补雀金裘" class="headerlink" title="一清如水，病补雀金裘"></a>一清如水，病补雀金裘</h4><blockquote><ul><li>第五十二回</li></ul></blockquote><p>​    “没那个福气穿就罢了，这会子又着急。”说着，他手中破了洞的雀金裘便被你夺去。他还在唉声叹气，你骂着，心却比任何人都热。重病之中，你织补到天明。界线分成经纬，破洞早已不见踪影。而你，却耗尽心血，昏倒在床。许多人说只有袭人一直尽心尽力照顾宝玉，你只是多余。但，唯有他知道，你对他，也是一清如水。</p><h4 id="孰与话轻柔？"><a href="#孰与话轻柔？" class="headerlink" title="孰与话轻柔？"></a>孰与话轻柔？</h4><blockquote><ul><li>第七十七、七十八回<ul><li>人与人最深情感最终是身体一部分的交代。</li><li>爱，是担当对方曾为你承担的东西。</li></ul></li></ul></blockquote><p>​    山野，风起沙逐。</p><p>​    “值得吗？”——“值得。”你微微一笑，从水墨烟柳中走来，眼波里尽是过往。</p><p>​    “草民晴雯，无籍。”芦席之上，你遗世独立，周围尽是冷清。单薄身影只如拉满线的风筝，飘摇，随时会线断飞去。“晴雯，晴雯……”床榻边是他的呼咽，深渊中他拉住你颤巍的手，朦胧沾湿了他的泪眼。“我只当今生不得见你了。”一句未完，便已凝噎。</p><p>​    一生缘分结为凤指，一次别离换袄一生。指甲与衣服的交换，是一清如水的深情。昔日，你为他品饭；今夕，他为你尝茶。抛残绣线，银笺彩缕谁裁？你偏要说：金裘着他身，错在我，奸在我。病中补衣情谊一往而深，你也一如初见，问心无愧，宁死不屈。</p><p>​    一清如水，孰与话轻柔。纵为又副册首，终有“心比天高，身为下贱”悲惨；纵有花容冠才，终脱不了“寿夭多因毁谤生，多情公子空牵念”无常。然，初心不改。你依旧是撕扇博一笑的晴雯，依旧是病补雀金裘的晴雯，依旧是留下芙蓉诔的晴雯，依旧是天生傲骨，至死不服。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红楼空一梦（二）</title>
      <link href="/2022/01/18/hong-lou-kong-yi-meng-2/"/>
      <url>/2022/01/18/hong-lou-kong-yi-meng-2/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）<br>  进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><p>还是要提那句话，园大观，人微尘。</p><p>“若是微尘众实有者，佛则不说是微尘众，所以者何？佛说微尘众，则非微尘众，是名微尘众。”</p><p>红楼一书，绘成四百余人物。复次读红楼，不再关注几个主角，转而关心一些小人物。</p><p>贾宝玉初入太虚幻境，最早翻开的，也不是首善的十二金钗正册，而是又副册。又副册，是丫头们的命运。从笔墨而看，小人物与主角，曹雪芹皆是同样用心。</p><p>“以三千大千世界，碎为微尘，于意云何？ 是微尘众，宁为多不？”静观来来去去的众生，各有各的因果，各有各的冤业。三千大千世界，碎为微尘。眼前的人、物、事，花鸟虫石山川江海，这些“微尘”，终要于一日间灰飞烟灭吧。</p><p>曾在熙熙攘攘的街市众生行走，也曾独身奔行雨夜状如疯癫。街市众生，一如雨夜星辰，大大小小，远远近近。如是沙等恒河，于意云何？</p><p>然而佛说：微尘众，即非微尘众，是名微尘众。所以连那恒河沙、夜星辰也只是幻象吗？如来所说三千大千世界，即非世界，是名世界。 微尘为空，既碎为微尘，世界也是空罢。永恒的实质并不存在，物质世界终要灭掉的。由此也有：若世界实有，即是一合相；如来说一合相，即非一合相，是名一合相。</p><p>我们有许多“憎”与“爱”，总想救赎，想离弃，想牵挂，不惊不怖不畏之人，甚为希有。然，想到碎为微尘的众生，不由啼笑皆非。</p><p>于阿耨多罗三藐三菩提‎‎，‎‎乃至‎‎无有少法可得，是名阿耨多罗三藐三菩提。空，方可大彻大悟。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红楼空一梦（一）</title>
      <link href="/2022/01/18/hong-lou-kong-yi-meng-1/"/>
      <url>/2022/01/18/hong-lou-kong-yi-meng-1/</url>
      
        <content type="html"><![CDATA[<ul><li>本文除图片外，放弃采用 CC BY-NC-SA 4.0（<a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>）<br>  进行许可。Copyright © 2022 All Rights Reserved. 保留所有权利。</li></ul><blockquote><p>“他只是告诉你，在所有的生命中，权力、财富、爱情，全部是一场空。他要告诉你，知道是空，你还是执著。知道归知道，执著归执著。”——蒋勋</p></blockquote><p>园大观，人微尘。</p><p>观红楼四十回，给我印象最深的，不是刘姥姥与笑剧，而是贾府的奢华。与刘姥姥相比，更可怜可悲的，是贾府。刘姥姥，这个活不下去的老太太，贫困，低微，但她的到来忽然让贾府的每一个人都感觉到一种生命力。刘姥姥在大观园中的生活，给在贾府中的人极大的生活趣味，这也许是他们最快乐的日子。</p><p>刘姥姥的贫穷只是物质的匮乏，而贾府的贫穷则是精神上的。人有时要花很多钱去买物质，但其实精神上的贫穷更加可怕。刘姥姥无疑是一个丑角，但她身上总有些达官贵族没有的东西，所以贾府之人反而更加向往乡下的生活。</p><p>刘姥姥对贾府的茄子很吃惊，一道茄鲞，普通茄子要用鸡汤熬，再经晒干等复杂的工序，虽用料十分豪华，却失去了原本的味道。现在的我们不会用豪华的食材，却有非常豪华的调味料。酱油、料酒、味精、咖喱……我们用调味品调出了最浓烈的味道，却再也没有本色与原味，没有了初心，没有了“色即是空，空即是色”的感悟。</p><p>我们常常把生命里最真的当成最假的，最假的当成最真的。权力、财富、情爱，执迷不悟之时都是真的，经历过可能都是假的。红楼是一本没有结局的书，它其实告诉我们，结局可能本就是假的，是空的，我们永远不知道生命接下来的事情。小说未完，时间未完，人生未完。或许，唯本心为真。</p><p>红楼，是可以当作佛经读的。</p>]]></content>
      
      
      <categories>
          
          <category> Literature </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Essay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】Tarjan SCC</title>
      <link href="/2019/11/14/scc/"/>
      <url>/2019/11/14/scc/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-08-02 16:55:56 * @LastEditTime: 2019-11-14 09:44:57 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">1000005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//定理：一个SCC从其中任何一个点出发，都至少有一条路径能绕回自己</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span>                          <span class="token comment">// 强连通分量个数</span><span class="token keyword">int</span> low<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">;</span>  <span class="token comment">// num[]代表dfs对每个点的访问顺序，low[]代表能返回到的最远祖先的num值</span>                                  <span class="token comment">// 相同low值代表一个SCC，初始low值等于num</span>                                  <span class="token comment">// dfn代表进入递归的顺序，用于给num赋值（时间戳）</span><span class="token keyword">int</span> scc<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> top<span class="token punctuation">;</span>  <span class="token comment">// stack[]模拟栈，top是栈顶</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>  <span class="token comment">// u进栈</span>    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dfn<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 未访问过的点，继续dfs</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 处理回退边</span>            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 栈底的点是SCC的祖先，它的low = num</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v弹出栈</span>            scc<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 栈底的点是SCC的祖先</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cnt <span class="token operator">=</span> top <span class="token operator">=</span> dfn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>scc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>scc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Tarjan</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】对顶堆</title>
      <link href="/2019/11/13/dui-ding-dui/"/>
      <url>/2019/11/13/dui-ding-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p><del>对顶堆是一种可以 $O(\log n)$ 维护在线第K小值的数据结构</del> </p><p>其实就是一个大根堆和一个小根堆啦</p><h3 id="Part-2-例题"><a href="#Part-2-例题" class="headerlink" title="Part 2 例题"></a>Part 2 例题</h3><p><a href="https://www.luogu.org/problem/P1168">Luogu P1168 中位数</a></p><p><a href="https://www.luogu.org/problem/P3871">Luogu P3871 [TJOI2010]中位数</a></p><h3 id="Part-3-代码实现"><a href="#Part-3-代码实现" class="headerlink" title="Part 3 代码实现"></a>Part 3 代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-09-08 16:52:21 * @LastEditTime: 2019-11-13 18:11:57 */</span><span class="token keyword">struct</span> <span class="token class-name">Double_Heap</span> <span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> minq<span class="token punctuation">;</span>  <span class="token comment">//存放最小的若干个数的大根堆</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> maxq<span class="token punctuation">;</span>  <span class="token comment">//存放最大的若干个数的小根堆</span>    <span class="token comment">//对顶堆动态维护一段只能添加的序列，寻找其中的第k大值</span>    <span class="token comment">//需要的元素维持在minq的堆顶</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>minq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> maxq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//若n比maxq最小的要大，则交换n与maxq.top()</span>            maxq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> maxq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        minq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//n插入小根堆</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">find_kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//寻找第k大数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>minq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//minq元素过多，插进maxq</span>            maxq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>minq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>minq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//minq元素过少，从maxq插回来</span>            minq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>maxq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            maxq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】Trie树</title>
      <link href="/2019/11/13/trie-shu/"/>
      <url>/2019/11/13/trie-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p>Trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p><p>字典树用边来代表字母，而从根结点到树上某一结点的路径就代表了一个字符串。</p><h3 id="Part-2-代码实现"><a href="#Part-2-代码实现" class="headerlink" title="Part 2 代码实现"></a>Part 2 代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-11-13 15:27:35 * @LastEditTime: 2019-11-13 16:48:08 */</span><span class="token keyword">struct</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> nex<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nex<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                nex<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> nex<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nex<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> nex<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：</p><p>​    <a href="https://zh.wikipedia.org/wiki/Trie">Trie - 维基百科，自由的百科全书</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】Knuth-Morris-Pratt 算法</title>
      <link href="/2019/11/13/kmp/"/>
      <url>/2019/11/13/kmp/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p>模式串匹配，就是给定一个需要处理的文本串（理论上应该很长）和一个需要在文本串中搜索的模式串（理论上长度应该远小于文本串），查询在该文本串中，给出的模式串的出现有无、次数、位置等。 </p><h3 id="Part-2-前缀函数"><a href="#Part-2-前缀函数" class="headerlink" title="Part 2 前缀函数"></a>Part 2 前缀函数</h3><p>给定一个长度为 $n$ 的字符串 ，其<strong>前缀函数</strong>被定义为一个长度为 $n$ 的数组$Next$。其中 $n$ 为既是子串 $s[0…i]$ 的前缀同时也是该子串的后缀的最长真前缀（proper prefix）长度。一个字符串的真前缀是其前缀但不等于该字符串自身。根据定义， $Next[0] = 0$ 。<br>$$<br>Next[i] = \max_{k = 0 \dots i}{k: s[0 \dots k - 1] = s[i - (k - 1) \dots i]}<br>$$</p><h3 id="Part-3-KMP代码实现"><a href="#Part-3-KMP代码实现" class="headerlink" title="Part 3 KMP代码实现"></a>Part 3 KMP代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-11-13 15:27:35 * @LastEditTime: 2019-11-13 16:48:08 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">1000005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> pattern<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Next<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_Next</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> p_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//预处理Next数组</span>    Next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> Next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Next<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>pat<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// s中匹配pat</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> p_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_Next</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> p_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//匹配s和pat的每个字符</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            j <span class="token operator">=</span> Next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//失配，根据Next[]找到j的回溯位置</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//当前位置字符匹配，继续进行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> p_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> p_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//因下标从1开始，所以+1</span>                                                <span class="token comment">//输出匹配的位置</span>            <span class="token comment">/*            if (i - last &gt;= p_len) {  //判断新的匹配和上一个匹配能否分开                cnt++;                last = i;  //last指向上一个匹配的末尾位置            }  //输出匹配个数cnt            */</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//因下标从1开始，所以i加了1</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">kmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// printf("%d\n", kmp(str, pattern));</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】CDQ分治</title>
      <link href="/2019/11/12/cdq-fen-zhi/"/>
      <url>/2019/11/12/cdq-fen-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p>CDQ分治，即基于时间的分治算法，最早被陈丹琦引入国内而得名。</p><h3 id="Part-2-点对问题"><a href="#Part-2-点对问题" class="headerlink" title="Part 2 点对问题"></a>Part 2 点对问题</h3><ol><li><p>找到这个序列的中点</p></li><li><p>将所有点对$(i, j)$ 划分为 3 类</p><p>第一种是$1 ≤ i ≤ mid, 1 ≤ j ≤ mid$ 的点对</p><p>第二种是$1 ≤ i ≤ mid, mid + 1 ≤ j ≤ n$ 的点对</p><p>第三种是$mid + 1 ≤ i ≤ n, mid + 1 ≤ j ≤ n$ 的点对</p></li><li><p>将$(1, n)$ 这个序列拆成两个序列$(1, mid)$ 和$(mid + 1, n)$</p><p>会发现第一类点对和第三类点对都在这两个序列之中，递归的去解决这两类点对</p></li><li><p>想方设法处理一下第二类点对的信息</p></li></ol><h4 id="Part-2-1-偏序问题"><a href="#Part-2-1-偏序问题" class="headerlink" title="Part 2.1 偏序问题"></a>Part 2.1 偏序问题</h4><p>一维偏序直接sort</p><p>二维偏序第1维sort，第2维CDQ分治</p><p>三维偏序第1维sort，第2维CDQ分治，第3维数据结构</p><h5 id="Part-2-1-1-二维偏序"><a href="#Part-2-1-1-二维偏序" class="headerlink" title="Part 2.1.1 二维偏序"></a>Part 2.1.1 二维偏序</h5><p>有 $n$ 个元素，第 $i$ 个元素有 $a_i、b_i$ 两个属性，设 $f(i)$ 表示满足 $a_j \leq a_i$ 且 $b_j \leq b_i$ 的 $j$ 的数量。</p><p>对于 $d \in [0, n)$，求 $f(i) = d$ 的数量</p><p>我们可以把两个元素抽象成一个点 $(a,b)$, 那么我们就是求一个矩形中有多少个点。 </p><p>首先我们可以按照 $x$ 轴 (a的值) 排个序，发现矩形右边的点已经不在答案的贡献里了。那么 $f(i)$ 就是在排序后的数组中找 $1\sim i-1$ 中有几个元素 $b$ 比 $b_i$ 小。</p><p>那么我们直接树状数组即可，时间复杂度 $O(n \log n)$</p><p>当我们插入一个 $b$ 值等于 $x$ 的点时，我们就令树状数组的 $x$ 位置单点 + 1，而查询数据结构里有多少个点小于 $x$ 的操作实际上就是在求前缀和</p><h5 id="Part-2-1-2-三维偏序"><a href="#Part-2-1-2-三维偏序" class="headerlink" title="Part 2.1.2 三维偏序"></a>Part 2.1.2 三维偏序</h5><p>有 $n$ 个元素，第 $i$ 个元素有 $a_i、b_i、c_i$ 三个属性，设 $f(i)$ 表示满足 $a_j \leq a_i$且 $b_j \leq b_i$ 且 $c_j \leq c_i$ 的 $j$ 的数量。</p><p>对于 $d \in [0, n)$，求 $f(i) = d$ 的数量</p>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离线算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】珂朵莉树</title>
      <link href="/2019/11/12/ke-duo-li-shu/"/>
      <url>/2019/11/12/ke-duo-li-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>转载自<a href="https://studyingfather.com/archives/1718">珂朵莉树学习笔记 - Studying Father’s blog</a></strong></p></blockquote><p>珂朵莉树（Chtholly Tree），又名老司机树（Old Driver Tree, ODT），是一种非常暴力的维护序列信息的数据结构。</p><p>其通过维护值相同的连续段来保证效率，在特殊构造的数据下会退化为普通暴力算法。</p><h3 id="Part-1-前置知识"><a href="#Part-1-前置知识" class="headerlink" title="Part 1 前置知识"></a>Part 1 前置知识</h3><p> 熟练掌握 <code>std::set</code> 的用法。 </p><p> 没了？没错。 </p><h3 id="Part-2-一个例子"><a href="#Part-2-一个例子" class="headerlink" title="Part 2 一个例子"></a>Part 2 一个例子</h3><p><a href="http://codeforces.com/problemset/problem/896/C">CF896C</a> 是一个非常经典的模板题，珂朵莉树也正是来源于本题。</p><p>下面是题面部分：</p><p>你需要维护一个序列，并支持如下几种操作：</p><ol><li>给区间 [l,r] 内的所有数字加上 x。</li><li>将区间 [l,r] 内的所有数字赋值为 x。</li><li>求区间 [l,r] 内所有数字中第 x 小的数字（重复数字多次计算）。</li><li>求$ ∑_{i=l}^r a_i^x\mod y $ 的值。</li></ol><p>题目保证数据随机。</p><hr><p>前三个操作都不算太难，使用常规的数据结构都可以圆满解决。</p><p>问题在于第四个操作。为什么常规的数据结构在第四个操作面前无能为力呢？主要在于其并不能方便地分解为两个子区间的问题。</p><p>这时候珂朵莉树就要出场了。</p><h3 id="Part-3-正文"><a href="#Part-3-正文" class="headerlink" title="Part 3 正文"></a>Part 3 正文</h3><h4 id="Part-3-1-节点结构"><a href="#Part-3-1-节点结构" class="headerlink" title="Part 3.1 节点结构"></a>Part 3.1 节点结构</h4><p> 我们这样定义一个珂朵莉树的节点： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>              <span class="token comment">//该节点对应的区间</span>    <span class="token keyword">mutable</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">;</span> <span class="token comment">//mutable 修饰该变量之后，就可以直接在 set 中修改该变量的值，而不是取出元素修改后再重新插入 set</span>    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> Val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        l <span class="token operator">=</span> L<span class="token punctuation">,</span> r <span class="token operator">=</span> R<span class="token punctuation">,</span> val <span class="token operator">=</span> Val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> l <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>l<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 接下来，我们定义一个 <code>set&lt;node&gt; odt</code> 来维护一棵 ODT。 </p><h4 id="Part-3-2-分割区间操作：split"><a href="#Part-3-2-分割区间操作：split" class="headerlink" title="Part 3.2 分割区间操作：split"></a>Part 3.2 分割区间操作：split</h4><p>给出一个区间 [l,r] 和一个位置 pos ，怎么把这个区间分割为 [l,pos−1] 和 [pos,r] 两个区间呢？</p><p>大致流程很简单：</p><ol><li>先在 ODT 中找到含有 pos 位置的区间。</li><li>如果 pos 已经是一个区间的左端点，则无需分割。</li><li>否则我们把原来的区间删除，插入两个新区间。</li></ol><p>详细代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> odt<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//找到左端点不小于 pos 的区间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> odt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it<span class="token operator">-&gt;</span>l <span class="token operator">==</span> pos<span class="token punctuation">)</span>        <span class="token keyword">return</span> it<span class="token punctuation">;</span> <span class="token comment">//pos 是区间左端点时无需分割</span>    it<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token comment">//pos 一定在前一个区间中</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> it<span class="token operator">-&gt;</span>l<span class="token punctuation">,</span> r <span class="token operator">=</span> it<span class="token operator">-&gt;</span>r<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> val <span class="token operator">=</span> it<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除原来的区间</span>    odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token comment">//插入两个新区间</span>                                                <span class="token comment">//这里的返回值是后半段区间对应的迭代器</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 经过这样的分割操作后，容易发现任意两个区间没有相交的部分，这是保证我们接下来操作正确性的前提。 </p><h4 id="Part-3-3-合并区间操作：assign"><a href="#Part-3-3-合并区间操作：assign" class="headerlink" title="Part 3.3 合并区间操作：assign"></a>Part 3.3 合并区间操作：assign</h4><p>如果光分割区间而不合并的话，我们事实上就是对一堆长度为 1 的区间进行操作，珂朵莉树也就会退化为普通暴力算法。</p><p>通过合并操作，我们可以迅速降低珂朵莉树的大小，保证珂朵莉树的效率。</p><p>这里先给出合并操作的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span> itr<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//删除[itl,itr)区间内的所有元素（注意左闭右开区间）</span>    odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将原来的诸多小区间用一个大区间代替</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：在执行 <code>split</code> 操作时，应先 <code>split</code> 右端点，再 <code>split</code> 左端点，否则可能会RE。</strong></p><p>通过两次 <code>split</code> 操作，[l,r] 区间内一定都是整段区间。因此我们可以安全地删除原来的零散区间，用大区间代替。</p><p>经过 <code>assign</code> 操作后，ODT 的规模会下降不少，从而保证 ODT 的实际运行效率。</p><h4 id="Part-3-4-其他操作"><a href="#Part-3-4-其他操作" class="headerlink" title="Part 3.4 其他操作"></a>Part 3.4 其他操作</h4><p>所有区间操作都可以套这样的一个模板：</p><ol><li>先 <code>split</code> 右端点，再 <code>split</code> 左端点，获得两个端点（左闭右开）的迭代器。</li><li>对两个端点之间的所有区间暴力更改。</li></ol><p>代码差不多长这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment">//do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们回到那道模板题。</p><p>首先是区间加一个值：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        it<span class="token operator">-&gt;</span>val <span class="token operator">+=</span> val<span class="token punctuation">;</span> <span class="token comment">//因为 val 被 mutable 关键字修饰，从而可以直接修改 set 里元素的值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 接下来是区间第 k 小，暴力取出区间内所有段排序一遍即可： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">pii</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">-=</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> it<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 然后是区间幂次和，还是暴力，取出区间内所有段累加求和： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">fpow</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意到我们的区间操作都是直接对值相同的连续段进行处理，当段数较多的时候，效率就会降低。</strong></p><p>模板题的完整代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOD</span> <span class="token expression"><span class="token number">1000000007</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">mutable</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">;</span>    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> Val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        l <span class="token operator">=</span> L<span class="token punctuation">,</span> r <span class="token operator">=</span> R<span class="token punctuation">,</span> val <span class="token operator">=</span> Val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> l <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>l<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> odt<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> seed<span class="token punctuation">,</span> vmax<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> seed<span class="token punctuation">;</span>    seed <span class="token operator">=</span> <span class="token punctuation">(</span>seed <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">auto</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> odt<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> odt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it<span class="token operator">-&gt;</span>l <span class="token operator">==</span> pos<span class="token punctuation">)</span>        <span class="token keyword">return</span> it<span class="token punctuation">;</span>    it<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> it<span class="token operator">-&gt;</span>l<span class="token punctuation">,</span> r <span class="token operator">=</span> it<span class="token operator">-&gt;</span>r<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> val <span class="token operator">=</span> it<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span> itr<span class="token punctuation">)</span><span class="token punctuation">;</span>    odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">fpow</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">%=</span> mod<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> x <span class="token operator">%</span> mod<span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">%</span> mod<span class="token punctuation">;</span>        y <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        it<span class="token operator">-&gt;</span>val <span class="token operator">+=</span> val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">kth</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">pii</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">-=</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> it<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> itr <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> itl <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> itl<span class="token punctuation">;</span> it <span class="token operator">!=</span> itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token function">fpow</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>val<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>it<span class="token operator">-&gt;</span>l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> seed <span class="token operator">&gt;&gt;</span> vmax<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> vmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        odt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            x <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> vmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> vmax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token function">assign</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">kth</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Part-4-总结"><a href="#Part-4-总结" class="headerlink" title="Part 4 总结"></a>Part 4 总结</h3><p><strong>在数据中区间赋值操作较多的时候，珂朵莉树的规模较小，实际运行效率较高。但特殊构造的数据往往并不具有这样的性质，导致其退化为普通暴力算法，因此要结合题目性质来考虑是否使用珂朵莉树来解题。</strong></p><p>虽然事实上珂朵莉树在很多题目中都可以用其他常规数据结构代替之，但其简单直接，易于调试的特点让它成为了一个解决不少题目的第二选择。</p>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】扫描线</title>
      <link href="/2019/11/12/sao-miao-xian/"/>
      <url>/2019/11/12/sao-miao-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p><strong>扫描线</strong>一般运用在图形上面，它和它的字面意思十分相似，就是一条线在整个图上扫来扫去，它一般被用来解决图形面积，周长等问题。 </p><h3 id="Part-2-应用"><a href="#Part-2-应用" class="headerlink" title="Part 2 应用"></a>Part 2 应用</h3><h4 id="Atlantis-问题"><a href="#Atlantis-问题" class="headerlink" title="Atlantis 问题"></a>Atlantis 问题</h4><p>在二维坐标系上，给出多个矩形的左下以及右上坐标，求出所有矩形构成的图形的面积。</p><h3 id="Part-3-代码实现"><a href="#Part-3-代码实现" class="headerlink" title="Part 3 代码实现"></a>Part 3 代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">1000005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> lazy<span class="token punctuation">[</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//标记这条线段出现的次数</span><span class="token keyword">long</span> <span class="token keyword">long</span> s<span class="token punctuation">[</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Segment_tree</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span> tree<span class="token punctuation">[</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//线段树</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> y_1<span class="token punctuation">,</span> y_2<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> flag<span class="token punctuation">;</span>  <span class="token comment">//flag表示该边是矩形的左边界或右边界</span><span class="token punctuation">}</span> p<span class="token punctuation">[</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//坐标</span><span class="token keyword">inline</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> ch <span class="token operator">&gt;</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//定义sort比较</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//上传</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>    <span class="token keyword">else</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//建树</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//更新</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> k<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y_1<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y_2<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> y_1 <span class="token operator">&amp;&amp;</span> tree<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> y_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lazy<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> flag<span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&gt;</span> y_1<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> y_1<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span> y_2<span class="token punctuation">)</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&lt;</span> y_2<span class="token punctuation">)</span> <span class="token function">update</span><span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> y_1<span class="token punctuation">)</span><span class="token punctuation">,</span> y_2<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x_1<span class="token punctuation">,</span> y_1<span class="token punctuation">,</span> x_2<span class="token punctuation">,</span> y_2<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x_1 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y_1 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x_2 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y_2 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x_1<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y_1 <span class="token operator">=</span> y_1<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y_2 <span class="token operator">=</span> y_2<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x_2<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>y_1 <span class="token operator">=</span> y_1<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>y_2 <span class="token operator">=</span> y_2<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_1<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//离散化</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//把矩形的边的纵坐标从小到大排序</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//建树</span>    <span class="token function">memset</span><span class="token punctuation">(</span>lazy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>lazy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y_1<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y_2<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y_1<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y_2<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：</p><p>​     <a href="https://oi-wiki.org/geometry/scanning/">扫描线 - OI Wiki</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】可持久化线段树（主席树）</title>
      <link href="/2019/11/10/zhu-xi-shu/"/>
      <url>/2019/11/10/zhu-xi-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-简介"><a href="#Part-1-简介" class="headerlink" title="Part 1 简介"></a>Part 1 简介</h3><p> <strong>可持久化线段树</strong>(在中国国内信息学竞赛社区中又称<strong>总书记树</strong>、<strong>主席树</strong>或<strong>函数式线段树</strong>)是一种<strong>可持久化数据结构</strong>（Persistent data structure）. 由于引入者黄嘉泰姓名的缩写与前中共中央总书记、国家主席胡锦涛相同，因此这种数据结构也可被称为<strong>总书记树</strong>或<strong>主席树</strong>。这种数据结构在普通线段树的基础之上支持查询某个历史版本，同时时间复杂度与线段树是同级，空间复杂度相较而言更高。</p><h3 id="Part-2-应用"><a href="#Part-2-应用" class="headerlink" title="Part 2 应用"></a>Part 2 应用</h3><h4 id="静态区间第k大数值"><a href="#静态区间第k大数值" class="headerlink" title="静态区间第k大数值"></a>静态区间第k大数值</h4><p>这类问题需要求解在一个长度为$ {\displaystyle n}$ 的数列中，第$ {\displaystyle i} $个数为$ {\displaystyle a_{i}}$. 现在给定一些形如 ${\displaystyle (l,r,k)} $的三元组作为询问，设计程序计算数列第$ {\displaystyle l~r} $这些元素中出现次数排在第$ {\displaystyle k} $位的是多少。</p><p>利用可持久化线段树，维护区间$ {\displaystyle (l,r)} $代表区间$ {\displaystyle [l,r]} $中的元素出现了多少次，以此作为原始版本$ {\displaystyle S_{0}}$，此后每次建立一个新版本 ${\displaystyle S_{i}}$，代表去掉原数列中 ${\displaystyle a_{0}~a_{i-1}} $的元素之后建立的线段树，维护目标与上述相同。具体过程可以每次将$ {\displaystyle a_{i}}$的出现次数减一，并保存此时生成的新版本。</p><h3 id="Part-3-代码实现"><a href="#Part-3-代码实现" class="headerlink" title="Part 3 代码实现"></a>Part 3 代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">200005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> tot<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token punctuation">(</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> leftson<span class="token punctuation">[</span><span class="token punctuation">(</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightson<span class="token punctuation">[</span><span class="token punctuation">(</span>MAX_N <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ind<span class="token punctuation">[</span>MAX_N <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token comment">//查找最小下标的匹配值</span><span class="token keyword">int</span> <span class="token function">getid</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ind <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span> ind<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    leftson<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    rightson<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//建树</span><span class="token comment">//节点k代表区间[l,r]</span><span class="token comment">//插入操作</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> dir <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>    leftson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> leftson<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> rightson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> rightson<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//新节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//sum[dir] = t; 如果题目要求sum加t，去掉注释然后去掉上面的+1</span><span class="token keyword">return</span> dir<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//递归底层返回新节点编号，修改父节点的儿子指向</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        leftson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> leftson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        rightson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> rightson<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sum[dir] = sum[lc[dir]] + sum[rightson[dir]];在该题中，不需要这样做，但是很多情况下是要这样更新的</span>    <span class="token keyword">return</span> dir<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//初始的u和v分别代表的是点l-1和点r，l和r分别表示线段树点代表的区间，初始的k表示查询第k小</span><span class="token comment">//查询（历史区间和）</span><span class="token keyword">int</span> <span class="token function">section_ask</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> sum<span class="token punctuation">[</span>leftson<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>leftson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//左儿子的信息</span><span class="token comment">//因为主席树是区间统计好了的，只要减一下即可，无需递归到叶子再处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span> <span class="token comment">//找到目标位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token comment">//说明在左儿子中</span>        <span class="token keyword">return</span> <span class="token function">section_ask</span><span class="token punctuation">(</span>leftson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> leftson<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token comment">//说明在右儿子中</span>        <span class="token keyword">return</span> <span class="token function">section_ask</span><span class="token punctuation">(</span>rightson<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> rightson<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> k <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ind<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> ind<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ind <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ind <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> ind <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    rt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token function">getid</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> rt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ind<span class="token punctuation">[</span><span class="token function">section_ask</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rt<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考：</p><p>​     <a href="%5Bhttps://zh.wikipedia.org/wiki/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%5D(https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91)">可持久化线段树 - 维基百科，自由的百科全书</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-S 2019 冲刺训练计划</title>
      <link href="/2019/10/26/2019-xun-lian-ji-hua/"/>
      <url>/2019/10/26/2019-xun-lian-ji-hua/</url>
      
        <content type="html"><![CDATA[<p>根据 <a href="https://github.com/SFOI-Team/luogu-problem-list">luogu-problem-list 2.0 版本</a> 制作</p><p><del>待修改</del></p><h2 id="Part-1-入门阶段"><a href="#Part-1-入门阶段" class="headerlink" title="Part 1 入门阶段"></a>Part 1 入门阶段</h2><h2 id="Part-2-基础算法"><a href="#Part-2-基础算法" class="headerlink" title="Part 2 基础算法"></a>Part 2 基础算法</h2><blockquote><p>这一部分的内容包含了 OI 中的基础算法，供各位巩固基础。</p><p>当然，这里面也有一些难度比较高的题目。</p></blockquote><h3 id="Part-2-1-模拟"><a href="#Part-2-1-模拟" class="headerlink" title="Part 2.1 模拟"></a>Part 2.1 模拟</h3><blockquote><p>模拟，顾名思义就是题目要求你做什么你就做什么，这样的题目很考验选手的代码组织能力。</p><p>这里不仅仅有非常基础的模拟，也有一些非常复杂的题目。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1003">P1003 铺地毯</a></li><li><a href="https://www.luogu.org/problem/P1067">P1067 多项式输出</a></li><li><a href="https://www.luogu.org/problem/P1328">P1328 生活大爆炸版石头剪刀布</a></li><li><a href="https://www.luogu.org/problem/P1563">P1563 玩具谜题</a></li><li><a href="https://www.luogu.org/problem/P1042">P1042 乒乓球</a></li><li><a href="https://www.luogu.org/problem/P1179">P1179 数字统计</a></li><li><a href="https://www.luogu.org/problem/P2615">P2615 神奇的幻方</a></li><li><a href="https://www.luogu.org/problem/P3952">P3952 时间复杂度</a></li><li><a href="https://www.luogu.org/problem/P2482">P2482 [SDOI2010]猪国杀</a></li><li><a href="https://www.luogu.org/problem/P5380">P5380 [THUPC2019]鸭棋</a></li></ul><h3 id="Part-2-2-排序算法"><a href="#Part-2-2-排序算法" class="headerlink" title="Part 2.2 排序算法"></a>Part 2.2 排序算法</h3><blockquote><p>通过排序，我们可以将数据有序化，这让我们对数据的处理方便了很多。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1177">P1177 【模板】快速排序</a></li><li><a href="https://www.luogu.org/problem/P1059">P1059 明明的随机数</a></li><li><a href="https://www.luogu.org/problem/P1068">P1068 分数线划定</a></li><li><a href="https://www.luogu.org/problem/P1051">P1051 谁拿了最多奖学金</a></li><li><a href="https://www.luogu.org/problem/P1309">P1309 瑞士轮</a></li><li><a href="https://www.luogu.org/problem/P1908">P1908 逆序对</a></li></ul><h3 id="Part-2-3-二分答案"><a href="#Part-2-3-二分答案" class="headerlink" title="Part 2.3 二分答案"></a>Part 2.3 二分答案</h3><blockquote><p>对一个满足单调性质的问题，我们可以采用二分答案的方法来解决。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1024">P1024 一元三次方程求解</a></li><li><a href="https://www.luogu.org/problem/P2678">P2678 跳石头</a></li><li><a href="https://www.luogu.org/problem/P1316">P1316 丢瓶盖</a></li><li><a href="https://www.luogu.org/problem/P1902">P1902 刺杀大使</a></li><li><a href="https://www.luogu.org/problem/P1314">P1314 聪明的质监员</a></li><li><a href="https://www.luogu.org/problem/P1083">P1083 借教室</a></li><li><a href="https://www.luogu.org/problem/P4343">P4343 [SHOI2015]自动刷题机</a></li></ul><h3 id="Part-2-4-分治"><a href="#Part-2-4-分治" class="headerlink" title="Part 2.4 分治"></a>Part 2.4 分治</h3><blockquote><p>分治，即分而治之，将大问题分解为小问题，分别求解，最后合并结果。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1226">P1226 【模板】快速幂||取余运算</a></li><li><a href="https://www.luogu.org/problem/P1010">P1010 幂次方</a></li><li><a href="https://www.luogu.org/problem/P1429">P1429 平面最近点对（加强版）</a></li><li><a href="https://www.luogu.org/problem/P3612">P3612 [USACO17JAN]Secret Cow Code</a></li></ul><h3 id="Part-2-5-贪心"><a href="#Part-2-5-贪心" class="headerlink" title="Part 2.5 贪心"></a>Part 2.5 贪心</h3><blockquote><p>贪心，指的是决策时都采取当前最优解的算法。有的时候，这样做确实可以获得最优解。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1208">P1208 [USACO1.3]Mixing Milk</a></li><li><a href="https://www.luogu.org/problem/P4995">P4995 跳跳！</a></li><li><a href="https://www.luogu.org/problem/P1094">P1094 纪念品分组</a></li><li><a href="https://www.luogu.org/problem/P1199">P1199 三国游戏</a></li><li><a href="https://www.luogu.org/problem/P2672">P2672 推销员</a></li><li><a href="https://www.luogu.org/problem/P1080">P1080 国王游戏</a></li><li><a href="https://www.luogu.org/problem/P2123">P2123 皇后游戏</a></li><li><a href="https://www.luogu.org/problem/P5521">P5521 [yLOI2019]梅深不见冬</a></li></ul><h3 id="Part-2-6-构造"><a href="#Part-2-6-构造" class="headerlink" title="Part 2.6 构造"></a>Part 2.6 构造</h3><blockquote><p>构造题是一种形式灵活多样的题型。正是因为这个特点，使得构造题没有一种通用的方法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3599">P3599 Koishi Loves Construction</a></li><li><a href="https://www.luogu.org/problem/P5441">P5441 【XR-2】伤痕</a></li></ul><h3 id="Part-2-7-高精度"><a href="#Part-2-7-高精度" class="headerlink" title="Part 2.7 高精度"></a>Part 2.7 高精度</h3><blockquote><p>在 C++ 中，long long 都无法表示我们需要的整数时怎么办？那就用高精度吧！</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1601">P1601 A+B Problem（高精）</a></li><li><a href="https://www.luogu.org/problem/P2142">P2142 高精度减法</a></li><li><a href="https://www.luogu.org/problem/P1303">P1303 A*B Problem</a></li><li><a href="https://www.luogu.org/problem/P1480">P1480 A/B Problem</a></li><li><a href="https://www.luogu.org/problem/P1009">P1009 阶乘之和</a></li></ul><h3 id="Part-2-8-前缀和-amp-差分"><a href="#Part-2-8-前缀和-amp-差分" class="headerlink" title="Part 2.8 前缀和 &amp; 差分"></a>Part 2.8 前缀和 &amp; 差分</h3><blockquote><p>前缀和是一种重要的预处理，能大大降低查询的时间复杂度，而差分则是一种和前缀和相对的策略。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3131">P3131 [USACO16JAN]Subsequences Summing to Sevens</a></li><li><a href="https://www.luogu.org/problem/P1387">P1387 最大正方形</a></li><li><a href="https://www.luogu.org/problem/P3397">P3397 地毯</a></li></ul><h2 id="Part-3-搜索"><a href="#Part-3-搜索" class="headerlink" title="Part 3 搜索"></a>Part 3 搜索</h2><blockquote><p>搜索其实就是高级的枚举，很多题目都可以用搜索完成。就算不能，搜索也是骗分神器。</p></blockquote><h3 id="Part-3-1-深度优先搜索"><a href="#Part-3-1-深度优先搜索" class="headerlink" title="Part 3.1 深度优先搜索"></a>Part 3.1 深度优先搜索</h3><blockquote><p>深度优先搜索（DFS），即按照深度优先的顺序搜索的算法。</p><p>深度优先搜索一般使用栈来实现。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1219">P1219 八皇后</a></li><li><a href="https://www.luogu.org/problem/P1019">P1019 单词接龙</a></li><li><a href="https://www.luogu.org/problem/P5194">P5194 [USACO05DEC]Scales</a></li><li><a href="https://www.luogu.org/problem/P5440">P5440 【XR-2】奇迹</a></li><li><a href="https://www.luogu.org/problem/P1378">P1378 油滴扩展</a></li></ul><h3 id="Part-3-2-广度优先搜索"><a href="#Part-3-2-广度优先搜索" class="headerlink" title="Part 3.2 广度优先搜索"></a>Part 3.2 广度优先搜索</h3><blockquote><p>广度优先搜索（BFS），即优先扩展浅层节点，逐渐深入的搜索算法。</p><p>广度优先搜索一般使用队列来实现。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1162">P1162 填涂颜色</a></li><li><a href="https://www.luogu.org/problem/P1443">P1443 马的遍历</a></li><li><a href="https://www.luogu.org/problem/P3956">P3956 棋盘</a></li><li><a href="https://www.luogu.org/problem/P1032">P1032 字串变换</a></li><li><a href="https://www.luogu.org/problem/P1126">P1126 机器人搬重物</a></li></ul><h3 id="Part-3-3-记忆化搜索"><a href="#Part-3-3-记忆化搜索" class="headerlink" title="Part 3.3 记忆化搜索"></a>Part 3.3 记忆化搜索</h3><blockquote><p>通过将已经遍历的状态记录下来，从而减少重复的搜索量，这就是记忆化搜索。</p><p>动态规划的时候，记忆化搜索也是一种高效简洁的实现方式。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1514">P1514 引水入城</a></li><li><a href="https://www.luogu.org/problem/P1535">P1535 游荡的奶牛</a></li><li><a href="https://www.luogu.org/problem/P1434">P1434 [SHOI2002]滑雪</a></li><li><a href="https://www.luogu.org/problem/P3953">P3953 逛公园</a></li></ul><h3 id="Part-3-4-搜索的剪枝"><a href="#Part-3-4-搜索的剪枝" class="headerlink" title="Part 3.4 搜索的剪枝"></a>Part 3.4 搜索的剪枝</h3><blockquote><p>对于一些不必要搜索的部分，我们可以避免访问这些状态，从而提高搜索效率。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1120">P1120 小木棍 ［数据加强版］</a></li><li><a href="https://www.luogu.org/problem/P1312">P1312 Mayan游戏</a></li><li><a href="https://www.luogu.org/problem/P1074">P1074 靶形数独</a></li></ul><h3 id="Part-3-5-双向搜索"><a href="#Part-3-5-双向搜索" class="headerlink" title="Part 3.5 双向搜索"></a>Part 3.5 双向搜索</h3><blockquote><p>在搜索时，如果能从初态和终态出发，同时进行搜索，就可以减小搜索树的规模，提高时间效率。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3067">P3067 [USACO12OPEN]Balanced Cow Subsets</a></li><li><a href="https://www.luogu.org/problem/P4799">P4799 [CEOI2015 Day2]世界冰球锦标赛</a></li><li><a href="https://www.luogu.org/problem/P5195">P5195 [USACO05DEC]Knights of Ni</a></li></ul><h3 id="Part-3-6-A"><a href="#Part-3-6-A" class="headerlink" title="Part 3.6 A*"></a>Part 3.6 A*</h3><blockquote><p>在 BFS 中，如果能设计一个合理的估价函数，就可以更快扩展到最优解。这就是 A*算法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1379">P1379 八数码难题</a></li></ul><h3 id="Part-3-7-IDA"><a href="#Part-3-7-IDA" class="headerlink" title="Part 3.7 IDA*"></a>Part 3.7 IDA*</h3><blockquote><p>像 BFS 那样，每次只扩展一层节点，却采用 DFS 方式来遍历搜索树，这就是迭代加深搜索。</p><p>再加上一个估价函数来减小搜索量，就是 IDA*了。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2324">P2324 [SCOI2005]骑士精神</a></li><li><a href="https://www.luogu.org/problem/P2534">P2534 [AHOI2012]铁盘整理</a></li></ul><h3 id="Part-3-8-DLX"><a href="#Part-3-8-DLX" class="headerlink" title="Part 3.8 DLX"></a>Part 3.8 DLX</h3><blockquote><p>算法 X 是通过回溯法求解精确覆盖问题的算法，而删除列这一操作可以使用舞蹈链加速。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4929">P4929 【模板】舞蹈链（DLX）</a></li><li><a href="https://www.luogu.org/problem/P4205">P4205 [NOI2005]智慧珠游戏</a></li></ul><h2 id="Part-4-动态规划"><a href="#Part-4-动态规划" class="headerlink" title="Part 4 动态规划"></a>Part 4 动态规划</h2><blockquote><p>动态规划是一种重要的思维方法，通过利用已有的子问题信息高效求出当前问题的最优解。</p></blockquote><h3 id="Part-4-1-线性动态规划"><a href="#Part-4-1-线性动态规划" class="headerlink" title="Part 4.1 线性动态规划"></a>Part 4.1 线性动态规划</h3><blockquote><p>线性动态规划，即具有线性阶段划分的动态规划。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1216">P1216 数字三角形</a></li><li><a href="https://www.luogu.org/problem/P1020">P1020 导弹拦截</a></li><li><a href="https://www.luogu.org/problem/P1091">P1091 合唱队形</a></li><li><a href="https://www.luogu.org/problem/P1095">P1095 守望者的逃离</a></li><li><a href="https://www.luogu.org/problem/P1541">P1541 乌龟棋</a></li><li><a href="https://www.luogu.org/problem/P1868">P1868 饥饿的奶牛</a></li><li><a href="https://www.luogu.org/problem/P2679">P2679 子串</a></li><li><a href="https://www.luogu.org/problem/P2501">P2501 [HAOI2006]数字序列</a></li><li><a href="https://www.luogu.org/problem/P3336">P3336 [ZJOI2013]话旧</a></li><li><a href="https://www.luogu.org/problem/P3558">P3558 [POI2013]BAJ-Bytecomputer</a></li><li><a href="https://www.luogu.org/problem/P4158">P4158 [SCOI2009]粉刷匠</a></li><li><a href="https://www.luogu.org/problem/P5301">P5301 [GXOI/GZOI2019]宝牌一大堆</a></li></ul><h3 id="Part-4-2-背包动态规划"><a href="#Part-4-2-背包动态规划" class="headerlink" title="Part 4.2 背包动态规划"></a>Part 4.2 背包动态规划</h3><blockquote><p>背包动态规划是线性动态规划中特殊的一类，NOIP中考到的次数也不少。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1048">P1048 采药</a></li><li><a href="https://www.luogu.org/problem/P1060">P1060 开心的金明</a></li><li><a href="https://www.luogu.org/problem/P1855">P1855 榨取kkksc03</a></li><li><a href="https://www.luogu.org/problem/P5020">P5020 货币系统</a></li><li><a href="https://www.luogu.org/problem/P1757">P1757 通天之分组背包</a></li><li><a href="https://www.luogu.org/problem/P1064">P1064 金明的预算方案</a></li><li><a href="https://www.luogu.org/problem/P2946">P2946 [USACO09MAR]Cow Frisbee Team</a></li><li><a href="https://www.luogu.org/problem/P1156">P1156 垃圾陷阱</a></li><li><a href="https://www.luogu.org/problem/P5322">P5322 [BJOI2019]排兵布阵</a></li><li><a href="https://www.luogu.org/problem/P5289">P5289 [十二省联考2019]皮配</a></li></ul><h3 id="Part-4-3-区间动态规划"><a href="#Part-4-3-区间动态规划" class="headerlink" title="Part 4.3 区间动态规划"></a>Part 4.3 区间动态规划</h3><blockquote><p>区间动态规划一般以区间作为动态规划的阶段。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1880">P1880 [NOI1995]石子合并</a></li><li><a href="https://www.luogu.org/problem/P3146">P3146 [USACO16OPEN]248</a></li><li><a href="https://www.luogu.org/problem/P1063">P1063 能量项链</a></li><li><a href="https://www.luogu.org/problem/P1005">P1005 矩阵取数游戏</a></li><li><a href="https://www.luogu.org/problem/P4170">P4170 [CQOI2007]涂色</a></li><li><a href="https://www.luogu.org/problem/P4302">P4302 [SCOI2003]字符串折叠</a></li><li><a href="https://www.luogu.org/problem/P2466">P2466 [SDOI2008]Sue的小球</a></li></ul><h3 id="Part-4-4-树形动态规划"><a href="#Part-4-4-树形动态规划" class="headerlink" title="Part 4.4 树形动态规划"></a>Part 4.4 树形动态规划</h3><blockquote><p>树形动态规划，即在树上进行的动态规划。</p><p>因为树的递归性质，树形动态规划一般都是递归求解的。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1352">P1352 没有上司的舞会</a></li><li><a href="https://www.luogu.org/problem/P1040">P1040 加分二叉树</a></li><li><a href="https://www.luogu.org/problem/P1122">P1122 最大子树和</a></li><li><a href="https://www.luogu.org/problem/P1270">P1270 “访问”美术馆</a></li><li><a href="https://www.luogu.org/problem/P1273">P1273 有线电视网</a></li><li><a href="https://www.luogu.org/problem/P2014">P2014 选课</a></li><li><a href="https://www.luogu.org/problem/P3177">P3177 [HAOI2015]树上染色</a></li><li><a href="https://www.luogu.org/problem/P4516">P4516 [JSOI2018]潜入行动</a></li></ul><h3 id="Part-4-5-状态压缩动态规划"><a href="#Part-4-5-状态压缩动态规划" class="headerlink" title="Part 4.5 状态压缩动态规划"></a>Part 4.5 状态压缩动态规划</h3><blockquote><p>将一个状态压缩为一个整数（通常为二进制数），就可以在更为方便地进行状态转移的同时，达到节约空间的目的。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2704">P2704 [NOI2001]炮兵阵地</a></li><li><a href="https://www.luogu.org/problem/P1879">P1879 [USACO06NOV]Corn Fields</a></li><li><a href="https://www.luogu.org/problem/P1896">P1896 [SCOI2005]互不侵犯</a></li><li><a href="https://www.luogu.org/problem/P3092">P3092 [USACO13NOV]No Change</a></li><li><a href="https://www.luogu.org/problem/P3694">P3694 邦邦的大合唱站队</a></li><li><a href="https://www.luogu.org/problem/P4925">P4925 [1007]Scarlet的字符串不可能这么可爱</a></li><li><a href="https://www.luogu.org/problem/P2157">P2157 [SDOI2009]学校食堂</a></li><li><a href="https://www.luogu.org/problem/P2167">P2167 [SDOI2009]Bill的挑战</a></li><li><a href="https://www.luogu.org/problem/P2396">P2396 yyy loves Maths VII</a></li><li><a href="https://www.luogu.org/problem/P4363">P4363 [九省联考2018]一双木棋</a></li><li><a href="https://www.luogu.org/problem/P5005">P5005 中国象棋 - 摆上马</a></li><li><a href="https://www.luogu.org/problem/P2150">P2150 [NOI2015]寿司晚宴</a></li></ul><h3 id="Part-4-6-倍增优化动态规划"><a href="#Part-4-6-倍增优化动态规划" class="headerlink" title="Part 4.6 倍增优化动态规划"></a>Part 4.6 倍增优化动态规划</h3><blockquote><p>利用倍增的方式，我们可以将状态转移的效率大大提高。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1613">P1613 跑路</a></li><li><a href="https://www.luogu.org/problem/P1081">P1081 开车旅行</a></li><li><a href="https://www.luogu.org/problem/P5024">P5024 保卫王国</a></li></ul><h3 id="Part-4-7-数据结构优化动态规划"><a href="#Part-4-7-数据结构优化动态规划" class="headerlink" title="Part 4.7 数据结构优化动态规划"></a>Part 4.7 数据结构优化动态规划</h3><blockquote><p>利用数据结构来维护已有信息，也可以达到优化状态转移的目的。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4719">P4719 【模板】动态dp</a></li><li><a href="https://www.luogu.org/problem/P4751">P4751 动态dp【加强版】</a></li><li><a href="https://www.luogu.org/problem/P3287">P3287 [SCOI2014]方伯伯的玉米田</a></li><li><a href="https://www.luogu.org/problem/P2605">P2605 [ZJOI2010]基站选址</a></li></ul><h3 id="Part-4-8-单调队列优化动态规划"><a href="#Part-4-8-单调队列优化动态规划" class="headerlink" title="Part 4.8 单调队列优化动态规划"></a>Part 4.8 单调队列优化动态规划</h3><blockquote><p>借助单调队列，排除不可能的决策，可以起到优化状态转移的效果。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1776">P1776 宝物筛选</a></li><li><a href="https://www.luogu.org/problem/P3089">P3089 [USACO13NOV]Pogo-Cow</a></li><li><a href="https://www.luogu.org/problem/P3572">P3572 [POI2014]PTA-Little Bird</a></li><li><a href="https://www.luogu.org/problem/P3522">P3522 [POI2011]TEM-Temperature</a></li><li><a href="https://www.luogu.org/problem/P4544">P4544 [USACO10NOV]Buying Feed</a></li><li><a href="https://www.luogu.org/problem/P1973">P1973 [NOI2011]Noi嘉年华</a></li><li><a href="https://www.luogu.org/problem/P2569">P2569 [SCOI2010]股票交易</a></li><li><a href="https://www.luogu.org/problem/P4852">P4852 yyf hates choukapai</a></li></ul><h3 id="Part-4-9-斜率优化动态规划"><a href="#Part-4-9-斜率优化动态规划" class="headerlink" title="Part 4.9 斜率优化动态规划"></a>Part 4.9 斜率优化动态规划</h3><blockquote><p>通过用单调队列维护一个凸壳，来达到优化转移的目的。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2900">P2900 [USACO08MAR]Land Acquisition</a></li><li><a href="https://www.luogu.org/problem/P3195">P3195 [HNOI2008]玩具装箱</a></li><li><a href="https://www.luogu.org/problem/P3628">P3628 [APIO2010]特别行动队</a></li><li><a href="https://www.luogu.org/problem/P3648">P3648 [APIO2014]序列分割</a></li><li><a href="https://www.luogu.org/problem/P4027">P4027 [NOI2007]货币兑换</a></li><li><a href="https://www.luogu.org/problem/P4360">P4360 [CEOI2004]锯木厂选址</a></li><li><a href="https://www.luogu.org/problem/P5468">P5468 [NOI2019]回家路线</a></li><li><a href="https://www.luogu.org/problem/P2305">P2305 [NOI2014]购票</a></li></ul><h3 id="Part-4-10-决策单调性优化动态规划"><a href="#Part-4-10-决策单调性优化动态规划" class="headerlink" title="Part 4.10 决策单调性优化动态规划"></a>Part 4.10 决策单调性优化动态规划</h3><blockquote><p>利用决策间的递变规律，也能实现优化状态转移的目的。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3515">P3515 [POI2011]Lightning Conductor</a></li><li><a href="https://www.luogu.org/problem/P4767">P4767 [IOI2000]邮局</a></li><li><a href="https://www.luogu.org/problem/P1912">P1912 [NOI2009]诗人小G</a></li><li><a href="https://www.luogu.org/problem/P1973">P1973 [NOI2011]Noi嘉年华</a></li><li><a href="https://www.luogu.org/problem/P3724">P3724 [AH2017/HNOI2017]大佬</a></li><li><a href="https://www.luogu.org/problem/P5574">P5574 [CmdOI2019]任务分配问题</a></li></ul><h3 id="Part-4-11-数位统计类动态规划"><a href="#Part-4-11-数位统计类动态规划" class="headerlink" title="Part 4.11 数位统计类动态规划"></a>Part 4.11 数位统计类动态规划</h3><blockquote><p>统计一个区间中满足条件的数有多少，就是数位统计类动态规划。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2602">P2602 [ZJOI2010]数字计数</a></li><li><a href="https://www.luogu.org/problem/P3281">P3281 [SCOI2013]数数</a></li><li><a href="https://www.luogu.org/problem/P2518">P2518 [HAOI2010]计数</a></li><li><a href="https://www.luogu.org/problem/P2657">P2657 [SCOI2009]windy数</a></li><li><a href="https://www.luogu.org/problem/P3286">P3286 [SCOI2014]方伯伯的商场之旅</a></li><li><a href="https://www.luogu.org/problem/P4124">P4124 [CQOI2016]手机号码</a></li><li><a href="https://www.luogu.org/problem/P4999">P4999 烦人的数学作业</a></li><li><a href="https://www.luogu.org/problem/P2606">P2606 [ZJOI2010]排列计数</a></li><li><a href="https://www.luogu.org/problem/P4798">P4798 [CEOI2015 Day1]卡尔文球锦标赛</a></li></ul><h3 id="Part-4-12-轮廓线动态规划"><a href="#Part-4-12-轮廓线动态规划" class="headerlink" title="Part 4.12 轮廓线动态规划"></a>Part 4.12 轮廓线动态规划</h3><blockquote><p>轮廓线动态规划（即常说的插头 DP）是一种特殊的状压动态规划，通过以轮廓线为状态来实现状态转移。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5056">P5056 【模板】插头dp</a></li><li><a href="https://www.luogu.org/problem/P2289">P2289 [HNOI2004]邮递员</a></li><li><a href="https://www.luogu.org/problem/P2337">P2337 [SCOI2012]喵星人的入侵</a></li><li><a href="https://www.luogu.org/problem/P5347">P5347 【XR-1】俄罗斯方块</a></li></ul><h2 id="Part-5-字符串"><a href="#Part-5-字符串" class="headerlink" title="Part 5 字符串"></a>Part 5 字符串</h2><blockquote><p>字符串问题有很多自己的特点。</p></blockquote><h3 id="Part-5-1-字符串哈希"><a href="#Part-5-1-字符串哈希" class="headerlink" title="Part 5.1 字符串哈希"></a>Part 5.1 字符串哈希</h3><blockquote><p>字符串哈希通过牺牲很小的准确率，达到快速进行字符串匹配的效果。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3370">P3370 【模板】字符串哈希</a></li><li><a href="https://www.luogu.org/problem/P5270">P5270 无论怎样神树大人都会删库跑路</a></li><li><a href="https://www.luogu.org/problem/P5537">P5537 【XR-3】系统设计</a></li></ul><h3 id="Part-5-2-KMP"><a href="#Part-5-2-KMP" class="headerlink" title="Part 5.2 KMP"></a>Part 5.2 KMP</h3><blockquote><p>KMP 算法可以用来解决模式串匹配问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3375">P3375 【模板】KMP字符串匹配</a></li><li><a href="https://www.luogu.org/problem/P4391">P4391 [BOI2009]Radio Transmission</a></li><li><a href="https://www.luogu.org/problem/P3435">P3435 [POI2006]OKR-Periods of Words</a></li><li><a href="https://www.luogu.org/problem/P4824">P4824 [USACO15FEB]Censoring (Silver)</a></li><li><a href="https://www.luogu.org/problem/P2375">P2375 [NOI2014]动物园</a></li><li><a href="https://www.luogu.org/problem/P3426">P3426 [POI2005]SZA-Template</a></li><li><a href="https://www.luogu.org/problem/P3193">P3193 [HNOI2008]GT考试</a></li></ul><h3 id="Part-5-3-Manacher"><a href="#Part-5-3-Manacher" class="headerlink" title="Part 5.3 Manacher"></a>Part 5.3 Manacher</h3><blockquote><p>Manacher 可以在线性时间内求出一个字符串的最长回文子串。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3805">P3805 【模板】manacher算法</a></li><li><a href="https://www.luogu.org/problem/P4555">P4555 [国家集训队]最长双回文串</a></li><li><a href="https://www.luogu.org/problem/P1659">P1659 [国家集训队]拉拉队排练</a></li></ul><h3 id="Part-5-4-Trie树"><a href="#Part-5-4-Trie树" class="headerlink" title="Part 5.4 Trie树"></a>Part 5.4 Trie树</h3><blockquote><p>Trie树可以像查字典一样把多个字符串组织到一棵树上。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3879">P3879 [TJOI2010]阅读理解</a></li><li><a href="https://www.luogu.org/problem/P2292">P2292 [HNOI2004]L语言</a></li><li><a href="https://www.luogu.org/problem/P2922">P2922 [USACO08DEC]Secret Message</a></li><li><a href="https://www.luogu.org/problem/P3065">P3065 [USACO12DEC]First!</a></li><li><a href="https://www.luogu.org/problem/P3294">P3294 [SCOI2016]背单词</a></li><li><a href="https://www.luogu.org/problem/P4407">P4407 [JSOI2009]电子字典</a></li><li><a href="https://www.luogu.org/problem/P4551">P4551 最长异或路径</a></li><li><a href="https://www.luogu.org/problem/P4683">P4683 [IOI2008]Type Printer</a></li><li><a href="https://www.luogu.org/problem/P3783">P3783 [SDOI2017]天才黑客</a></li></ul><h3 id="Part-5-5-AC自动机"><a href="#Part-5-5-AC自动机" class="headerlink" title="Part 5.5 AC自动机"></a>Part 5.5 AC自动机</h3><blockquote><p>AC自动机可以看成是 KMP 和 Trie 的结合体，用于解决多字符串匹配问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3808">P3808 【模板】AC自动机（简单版）</a></li><li><a href="https://www.luogu.org/problem/P3796">P3796 【模板】AC自动机（加强版）</a></li><li><a href="https://www.luogu.org/problem/P5357">P5357 【模板】AC自动机（二次加强版）</a></li><li><a href="https://www.luogu.org/problem/P3121">P3121 [USACO15FEB]Censoring (Gold)</a></li><li><a href="https://www.luogu.org/problem/P2414">P2414 [NOI2011]阿狸的打字机</a></li><li><a href="https://www.luogu.org/problem/P3966">P3966 [TJOI2013]单词</a></li><li><a href="https://www.luogu.org/problem/P2444">P2444 [POI2000]病毒</a></li><li><a href="https://www.luogu.org/problem/P3311">P3311 [SDOI2014]数数</a></li><li><a href="https://www.luogu.org/problem/P4052">P4052 [JSOI2007]文本生成器</a></li><li><a href="https://www.luogu.org/problem/P5599">P5599 【XR-4】文本编辑器</a></li></ul><h3 id="Part-5-6-回文自动机"><a href="#Part-5-6-回文自动机" class="headerlink" title="Part 5.6 回文自动机"></a>Part 5.6 回文自动机</h3><blockquote><p>回文自动机是解决回文串问题的有力工具。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5496">P5496 【模板】回文自动机（PAM）</a></li><li><a href="https://www.luogu.org/problem/P3649">P3649 [APIO2014]回文串</a></li><li><a href="https://www.luogu.org/problem/solution/P4287">P4287 [SHOI2011]双倍回文</a></li><li><a href="https://www.luogu.org/problem/P4762">P4762 [CERC2014]Virus synthesis</a></li></ul><h3 id="Part-5-7-后缀数组"><a href="#Part-5-7-后缀数组" class="headerlink" title="Part 5.7 后缀数组"></a>Part 5.7 后缀数组</h3><blockquote><p>后缀数组可以解决很多字符串匹配的问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3809">P3809 【模板】后缀排序</a></li><li><a href="https://www.luogu.org/problem/P5353">P5353 【模板】树上后缀排序</a></li><li><a href="https://www.luogu.org/problem/P2336">P2336 [SCOI2012]喵星球上的点名</a></li><li><a href="https://www.luogu.org/problem/P2463">P2463 [SDOI2008]Sandy的卡片</a></li><li><a href="https://www.luogu.org/problem/P2852">P2852 [USACO06DEC]Milk Patterns</a></li><li><a href="https://www.luogu.org/problem/P4051">P4051 [JSOI2007]字符加密</a></li><li><a href="https://www.luogu.org/problem/P1117">P1117 [NOI2016]优秀的拆分</a></li><li><a href="https://www.luogu.org/problem/P2178">P2178 [NOI2015]品酒大会</a></li><li><a href="https://www.luogu.org/problem/P5346">P5346 【XR-1】柯南家族</a></li><li><a href="https://www.luogu.org/problem/P5576">P5576 [CmdOI2019]口头禅</a></li></ul><h3 id="Part-5-8-后缀自动机"><a href="#Part-5-8-后缀自动机" class="headerlink" title="Part 5.8 后缀自动机"></a>Part 5.8 后缀自动机</h3><blockquote><p>后缀自动机是一种处理字符串问题的强大工具。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3804">P3804 【模板】后缀自动机</a></li><li><a href="https://www.luogu.org/problem/P3649">P3649 [APIO2014]回文串</a></li><li><a href="https://www.luogu.org/problem/P3975">P3975 [TJOI2015]弦论</a></li><li><a href="https://www.luogu.org/problem/P4248">P4248 [AHOI2013]差异</a></li><li><a href="https://www.luogu.org/problem/P5341">P5341 [TJOI2019]甲苯先生和大中锋的字符串</a></li><li><a href="https://www.luogu.org/problem/P4770">P4770 [NOI2018]你的名字</a></li><li><a href="https://www.luogu.org/problem/P5284">P5284 [十二省联考2019]字符串问题</a></li><li><a href="https://www.luogu.org/problem/P5319">P5319 [BJOI2019]奥术神杖</a></li></ul><h2 id="Part-6-数学"><a href="#Part-6-数学" class="headerlink" title="Part 6 数学"></a>Part 6 数学</h2><blockquote><p>OI 中的数学知识很多，也有些杂乱。</p></blockquote><h3 id="Part-6-1-位运算"><a href="#Part-6-1-位运算" class="headerlink" title="Part 6.1 位运算"></a>Part 6.1 位运算</h3><blockquote><p>将十进制整数转换为二进制后，有很多按位运算的运算符。</p><p>如果能善于利用位运算的一些性质，往往能达到事半功倍的效果。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5514">P5514 [MtOI2019]永夜的报应</a></li><li><a href="https://www.luogu.org/problem/P5538">P5538 【XR-3】Namid[A]me</a></li><li><a href="https://www.luogu.org/problem/P5539">P5539 【XR-3】Unknown Mother-Goose</a></li><li><a href="https://www.luogu.org/problem/P5523">P5523 [yLOI2019]珍珠</a></li></ul><h3 id="Part-6-2-整除相关"><a href="#Part-6-2-整除相关" class="headerlink" title="Part 6.2 整除相关"></a>Part 6.2 整除相关</h3><blockquote><p>与整除相关的概念有很多，比较常用的有素数，最大公约数和欧拉函数。</p></blockquote><h4 id="Part-6-2-1-素数"><a href="#Part-6-2-1-素数" class="headerlink" title="Part 6.2.1 素数"></a>Part 6.2.1 素数</h4><blockquote><p>素数，指的是除 1 和它本身之外没有其他约数的数。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4718">P4718 【模板】Pollard-Rho算法</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1075">P1075 质因数分解</a></li><li><input disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P2441">P2441 角色属性树</a></li><li><a href="https://www.luogu.org/problem/P5535">P5535 【XR-3】小道消息</a></li></ul><h4 id="Part-6-2-2-最大公约数"><a href="#Part-6-2-2-最大公约数" class="headerlink" title="Part 6.2.2 最大公约数"></a>Part 6.2.2 最大公约数</h4><blockquote><p>如果两个数有一个共同的约数，那么这个约数就被称为公约数。最大公约数就是指这两个数的所有公约数中，最大的一个。</p><p>求解两个数的最大公约数，可以采用欧几里得算法解决。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5435">P5435 【模板】快速 GCD</a></li><li><a href="https://www.luogu.org/problem/P5436">P5436 【XR-2】缘分</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1029">P1029 最大公约数和最小公倍数问题</a></li><li><a href="https://www.luogu.org/problem/P1414">P1414 又是毕业季II</a></li><li><a href="https://www.luogu.org/problem/P2152">P2152 [SDOI2009]SuperGCD</a></li><li><a href="https://www.luogu.org/problem/P1072">P1072 Hankson 的趣味题</a></li></ul><h4 id="Part-6-2-3-欧拉函数"><a href="#Part-6-2-3-欧拉函数" class="headerlink" title="Part 6.2.3 欧拉函数"></a>Part 6.2.3 欧拉函数</h4><blockquote><p>欧拉函数 $ \varphi (x) $ 表示了小于 $ x $ 的数字中，与 $ x $ 互质的数字个数。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2158">P2158 [SDOI2008]仪仗队</a></li><li><a href="https://www.luogu.org/problem/P2568">P2568 GCD</a></li><li><a href="https://www.luogu.org/problem/P2398">P2398 GCD SUM</a></li><li><a href="https://www.luogu.org/problem/P4139">P4139 上帝与集合的正确用法</a></li></ul><h3 id="Part-6-3-同余方程"><a href="#Part-6-3-同余方程" class="headerlink" title="Part 6.3 同余方程"></a>Part 6.3 同余方程</h3><blockquote><p>求解同余方程往往可以引出不少话题。</p></blockquote><h4 id="Part-6-3-1-线性同余方程-amp-乘法逆元"><a href="#Part-6-3-1-线性同余方程-amp-乘法逆元" class="headerlink" title="Part 6.3.1 线性同余方程&amp;乘法逆元"></a>Part 6.3.1 线性同余方程&amp;乘法逆元</h4><blockquote><p>线性同余方程是同余方程中最基础的内容。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P4549">P4549 【模板】裴蜀定理</a></li><li><a href="https://www.luogu.org/problem/P2613">P2613 【模板】有理数取余</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3811">P3811 【模板】乘法逆元</a></li><li><a href="https://www.luogu.org/problem/P5431">P5431 【模板】乘法逆元2</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1082">P1082 同余方程</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3951">P3951 小凯的疑惑</a></li><li><a href="https://www.luogu.org/problem/P1516">P1516 青蛙的约会</a></li></ul><h4 id="Part-6-3-2-中国剩余定理"><a href="#Part-6-3-2-中国剩余定理" class="headerlink" title="Part 6.3.2 中国剩余定理"></a>Part 6.3.2 中国剩余定理</h4><blockquote><p>中国剩余定理可以快速解一元线性同余方程组。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4777">P4777 【模板】扩展中国剩余定理（EXCRT）</a></li><li><a href="https://www.luogu.org/problem/P3868">P3868 [TJOI2009]猜数字</a></li><li><a href="https://www.luogu.org/problem/P2480">P2480 [SDOI2010]古代猪文</a></li><li><a href="https://www.luogu.org/problem/P4774">P4774 [NOI2018]屠龙勇士</a></li><li><a href="https://www.luogu.org/problem/P5345">P5345 【XR-1】快乐肥宅</a></li></ul><h4 id="Part-6-3-3-高次同余方程"><a href="#Part-6-3-3-高次同余方程" class="headerlink" title="Part 6.3.3 高次同余方程"></a>Part 6.3.3 高次同余方程</h4><blockquote><p>BSGS 算法可以高效计算离散对数。</p><p>而高次剩余的求解更加复杂，其中二次剩余作为高次剩余中比较特殊的情况，可以使用 Cipolla 法求解。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4195">P4195 【模板】exBSGS</a></li><li><a href="https://www.luogu.org/problem/P5491">P5491 【模板】二次剩余</a></li><li><a href="https://www.luogu.org/problem/P3306">P3306 [SDOI2013]随机数生成器</a></li></ul><h3 id="Part-6-4-博弈论"><a href="#Part-6-4-博弈论" class="headerlink" title="Part 6.4 博弈论"></a>Part 6.4 博弈论</h3><blockquote><p>博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2197">P2197 【模板】nim游戏</a></li><li><a href="https://www.luogu.org/problem/P1288">P1288 取数游戏II</a></li><li><a href="https://www.luogu.org/problem/P1290">P1290 欧几里德的游戏</a></li><li><a href="https://www.luogu.org/problem/P1247">P1247 取火柴游戏</a></li><li><a href="https://www.luogu.org/problem/P2252">P2252 取石子游戏</a></li></ul><h3 id="Part-6-5-概率与期望"><a href="#Part-6-5-概率与期望" class="headerlink" title="Part 6.5 概率与期望"></a>Part 6.5 概率与期望</h3><blockquote><p>概率和期望是紧密相连的，OI 中往往会出现和概率期望相关的动态规划问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5104">P5104 红包发红包</a></li><li><a href="https://www.luogu.org/problem/P1850">P1850 换教室</a></li><li><a href="https://www.luogu.org/problem/P3830">P3830 [SHOI2012]随机树</a></li><li><a href="https://www.luogu.org/problem/P4564">P4564 [CTSC2018]假面</a></li><li><a href="https://www.luogu.org/problem/P2473">P2473 [SCOI2008]奖励关</a></li><li><a href="https://www.luogu.org/problem/P2221">P2221 [HAOI2012]高速公路</a></li><li><a href="https://www.luogu.org/problem/P3239">P3239 [HNOI2015]亚瑟王</a></li><li><a href="https://www.luogu.org/problem/P3750">P3750 [六省联考2017]分手是祝愿</a></li><li><a href="https://www.luogu.org/problem/P4284">P4284 [SHOI2014]概率充电器</a></li><li><a href="https://www.luogu.org/problem/P5249">P5249 [LnOI2019]加特林轮盘赌</a></li><li><a href="https://www.luogu.org/problem/P2081">P2081 [NOI2012]迷失游乐园</a></li><li><a href="https://www.luogu.org/problem/P3343">P3343 [ZJOI2015]地震后的幻想乡</a></li><li><a href="https://www.luogu.org/problem/P3600">P3600 随机数生成器</a></li><li><a href="https://www.luogu.org/problem/P5326">P5326 [ZJOI2019]开关</a></li></ul><h3 id="Part-6-6-组合数学"><a href="#Part-6-6-组合数学" class="headerlink" title="Part 6.6 组合数学"></a>Part 6.6 组合数学</h3><blockquote><p>组合数学常常与计数问题，概率期望紧密相连。</p></blockquote><h4 id="Part-6-6-1-排列组合"><a href="#Part-6-6-1-排列组合" class="headerlink" title="Part 6.6.1 排列组合"></a>Part 6.6.1 排列组合</h4><blockquote><p>排列组合是组合数学的基础。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3807">P3807 【模板】卢卡斯定理</a></li><li><a href="https://www.luogu.org/problem/P2822">P2822 组合数问题</a></li><li><a href="https://www.luogu.org/problem/P5520">P5520 [yLOI2019]青原樱</a></li><li><a href="https://www.luogu.org/problem/P3197">P3197 [HNOI2008]越狱</a></li><li><a href="https://www.luogu.org/problem/P2290">P2290 [HNOI2004]树的计数</a></li><li><a href="https://www.luogu.org/problem/P4981">P4981 父子</a></li><li><a href="https://www.luogu.org/problem/P4769">P4769 [NOI2018]冒泡排序</a></li><li><a href="https://www.luogu.org/problem/P4931">P4931 情侣？给我烧了！（加强版）</a></li><li><a href="https://www.luogu.org/problem/P5596">P5596 【XR-4】题</a></li><li><a href="https://www.luogu.org/problem/P5598">P5598 【XR-4】混乱度</a></li></ul><h4 id="Part-6-6-2-卡特兰数-amp-斯特林数"><a href="#Part-6-6-2-卡特兰数-amp-斯特林数" class="headerlink" title="Part 6.6.2 卡特兰数&amp;斯特林数"></a>Part 6.6.2 卡特兰数&amp;斯特林数</h4><blockquote><p>卡特兰数和斯特林数是两类常见的组合递推数列。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5395">P5395 【模板】第二类斯特林数·行</a></li><li><a href="https://www.luogu.org/problem/P5396">P5396 【模板】第二类斯特林数·列</a></li><li><a href="https://www.luogu.org/problem/P5408">P5408 【模板】第一类斯特林数·行</a></li><li><a href="https://www.luogu.org/problem/P5409">P5409 【模板】第一类斯特林数·列</a></li><li><a href="https://www.luogu.org/problem/P1655">P1655 小朋友的球</a></li><li><a href="https://www.luogu.org/problem/P2532">P2532 [AHOI2012]树屋阶梯</a></li><li><a href="https://www.luogu.org/problem/P3200">P3200 [HNOI2009]有趣的数列</a></li><li><a href="https://www.luogu.org/problem/P3978">P3978 [TJOI2015]概率论</a></li><li><a href="https://www.luogu.org/problem/P4091">P4091 [HEOI2016/TJOI2016]求和</a></li><li><a href="https://www.luogu.org/problem/P4827">P4827 [国家集训队]Crash 的文明世界</a></li></ul><h4 id="Part-6-6-3-容斥原理"><a href="#Part-6-6-3-容斥原理" class="headerlink" title="Part 6.6.3 容斥原理"></a>Part 6.6.3 容斥原理</h4><blockquote><p>容斥原理常常用于解决集合的计数问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1450">P1450 [HAOI2008]硬币购物</a></li><li><a href="https://www.luogu.org/problem/P3214">P3214 [HNOI2011]卡农</a></li><li><a href="https://www.luogu.org/problem/P3270">P3270 [JLOI2016]成绩比较</a></li><li><a href="https://www.luogu.org/problem/P4336">P4336 [SHOI2016]黑暗前的幻想乡</a></li><li><a href="https://www.luogu.org/problem/P4448">P4448 [AHOI2018初中组]球球的排列</a></li><li><a href="https://www.luogu.org/problem/P4491">P4491 [HAOI2018]染色</a></li><li><a href="https://www.luogu.org/problem/P5339">P5339 [TJOI2019]唱、跳、rap和篮球</a></li><li><a href="https://www.luogu.org/problem/P5400">P5400 [CTS2019]随机立方体</a></li></ul><h3 id="Part-6-7-线性代数"><a href="#Part-6-7-线性代数" class="headerlink" title="Part 6.7 线性代数"></a>Part 6.7 线性代数</h3><blockquote><p>线性代数主要用于解决线性关系问题。</p></blockquote><h4 id="Part-6-7-1-矩阵"><a href="#Part-6-7-1-矩阵" class="headerlink" title="Part 6.7.1 矩阵"></a>Part 6.7.1 矩阵</h4><blockquote><p>利用矩阵优化数列递推，可以实现复杂度从线性到对数级的转变。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3390">P3390 【模板】矩阵快速幂</a></li><li><a href="https://www.luogu.org/problem/P1939">P1939 【模板】矩阵加速（数列）</a></li><li><a href="https://www.luogu.org/problem/P4783">P4783 【模板】矩阵求逆</a></li><li><a href="https://www.luogu.org/problem/P1962">P1962 斐波那契数列</a></li><li><a href="https://www.luogu.org/problem/P1349">P1349 广义斐波那契数列</a></li><li><a href="https://www.luogu.org/problem/P4000">P4000 斐波那契数列</a></li><li><a href="https://www.luogu.org/problem/P3758">P3758 [TJOI2017]可乐</a></li><li><a href="https://www.luogu.org/problem/P4967">P4967 黑暗打击</a></li><li><a href="https://www.luogu.org/problem/P5343">P5343 【XR-1】分块</a></li><li><a href="https://www.luogu.org/problem/P5337">P5337 [TJOI2019]甲苯先生的字符串</a></li><li><a href="https://www.luogu.org/problem/P5303">P5303 [GXOI/GZOI2019]逼死强迫症</a></li></ul><h4 id="Part-6-7-2-高斯消元"><a href="#Part-6-7-2-高斯消元" class="headerlink" title="Part 6.7.2 高斯消元"></a>Part 6.7.2 高斯消元</h4><blockquote><p>高斯消元可以用来求解方程组。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3389">P3389 【模板】高斯消元法</a></li><li><a href="https://www.luogu.org/problem/P4387">P4387 付公主的函数</a></li><li><a href="https://www.luogu.org/problem/P2447">P2447 [SDOI2010]外星千足虫</a></li><li><a href="https://www.luogu.org/problem/P4035">P4035 [JSOI2008]球形空间产生器</a></li><li><a href="https://www.luogu.org/problem/P5516">P5516 [MtOI2019]小铃的烦恼</a></li><li><a href="https://www.luogu.org/problem/P4111">P4111 [HEOI2015]小Z的房间</a></li><li><a href="https://www.luogu.org/problem/P4457">P4457 [BJOI2018]治疗之雨</a></li></ul><h4 id="Part-6-7-3-线性基"><a href="#Part-6-7-3-线性基" class="headerlink" title="Part 6.7.3 线性基"></a>Part 6.7.3 线性基</h4><blockquote><p>线性基可以求解最大异或和的一类问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3812">P3812 【模板】线性基</a></li><li><a href="https://www.luogu.org/problem/P3857">P3857 [TJOI2008]彩灯</a></li><li><a href="https://www.luogu.org/problem/P4570">P4570 [BJWC2011]元素</a></li><li><a href="https://www.luogu.org/problem/P4301">P4301 [CQOI2013]新Nim游戏</a></li><li><a href="https://www.luogu.org/problem/P3292">P3292 [SCOI2016]幸运数字</a></li><li><a href="https://www.luogu.org/problem/P4151">P4151 [WC2011]最大XOR和路径</a></li></ul><h3 id="Part-6-8-多项式"><a href="#Part-6-8-多项式" class="headerlink" title="Part 6.8 多项式"></a>Part 6.8 多项式</h3><blockquote><p>对多项式的运算进行优化，从而能够解决规模更大的问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1919">P1919 【模板】A*B Problem升级版（FFT快速傅里叶）</a></li><li><a href="https://www.luogu.org/problem/P3803">P3803 【模板】多项式乘法（FFT）</a></li><li><a href="https://www.luogu.org/problem/P4238">P4238 【模板】多项式求逆</a></li><li><a href="https://www.luogu.org/problem/P4239">P4239 【模板】多项式求逆（加强版）</a></li><li><a href="https://www.luogu.org/problem/P4245">P4245 【模板】任意模数NTT</a></li><li><a href="https://www.luogu.org/problem/P4512">P4512 【模板】多项式除法</a></li><li><a href="https://www.luogu.org/problem/P4717">P4717 【模板】快速沃尔什变换</a></li><li><a href="https://www.luogu.org/problem/P4721">P4721 【模板】分治 FFT</a></li><li><a href="https://www.luogu.org/problem/P4725">P4725 【模板】多项式对数函数</a></li><li><a href="https://www.luogu.org/problem/P4726">P4726 【模板】多项式指数函数</a></li><li><a href="https://www.luogu.org/problem/P4781">P4781 【模板】拉格朗日插值</a></li><li><a href="https://www.luogu.org/problem/P5050">P5050 【模板】多项式多点求值</a></li><li><a href="https://www.luogu.org/problem/P5158">P5158 【模板】多项式快速插值</a></li><li><a href="https://www.luogu.org/problem/P5205">P5205 【模板】多项式开根</a></li><li><a href="https://www.luogu.org/problem/P5245">P5245 【模板】多项式快速幂</a></li><li><a href="https://www.luogu.org/problem/P5264">P5264 【模板】多项式三角函数</a></li><li><a href="https://www.luogu.org/problem/P5265">P5265 【模板】多项式反三角函数</a></li><li><a href="https://www.luogu.org/problem/P5273">P5273 【模板】多项式幂函数 (加强版)</a></li><li><a href="https://www.luogu.org/problem/P5277">P5277 【模板】多项式开根（加强版）</a></li><li><a href="https://www.luogu.org/problem/P5282">P5282 【模板】快速阶乘算法</a></li><li><a href="https://www.luogu.org/problem/P5373">P5373 【模板】多项式复合函数</a></li><li><a href="https://www.luogu.org/problem/P5383">P5383 【模板】普通多项式转下降幂多项式</a></li><li><a href="https://www.luogu.org/problem/P5393">P5393 【模板】下降幂多项式转普通多项式</a></li><li><a href="https://www.luogu.org/problem/P5394">P5394 【模板】下降幂多项式乘法</a></li><li><a href="https://www.luogu.org/problem/P5494">P5494 【模板】多项式双曲函数</a></li><li><a href="https://www.luogu.org/problem/P3338">P3338 [ZJOI2014]力</a></li><li><a href="https://www.luogu.org/problem/P3723">P3723 [AH2017/HNOI2017]礼物</a></li><li><a href="https://www.luogu.org/problem/P5437">P5437 【XR-2】约定</a></li><li><a href="https://www.luogu.org/problem/P5293">P5293 [HNOI2019]白兔之舞</a></li><li><a href="https://www.luogu.org/problem/P5432">P5432 A/B Problem (加强版)</a></li><li><a href="https://www.luogu.org/problem/P5472">P5472 [NOI2019]斗主地</a></li><li><a href="https://www.luogu.org/problem/P5519">P5519 [MtOI2019]埋骨于弘川</a></li><li><a href="https://www.luogu.org/problem/P5577">P5577 [CmdOI2019]算力训练</a></li></ul><h3 id="Part-6-9-莫比乌斯反演"><a href="#Part-6-9-莫比乌斯反演" class="headerlink" title="Part 6.9 莫比乌斯反演"></a>Part 6.9 莫比乌斯反演</h3><blockquote><p>运用莫比乌斯反演，我们可以将一些函数转化，从而降低计算难度。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3172">P3172 [CQOI2015]选数</a></li><li><a href="https://www.luogu.org/problem/P3455">P3455 [POI2007]ZAP-Queries</a></li><li><a href="https://www.luogu.org/problem/P3327">P3327 [SDOI2015]约数个数和</a></li><li><a href="https://www.luogu.org/problem/P4619">P4619 [SDOI2018]旧试题</a></li><li><a href="https://www.luogu.org/problem/P5518">P5518 [MtOI2019]幽灵乐团</a></li></ul><h3 id="Part-6-10-筛法"><a href="#Part-6-10-筛法" class="headerlink" title="Part 6.10 筛法"></a>Part 6.10 筛法</h3><blockquote><p>利用数列的性质，有多种筛法可以求出我们想要的信息。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3383">P3383 【模板】线性筛素数</a></li><li><a href="https://www.luogu.org/problem/P4213">P4213 【模板】杜教筛（Sum）</a></li><li><a href="https://www.luogu.org/problem/P5325">P5325 【模板】Min_25筛</a></li><li><a href="https://www.luogu.org/problem/P1865">P1865 A % B Problem</a></li><li><a href="https://www.luogu.org/problem/P1621">P1621 集合</a></li><li><a href="https://www.luogu.org/problem/P3768">P3768 简单的数学题</a></li><li><a href="https://www.luogu.org/problem/P5438">P5438 【XR-2】记忆</a></li></ul><h3 id="Part-6-11-线性规划"><a href="#Part-6-11-线性规划" class="headerlink" title="Part 6.11 线性规划"></a>Part 6.11 线性规划</h3><blockquote><p>线性规划是研究线性约束条件下线性目标函数极值问题的方法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3980">P3980 [NOI2008]志愿者招募</a></li><li><a href="https://www.luogu.org/problem/P4232">P4232 无意识之外的捉迷藏</a></li></ul><h3 id="Part-6-12-数值方法"><a href="#Part-6-12-数值方法" class="headerlink" title="Part 6.12 数值方法"></a>Part 6.12 数值方法</h3><blockquote><p>在算法领域，有很多求近似值的数值方法。</p></blockquote><h4 id="Part-6-12-1-三分法"><a href="#Part-6-12-1-三分法" class="headerlink" title="Part 6.12.1 三分法"></a>Part 6.12.1 三分法</h4><blockquote><p>三分法可以求出一个单峰 / 单谷函数的极值。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3382">P3382 【模板】三分法</a></li><li><a href="https://www.luogu.org/problem/P1883">P1883 函数</a></li></ul><h4 id="Part-6-12-2-自适应辛普森法"><a href="#Part-6-12-2-自适应辛普森法" class="headerlink" title="Part 6.12.2 自适应辛普森法"></a>Part 6.12.2 自适应辛普森法</h4><blockquote><p>自适应辛普森法可以高效求出给定函数的数值积分。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4525">P4525 【模板】自适应辛普森法1</a></li><li><a href="https://www.luogu.org/problem/P4526">P4526 【模板】自适应辛普森法2</a></li><li><a href="https://www.luogu.org/problem/P3779">P3779 [SDOI2017]龙与地下城</a></li></ul><h3 id="Part-6-13-置换群"><a href="#Part-6-13-置换群" class="headerlink" title="Part 6.13 置换群"></a>Part 6.13 置换群</h3><blockquote><p>置换群通常用来解决一些涉及“本质不同”的计数问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4980">P4980 【模板】Polya定理</a></li><li><a href="https://www.luogu.org/problem/P1446">P1446 [HNOI2008]Cards</a></li><li><a href="https://www.luogu.org/problem/P2561">P2561 [AHOI2002]黑白瓷砖</a></li><li><a href="https://www.luogu.org/problem/P4128">P4128 [SHOI2006]有色图</a></li><li><a href="https://www.luogu.org/problem/P4727">P4727 [HNOI2009]图的同构记数</a></li></ul><h2 id="Part-7-数据结构"><a href="#Part-7-数据结构" class="headerlink" title="Part 7 数据结构"></a>Part 7 数据结构</h2><blockquote><p>灵活地运用数据结构可以高效地查询并处理需要的信息。</p></blockquote><h3 id="Part-7-1-链表"><a href="#Part-7-1-链表" class="headerlink" title="Part 7.1 链表"></a>Part 7.1 链表</h3><blockquote><p>在一个数列中高效插入一个元素，链表毫无疑问是最好的选择。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1996">P1996 约瑟夫问题</a></li><li><a href="https://www.luogu.org/problem/P1160">P1160 队列安排</a></li></ul><h3 id="Part-7-2-栈"><a href="#Part-7-2-栈" class="headerlink" title="Part 7.2 栈"></a>Part 7.2 栈</h3><blockquote><p>栈，是一种后进先出（FILO）的数据结构。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1449">P1449 后缀表达式</a></li><li><a href="https://www.luogu.org/problem/P1739">P1739 表达式括号匹配</a></li><li><a href="https://www.luogu.org/problem/P1981">P1981 表达式求值</a></li><li><a href="https://www.luogu.org/problem/P1175">P1175 表达式的转换</a></li></ul><h3 id="Part-7-3-队列"><a href="#Part-7-3-队列" class="headerlink" title="Part 7.3 队列"></a>Part 7.3 队列</h3><blockquote><p>队列，是一种先进先出（FIFO）的数据结构。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1540">P1540 机器翻译</a></li></ul><h3 id="Part-7-4-并查集"><a href="#Part-7-4-并查集" class="headerlink" title="Part 7.4 并查集"></a>Part 7.4 并查集</h3><blockquote><p>并查集常用于处理一些不相交集合的合并和查询问题。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1111">P1111 修复公路</a></li><li><a href="https://www.luogu.org/problem/P3958">P3958 奶酪</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1525">P1525 关押罪犯</a></li><li><a href="https://www.luogu.org/problem/P2024">P2024 [NOI2001]食物链</a></li><li><a href="https://www.luogu.org/problem/P1197">P1197 [JSOI2008]星球大战</a></li><li><a href="https://www.luogu.org/problem/P1196">P1196 [NOI2002]银河英雄传说</a></li><li><a href="https://www.luogu.org/problem/P1955">P1955 [NOI2015]程序自动分析</a></li></ul><h3 id="Part-7-5-二叉堆"><a href="#Part-7-5-二叉堆" class="headerlink" title="Part 7.5 二叉堆"></a>Part 7.5 二叉堆</h3><blockquote><p>二叉堆是一棵完全二叉树，堆中某个节点的值总是不大于或不小于其父节点的值。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3378">P3378 【模板】堆</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1090">P1090 合并果子</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1168">P1168 中位数</a></li><li><a href="https://www.luogu.org/problem/P2085">P2085 最小函数值</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P2827">P2827 蚯蚓</a></li></ul><h3 id="Part-7-6-ST表"><a href="#Part-7-6-ST表" class="headerlink" title="Part 7.6 ST表"></a>Part 7.6 ST表</h3><blockquote><p>ST表可以离线查询区间最值。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3865">P3865 【模板】ST表</a></li><li><a href="https://www.luogu.org/problem/P2251">P2251 质量检测</a></li><li><a href="https://www.luogu.org/problem/P1816">P1816 忠诚</a></li><li><a href="https://www.luogu.org/problem/P1198">P1198 [JSOI2008]最大数</a></li><li><a href="https://www.luogu.org/problem/P2880">P2880 [USACO07JAN]Balanced Lineup</a></li><li><a href="https://www.luogu.org/problem/P5012">P5012 水の数列</a></li><li><a href="https://www.luogu.org/problem/P5344">P5344 【XR-1】逛森林</a></li></ul><h3 id="Part-7-7-树状数组"><a href="#Part-7-7-树状数组" class="headerlink" title="Part 7.7 树状数组"></a>Part 7.7 树状数组</h3><blockquote><p>树状数组是一种简洁高效的树形数据结构。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3374">P3374 【模板】树状数组 1</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3368">P3368 【模板】树状数组 2</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P1908">P1908 逆序对</a></li><li><a href="https://www.luogu.org/problem/P1966">P1966 火柴排队</a></li><li><a href="https://www.luogu.org/problem/P1972">P1972 [SDOI2009]HH的项链</a></li><li><a href="https://www.luogu.org/problem/P3586">P3586 [POI2015]LOG</a></li><li><a href="https://www.luogu.org/problem/P4054">P4054 [JSOI2009]计数问题</a></li><li><a href="https://www.luogu.org/problem/P4113">P4113 [HEOI2012]采花</a></li><li><a href="https://www.luogu.org/problem/P3960">P3960 列队</a></li></ul><h3 id="Part-7-8-线段树"><a href="#Part-7-8-线段树" class="headerlink" title="Part 7.8 线段树"></a>Part 7.8 线段树</h3><blockquote><p>线段树的通用性比树状数组更强，可以处理更多涉及区间操作的题目。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3372">P3372 【模板】线段树 1</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3373">P3373 【模板】线段树 2</a></li><li><a href="https://www.luogu.org/problem/P5490">P5490 【模板】扫描线</a></li><li><a href="https://www.luogu.org/problem/P1471">P1471 方差</a></li><li><a href="https://www.luogu.org/problem/P4588">P4588 [TJOI2018]数学计算</a></li><li><a href="https://www.luogu.org/problem/P1502">P1502 窗口的星星</a></li><li><a href="https://www.luogu.org/problem/P2471">P2471 [SCOI2007]降雨量</a></li><li><a href="https://www.luogu.org/problem/P2824">P2824 [HEOI2016/TJOI2016]排序</a></li><li><a href="https://www.luogu.org/problem/P3722">P3722 [AH2017/HNOI2017]影魔</a></li><li><a href="https://www.luogu.org/problem/P4097">P4097 [HEOI2013]Segment</a></li><li><input disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P4198">P4198 楼房重建</a></li><li><a href="https://www.luogu.org/problem/P4513">P4513 小白逛公园</a></li><li><a href="https://www.luogu.org/problem/P4556">P4556 [Vani有约会]雨天的尾巴</a></li><li><a href="https://www.luogu.org/problem/P5324">P5324 [BJOI2019]删数</a></li><li><a href="https://www.luogu.org/problem/P5327">P5327 [ZJOI2019]语言</a></li><li><a href="https://www.luogu.org/problem/P5500">P5500 [LnOI2019]真正的OIer从不女装</a></li></ul><h3 id="Part-7-9-分块"><a href="#Part-7-9-分块" class="headerlink" title="Part 7.9 分块"></a>Part 7.9 分块</h3><blockquote><p>分块是一种非常通用的暴力方法，虽然效率不如线段树和树状数组，但可以解决很多线段树和树状数组处理不了的问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3870">P3870 [TJOI2009]开关</a></li><li><a href="https://www.luogu.org/problem/P3396">P3396 哈希冲突</a></li><li><a href="https://www.luogu.org/problem/P3863">P3863 序列</a></li><li><a href="https://www.luogu.org/problem/P1975">P1975 [国家集训队]排队</a></li><li><a href="https://www.luogu.org/problem/P3710">P3710 方方方的数据结构</a></li><li><a href="https://www.luogu.org/problem/P3992">P3992 [BJOI2017]开车</a></li><li><a href="https://www.luogu.org/problem/P4168">P4168 [Violet]蒲公英</a></li><li><a href="https://www.luogu.org/problem/P4119">P4119 [Ynoi2018]未来日记</a></li></ul><h3 id="Part-7-10-可并堆"><a href="#Part-7-10-可并堆" class="headerlink" title="Part 7.10 可并堆"></a>Part 7.10 可并堆</h3><blockquote><p>可并堆分为左偏树和配对堆两种，它们都具有堆的性质，且可以高效合并。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3377">P3377 【模板】左偏树（可并堆）</a></li><li><a href="https://www.luogu.org/problem/P2713">P2713 罗马游戏</a></li><li><a href="https://www.luogu.org/problem/P1456">P1456 Monkey King</a></li><li><a href="https://www.luogu.org/problem/P1552">P1552 [APIO2012]派遣</a></li><li><a href="https://www.luogu.org/problem/P3261">P3261 [JLOI2015]城池攻占</a></li><li><a href="https://www.luogu.org/problem/P3273">P3273 [SCOI2011]棘手的操作</a></li><li><a href="https://www.luogu.org/problem/P4331">P4331 [BOI2004]Sequence</a></li></ul><h3 id="Part-7-11-主席树"><a href="#Part-7-11-主席树" class="headerlink" title="Part 7.11 主席树"></a>Part 7.11 主席树</h3><blockquote><p>主席树，即可持久化权值线段树。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2468">P2468 [SDOI2010]粟粟的书架</a></li><li><a href="https://www.luogu.org/problem/P3302">P3302 [SDOI2013]森林</a></li><li><a href="https://www.luogu.org/problem/P3168">P3168 [CQOI2015]任务查询系统</a></li><li><a href="https://www.luogu.org/problem/P4559">P4559 [JSOI2018]列队</a></li><li><a href="https://www.luogu.org/problem/P2633">P2633 Count on a tree</a></li><li><a href="https://www.luogu.org/problem/P3293">P3293 [SCOI2016]美味</a></li><li><a href="https://www.luogu.org/problem/P4618">P4618 [SDOI2018]原题识别</a></li></ul><h3 id="Part-7-12-平衡树"><a href="#Part-7-12-平衡树" class="headerlink" title="Part 7.12 平衡树"></a>Part 7.12 平衡树</h3><blockquote><p>二叉搜索树可以用来维护有序序列。</p><p>为了保证查询效率，有多种使二叉搜索树保持平衡的实现方法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3369">P3369 【模板】普通平衡树</a></li><li><a href="https://www.luogu.org/problem/P3391">P3391 【模板】文艺平衡树（Splay）</a></li><li><a href="https://www.luogu.org/problem/P3850">P3850 [TJOI2007]书架</a></li><li><a href="https://www.luogu.org/problem/P4008">P4008 [NOI2003]文本编辑器</a></li><li><a href="https://www.luogu.org/problem/P5338">P5338 [TJOI2019]甲苯先生的滚榜</a></li><li><a href="https://www.luogu.org/problem/P2042">P2042 [NOI2005]维护数列</a></li><li><a href="https://www.luogu.org/problem/P1110">P1110 [ZJOI2007]报表统计</a></li><li><a href="https://www.luogu.org/problem/P3644">P3644 [APIO2015]八邻旁之桥</a></li><li><a href="https://www.luogu.org/problem/P1486">P1486 [NOI2004]郁闷的出纳员</a></li><li><a href="https://www.luogu.org/problem/P2710">P2710 数列</a></li><li><a href="https://www.luogu.org/problem/P3224">P3224 [HNOI2012]永无乡</a></li><li><a href="https://www.luogu.org/problem/P3285">P3285 [SCOI2014]方伯伯的OJ</a></li><li><a href="https://www.luogu.org/problem/P5321">P5321 [BJOI2019]送别</a></li></ul><h3 id="Part-7-13-树链剖分"><a href="#Part-7-13-树链剖分" class="headerlink" title="Part 7.13 树链剖分"></a>Part 7.13 树链剖分</h3><blockquote><p>树链剖分可以将任意一条树上路径划分成若干条连续的链，并用线段树等数据结构高效维护链上信息。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3384">P3384 【模板】树链剖分</a></li><li><a href="https://www.luogu.org/problem/P3313">P3313 [SDOI2014]旅行</a></li><li><a href="https://www.luogu.org/problem/P2590">P2590 [ZJOI2008]树的统计</a></li><li><a href="https://www.luogu.org/problem/P1505">P1505 [国家集训队]旅游</a></li><li><a href="https://www.luogu.org/problem/P2486">P2486 [SDOI2011]染色</a></li><li><a href="https://www.luogu.org/problem/P2146">P2146 [NOI2015]软件包管理器</a></li><li><a href="https://www.luogu.org/problem/P3178">P3178 [HAOI2015]树上操作</a></li><li><a href="https://www.luogu.org/problem/P3258">P3258 [JLOI2014]松鼠的新家</a></li><li><a href="https://www.luogu.org/problem/P4069">P4069 [SDOI2016]游戏</a></li><li><a href="https://www.luogu.org/problem/P4211">P4211 [LNOI2014]LCA</a></li><li><a href="https://www.luogu.org/problem/P4592">P4592 [TJOI2018]异或</a></li><li><a href="https://www.luogu.org/problem/P5305">P5305 [GXOI/GZOI2019]旧词</a></li><li><a href="https://www.luogu.org/problem/P5354">P5354 [Ynoi2017]由乃的OJ</a></li><li><a href="https://www.luogu.org/problem/P5499">P5499 [LnOI2019]Abbi并不想研学</a></li></ul><h3 id="Part-7-14-树套树"><a href="#Part-7-14-树套树" class="headerlink" title="Part 7.14 树套树"></a>Part 7.14 树套树</h3><blockquote><p>树套树可以用来维护多维度信息。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3380">P3380 【模板】二逼平衡树（树套树）</a></li><li><a href="https://www.luogu.org/problem/P1975">P1975 [国家集训队]排队</a></li><li><a href="https://www.luogu.org/problem/P3332">P3332 [ZJOI2013]K大数查询</a></li><li><a href="https://www.luogu.org/problem/P4278">P4278 带插入区间K小值</a></li><li><a href="https://www.luogu.org/problem/P1903">P1903 [国家集训队]数颜色 / 维护队列</a></li><li><a href="https://www.luogu.org/problem/P3759">P3759 [TJOI2017]不勤劳的图书管理员</a></li><li><a href="https://www.luogu.org/problem/P3242">P3242 [HNOI2015]接水果</a></li><li><a href="https://www.luogu.org/problem/P3248">P3248 [HNOI2016]树</a></li><li><a href="https://www.luogu.org/problem/P5445">P5445 [APIO2019]路灯</a></li><li><a href="https://www.luogu.org/problem/P5471">P5471 [NOI2019]弹跳</a></li></ul><h3 id="Part-7-15-动态树"><a href="#Part-7-15-动态树" class="headerlink" title="Part 7.15 动态树"></a>Part 7.15 动态树</h3><blockquote><p>Link-Cut Tree 可以用来解决动态树一类问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3690">P3690 【模板】Link Cut Tree （动态树）</a></li><li><a href="https://www.luogu.org/problem/P3203">P3203 [HNOI2010]弹飞绵羊</a></li><li><a href="https://www.luogu.org/problem/P4338">P4338 [ZJOI2018]历史</a></li><li><a href="https://www.luogu.org/problem/P4312">P4312 [COCI2009]OTOCI</a></li><li><a href="https://www.luogu.org/problem/P1501">P1501 [国家集训队]Tree II</a></li><li><a href="https://www.luogu.org/problem/P2387">P2387 [NOI2014]魔法森林</a></li><li><a href="https://www.luogu.org/problem/P3348">P3348 [ZJOI2016]大森林</a></li><li><a href="https://www.luogu.org/problem/P3703">P3703 [SDOI2017]树点涂色</a></li><li><a href="https://www.luogu.org/problem/P4172">P4172 [WC2006]水管局长</a></li><li><a href="https://www.luogu.org/problem/P4219">P4219 [BJOI2014]大融合</a></li><li><a href="https://www.luogu.org/problemnew/solution/P5489">P5489 EntropyIncreaser 与 动态图</a></li></ul><h3 id="Part-7-16-可持久化数据结构"><a href="#Part-7-16-可持久化数据结构" class="headerlink" title="Part 7.16 可持久化数据结构"></a>Part 7.16 可持久化数据结构</h3><blockquote><p>可持久化数据结构实现了在更新信息的时候保留历史版本。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3919">P3919 【模板】可持久化数组（可持久化线段树/平衡树）</a></li><li><a href="https://www.luogu.org/problem/P3834">P3834 【模板】可持久化线段树 1（主席树）</a></li><li><a href="https://www.luogu.org/problem/P3402">P3402 【模板】可持久化并查集</a></li><li><a href="https://www.luogu.org/problem/P3835">P3835 【模板】可持久化平衡树</a></li><li><a href="https://www.luogu.org/problem/P5055">P5055 【模板】可持久化文艺平衡树</a></li><li><a href="https://www.luogu.org/problem/P5283">P5283 [十二省联考2019]异或粽子</a></li></ul><h3 id="Part-7-17-K-D-Tree"><a href="#Part-7-17-K-D-Tree" class="headerlink" title="Part 7.17 K-D Tree"></a>Part 7.17 K-D Tree</h3><blockquote><p>K-D Tree 是一种高效处理 $ k $ 维信息的数据结构。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4357">P4357 [CQOI2016]K远点对</a></li><li><a href="https://www.luogu.org/problem/P4148">P4148 简单题</a></li><li><a href="https://www.luogu.org/problem/P2479">P2479 [SDOI2010]捉迷藏</a></li><li><a href="https://www.luogu.org/problem/P3769">P3769 [CH弱省胡策R2]TATT</a></li><li><a href="https://www.luogu.org/problem/P4169">P4169 [Violet]天使玩偶/SJY摆棋子</a></li><li><a href="https://www.luogu.org/problem/P4390">P4390 [BOI2007]Mokia</a></li><li><a href="https://www.luogu.org/problem/P4475">P4475 巧克力王国</a></li><li><a href="https://www.luogu.org/problem/P2093">P2093 [国家集训队]JZPFAR</a></li></ul><h3 id="Part-7-18-珂朵莉树"><a href="#Part-7-18-珂朵莉树" class="headerlink" title="Part 7.18 珂朵莉树"></a>Part 7.18 珂朵莉树</h3><blockquote><p>珂朵莉树，是一种基于 <code>std::set</code> 的暴力数据结构，在数据随机的情况下表现优秀。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P5251">P5251 [LnOI2019]第二代图灵机</a></li><li><a href="https://www.luogu.org/problem/P5350">P5350 序列</a></li></ul><h2 id="Part-8-图论"><a href="#Part-8-图论" class="headerlink" title="Part 8 图论"></a>Part 8 图论</h2><blockquote><p>图论是数学的一个分支，它以图为研究的对象。</p></blockquote><h3 id="Part-8-1-图的存储与遍历"><a href="#Part-8-1-图的存储与遍历" class="headerlink" title="Part 8.1 图的存储与遍历"></a>Part 8.1 图的存储与遍历</h3><blockquote><p>这里的图论内容都比较简单，涉及图的存储以及遍历图的方式。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2661">P2661 信息传递</a></li><li><a href="https://www.luogu.org/problem/P2921">P2921 [USACO08DEC]Trick or Treat on the Farm</a></li></ul><h3 id="Part-8-2-最短路问题"><a href="#Part-8-2-最短路问题" class="headerlink" title="Part 8.2 最短路问题"></a>Part 8.2 最短路问题</h3><blockquote><p>很多题目都可以转化为最短路的模型。因此，掌握最短路算法非常重要。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3371">P3371 【模板】单源最短路径（弱化版）</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P4779">P4779 【模板】单源最短路径（标准版）</a></li><li><a href="https://www.luogu.org/problem/P1144">P1144 最短路计数</a></li><li><a href="https://www.luogu.org/problem/P5001">P5001 魔法祝福</a></li><li><a href="https://www.luogu.org/problem/P1462">P1462 通往奥格瑞玛的道路</a></li><li><a href="https://www.luogu.org/problem/P1522">P1522 牛的旅行 Cow Tours</a></li><li><a href="https://www.luogu.org/problem/P1266">P1266 速度限制</a></li><li><a href="https://www.luogu.org/problem/P4568">P4568 [JLOI2011]飞行路线</a></li><li><a href="https://www.luogu.org/problem/P3238">P3238 [HNOI2014]道路堵塞</a></li><li><a href="https://www.luogu.org/problem/P5304">P5304 [GXOI/GZOI2019]旅行者</a></li></ul><h3 id="Part-8-3-树上问题"><a href="#Part-8-3-树上问题" class="headerlink" title="Part 8.3 树上问题"></a>Part 8.3 树上问题</h3><blockquote><p>作为一种特殊的图，树上的问题具有很多鲜明的特点。</p></blockquote><h4 id="Part-8-3-1-二叉树"><a href="#Part-8-3-1-二叉树" class="headerlink" title="Part 8.3.1 二叉树"></a>Part 8.3.1 二叉树</h4><blockquote><p>二叉树是一种特殊的树，它有很多特殊的性质。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1087">P1087 FBI树</a></li><li><a href="https://www.luogu.org/problem/P1030">P1030 求先序排列</a></li><li><a href="https://www.luogu.org/problem/P1305">P1305 新二叉树</a></li><li><a href="https://www.luogu.org/problem/P1229">P1229 遍历问题</a></li><li><a href="https://www.luogu.org/problem/P5018">P5018 对称二叉树</a></li><li><a href="https://www.luogu.org/problem/P5597">P5597 【XR-4】复读</a></li></ul><h4 id="Part-8-3-2-树的直径"><a href="#Part-8-3-2-树的直径" class="headerlink" title="Part 8.3.2 树的直径"></a>Part 8.3.2 树的直径</h4><blockquote><p>树的直径被定义为树上最远的两点间的距离。</p><p>计算树的直径，可以通过两遍 DFS 解决。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2195">P2195 HXY造公园</a></li><li><a href="https://www.luogu.org/problem/P3629">P3629 [APIO2010]巡逻</a></li><li><a href="https://www.luogu.org/problem/P5536">P5536 【XR-3】核心城市</a></li><li><a href="https://www.luogu.org/problem/P1099">P1099 树网的核</a></li><li><a href="https://www.luogu.org/problem/P4408">P4408 [NOI2003]逃学的小孩</a></li></ul><h4 id="Part-8-3-3-最近公共祖先"><a href="#Part-8-3-3-最近公共祖先" class="headerlink" title="Part 8.3.3 最近公共祖先"></a>Part 8.3.3 最近公共祖先</h4><blockquote><p>两个点的最近公共祖先，即两个点的所有公共祖先中，离根节点最远的一个节点。</p><p>求解最近公共祖先，常用的方法是树上倍增或者树链剖分。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3379">P3379 【模板】最近公共祖先（LCA）</a></li><li><a href="https://www.luogu.org/problem/P3938">P3938 斐波那契</a></li><li><a href="https://www.luogu.org/problem/P4281">P4281 [AHOI2008]紧急集合 / 聚会</a></li></ul><h3 id="Part-8-4-生成树"><a href="#Part-8-4-生成树" class="headerlink" title="Part 8.4 生成树"></a>Part 8.4 生成树</h3><blockquote><p>用 $ n-1 $ 条边将图上的 $ n $ 个点连接起来，形成的树就被称为生成树。</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.luogu.org/problem/P3366">P3366 【模板】最小生成树</a></li><li><a href="https://www.luogu.org/problem/P4180">P4180 【模板】严格次小生成树[BJWC2010]</a></li><li><a href="https://www.luogu.org/problem/P2872">P2872 [USACO07DEC]Building Roads</a></li><li><a href="https://www.luogu.org/problem/P1991">P1991 无线通讯网</a></li><li><a href="https://www.luogu.org/problem/P1967">P1967 货车运输</a></li><li><a href="https://www.luogu.org/problem/P4047">P4047 [JSOI2010]部落划分</a></li></ul><h3 id="Part-8-5-拓扑排序"><a href="#Part-8-5-拓扑排序" class="headerlink" title="Part 8.5 拓扑排序"></a>Part 8.5 拓扑排序</h3><blockquote><p>将一个有向无环图排序，使得所有排在前面的节点不能依赖于排在后面的节点，这就是拓扑排序。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1113">P1113 杂务</a></li><li><a href="https://www.luogu.org/problem/P1983">P1983 车站分级</a></li><li><a href="https://www.luogu.org/problem/P1038">P1038 神经网络</a></li></ul><h3 id="Part-8-6-差分约束"><a href="#Part-8-6-差分约束" class="headerlink" title="Part 8.6 差分约束"></a>Part 8.6 差分约束</h3><blockquote><p>差分约束要解决的问题是：求出一组 $ n $ 元不等式的一组解，使得所有约束关系都能得到满足。 </p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3275">P3275 [SCOI2011]糖果</a></li><li><a href="https://www.luogu.org/problem/P2294">P2294 [HNOI2005]狡猾的商人</a></li><li><a href="https://www.luogu.org/problem/P4926">P4926 [1007]倍杀测量者</a></li><li><a href="https://www.luogu.org/problem/P5590">P5590 赛车游戏</a></li></ul><h3 id="Part-8-7-图的连通性相关"><a href="#Part-8-7-图的连通性相关" class="headerlink" title="Part 8.7 图的连通性相关"></a>Part 8.7 图的连通性相关</h3><blockquote><p>利用 Tarjan 算法，我们可以解决很多与图的连通性相关的问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3387">P3387 【模板】缩点</a></li><li><a href="https://www.luogu.org/problem/P3388">P3388 【模板】割点（割顶）</a></li><li><a href="https://www.luogu.org/problem/P2863">P2863 [USACO06JAN]The Cow Prom</a></li><li><a href="https://www.luogu.org/problem/P2746">P2746 [USACO5.3]Network of Schools</a></li><li><a href="https://www.luogu.org/problem/P1407">P1407 [国家集训队]稳定婚姻</a></li><li><a href="https://www.luogu.org/problem/P2272">P2272 [ZJOI2007]最大半连通子图</a></li><li><a href="https://www.luogu.org/problem/P2341">P2341 [HAOI2006]受欢迎的牛</a></li><li><a href="https://www.luogu.org/problem/P3225">P3225 [HNOI2012]矿场搭建</a></li><li><a href="https://www.luogu.org/problem/P4819">P4819 [中山市选]杀人游戏</a></li><li><a href="https://www.luogu.org/problem/P5058">P5058 [ZJOI2004]嗅探器</a></li><li><a href="https://www.luogu.org/problem/P2515">P2515 [HAOI2010]软件安装</a></li></ul><h3 id="Part-8-8-二分图"><a href="#Part-8-8-二分图" class="headerlink" title="Part 8.8 二分图"></a>Part 8.8 二分图</h3><blockquote><p>二分图上的不少问题都可以转化成网络流解决，当然也有独特的其他方法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3386">P3386 【模板】二分图匹配</a></li><li><a href="https://www.luogu.org/problem/P2756">P2756 飞行员配对方案问题</a></li><li><a href="https://www.luogu.org/problem/P1129">P1129 [ZJOI2007]矩阵游戏</a></li><li><a href="https://www.luogu.org/problem/P1559">P1559 运动员最佳匹配问题</a></li><li><a href="https://www.luogu.org/problem/P2423">P2423 [HEOI2012]朋友圈</a></li><li><a href="https://www.luogu.org/problem/P2764">P2764 最小路径覆盖问题</a></li><li><a href="https://www.luogu.org/problem/P2825">P2825 [HEOI2016/TJOI2016]游戏</a></li><li><a href="https://www.luogu.org/problem/P3033">P3033 [USACO11NOV]Cow Steeplechase</a></li><li><a href="https://www.luogu.org/problem/P3731">P3731 [HAOI2017]新型城市化</a></li><li><a href="https://www.luogu.org/problem/P4014">P4014 分配问题</a></li></ul><h3 id="Part-8-9-网络流"><a href="#Part-8-9-网络流" class="headerlink" title="Part 8.9 网络流"></a>Part 8.9 网络流</h3><blockquote><p>网络流是图论中一个重要的分支，很多题目都可以通过建立网络流的模型来解决。</p></blockquote><h4 id="Part-8-9-1-最大流"><a href="#Part-8-9-1-最大流" class="headerlink" title="Part 8.9.1 最大流"></a>Part 8.9.1 最大流</h4><blockquote><p>最大流，即求网络中最大的流量。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3376">P3376 【模板】网络最大流</a></li><li><a href="https://www.luogu.org/problem/P4722">P4722 【模板】最大流 加强版 / 预流推进</a></li><li><a href="https://www.luogu.org/problem/P2065">P2065 [TJOI2011]卡片</a></li><li><a href="https://www.luogu.org/problem/P2763">P2763 试题库问题</a></li><li><a href="https://www.luogu.org/problem/P2472">P2472 [SCOI2007]蜥蜴</a></li><li><a href="https://www.luogu.org/problem/P2754">P2754 [CTSC1999]家园</a></li><li><a href="https://www.luogu.org/problem/P2765">P2765 魔术球问题</a></li><li><a href="https://www.luogu.org/problem/P2766">P2766 最长不下降子序列问题</a></li><li><a href="https://www.luogu.org/problem/P2805">P2805 [NOI2009]植物大战僵尸</a></li><li><a href="https://www.luogu.org/problem/P3749">P3749 [六省联考2017]寿司餐厅</a></li></ul><h4 id="Part-8-9-2-最小割"><a href="#Part-8-9-2-最小割" class="headerlink" title="Part 8.9.2 最小割"></a>Part 8.9.2 最小割</h4><blockquote><p>最小割，即求一个边权最小的边集，使得源点和汇点不再连通。</p><p>可以证明，<strong>最大流=最小割</strong>。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1345">P1345 [USACO5.4]Telecowmunication</a></li><li><a href="https://www.luogu.org/problem/P2057">P2057 [SHOI2007]善意的投票</a></li><li><a href="https://www.luogu.org/problem/P2598">P2598 [ZJOI2009]狼和羊的故事</a></li><li><a href="https://www.luogu.org/problem/P2774">P2774 方格取数问题</a></li><li><a href="https://www.luogu.org/problem/P4126">P4126 [AHOI2009]最小割</a></li><li><a href="https://www.luogu.org/problem/P5039">P5039 [SHOI2010]最小生成树</a></li></ul><h4 id="Part-8-9-3-费用流"><a href="#Part-8-9-3-费用流" class="headerlink" title="Part 8.9.3 费用流"></a>Part 8.9.3 费用流</h4><blockquote><p>在网络流中给边加上一个参数——费用，就出现了费用流。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3381">P3381 【模板】最小费用最大流</a></li><li><a href="https://www.luogu.org/problem/P4016">P4016 负载平衡问题</a></li><li><a href="https://www.luogu.org/problem/P4452">P4452 [国家集训队]航班安排</a></li><li><a href="https://www.luogu.org/problem/P2045">P2045 方格取数加强版</a></li><li><a href="https://www.luogu.org/problem/P2050">P2050 [NOI2012]美食节</a></li><li><a href="https://www.luogu.org/problem/P2053">P2053 [SCOI2007]修车</a></li><li><a href="https://www.luogu.org/problem/P2153">P2153 [SDOI2009]晨跑</a></li><li><a href="https://www.luogu.org/problem/P2604">P2604 [ZJOI2010]网络扩容</a></li><li><a href="https://www.luogu.org/problem/P2770">P2770 航空路线问题</a></li><li><a href="https://www.luogu.org/problem/P3159">P3159 [CQOI2012]交换棋子</a></li><li><a href="https://www.luogu.org/problem/P3356">P3356 火星探险问题</a></li><li><a href="https://www.luogu.org/problem/P3358">P3358 最长k可重区间集问题</a></li><li><a href="https://www.luogu.org/problem/P4013">P4013 数字梯形问题</a></li><li><a href="https://www.luogu.org/problem/P4015">P4015 运输问题</a></li><li><a href="https://www.luogu.org/problem/P4249">P4249 [WC2007]剪刀石头布</a></li><li><a href="https://www.luogu.org/problem/P5331">P5331 [SNOI2019]通信</a></li></ul><h4 id="Part-8-9-4-上下界网络流"><a href="#Part-8-9-4-上下界网络流" class="headerlink" title="Part 8.9.4 上下界网络流"></a>Part 8.9.4 上下界网络流</h4><blockquote><p>在网络流问题中给每条边的流量增加一个下界，就有了上下界网络流。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3980">P3980 [NOI2008]志愿者招募</a></li><li><a href="https://www.luogu.org/problem/P4043">P4043 [AHOI2014/JSOI2014]支线剧情</a></li><li><a href="https://www.luogu.org/problem/P4553">P4553 80人环游世界</a></li><li><a href="https://www.luogu.org/problem/P4843">P4843 清理雪道</a></li></ul><h3 id="Part-8-10-2-SAT"><a href="#Part-8-10-2-SAT" class="headerlink" title="Part 8.10 2-SAT"></a>Part 8.10 2-SAT</h3><blockquote><p>k-SAT 问题的目标是对一些布尔变量赋值，满足限定的条件。</p><p>在 k-SAT 问题中，2-SAT 问题属于较为容易解决的一类。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4782">P4782 【模板】2-SAT 问题</a></li><li><a href="https://www.luogu.org/problem/P4171">P4171 [JSOI2010]满汉全席</a></li><li><a href="https://www.luogu.org/problem/P3825">P3825 [NOI2017]游戏</a></li><li><a href="https://www.luogu.org/problem/P5332">P5332 [JSOI2019]精准预测</a></li></ul><h3 id="Part-8-11-点分治"><a href="#Part-8-11-点分治" class="headerlink" title="Part 8.11 点分治"></a>Part 8.11 点分治</h3><blockquote><p>点分治是一种可以高效统计树上路径信息的算法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3806">P3806 【模板】点分治1</a></li><li><a href="https://www.luogu.org/problem/P2634">P2634 [国家集训队]聪聪可可</a></li><li><a href="https://www.luogu.org/problem/P2664">P2664 树上游戏</a></li><li><a href="https://www.luogu.org/problem/P3714">P3714 [BJOI2017]树的难题</a></li><li><a href="https://www.luogu.org/problem/P4149">P4149 [IOI2011]Race</a></li><li><a href="https://www.luogu.org/problem/P3241">P3241 [HNOI2015]开店</a></li><li><a href="https://www.luogu.org/problem/P4075">P4075 [SDOI2016]模式字符串</a></li><li><a href="https://www.luogu.org/problem/P4183">P4183 [USACO18JAN]Cow at Large P</a></li><li><a href="https://www.luogu.org/problem/P4292">P4292 [WC2010]重建计划</a></li><li><a href="https://www.luogu.org/problem/P5306">P5306 [COCI2019]Transport</a></li></ul><h3 id="Part-8-12-虚树"><a href="#Part-8-12-虚树" class="headerlink" title="Part 8.12 虚树"></a>Part 8.12 虚树</h3><blockquote><p>将一些无用的点从树上删去，从而达到降低树的规模的效果。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2495">P2495 [SDOI2011]消耗战</a></li><li><a href="https://www.luogu.org/problem/P3233">P3233 [HNOI2014]世界树</a></li><li><a href="https://www.luogu.org/problem/P5360">P5360 [SDOI2019]世界地图</a></li><li><a href="https://www.luogu.org/problem/P5439">P5439 【XR-2】永恒</a></li></ul><h3 id="Part-8-13-矩阵树定理"><a href="#Part-8-13-矩阵树定理" class="headerlink" title="Part 8.13 矩阵树定理"></a>Part 8.13 矩阵树定理</h3><blockquote><p>矩阵树定理可以解决图的生成树计数问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4111">P4111 [HEOI2015]小Z的房间</a></li><li><a href="https://www.luogu.org/problem/P2144">P2144 [FJOI2007]轮状病毒</a></li><li><a href="https://www.luogu.org/problem/P3317">P3317 [SDOI2014]重建</a></li><li><a href="https://www.luogu.org/problem/P4208">P4208 [JSOI2008]最小生成树计数</a></li></ul><h2 id="Part-9-计算几何"><a href="#Part-9-计算几何" class="headerlink" title="Part 9 计算几何"></a>Part 9 计算几何</h2><blockquote><p>试着用计算机来解决几何问题吧！</p></blockquote><h3 id="Part-9-1-凸包"><a href="#Part-9-1-凸包" class="headerlink" title="Part 9.1 凸包"></a>Part 9.1 凸包</h3><blockquote><p>凸包指在平面上能包含所有给定点的最小凸多边形。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P2742">P2742 【模板】二维凸包</a></li><li><a href="https://www.luogu.org/problem/P2287">P2287 [HNOI2004]最佳包裹</a></li><li><a href="https://www.luogu.org/problem/P3829">P3829 [SHOI2012]信用卡凸包</a></li><li><a href="https://www.luogu.org/problem/P4680">P4680 [Ynoi2018]末日时在做什么?有没有空?可以来拯救吗?</a></li><li><a href="https://www.luogu.org/problem/P4557">P4557 [JSOI2018]战争</a></li><li><a href="https://www.luogu.org/problem/P5403">P5403 [CTS2019]田野</a></li></ul><h3 id="Part-9-2-旋转卡壳"><a href="#Part-9-2-旋转卡壳" class="headerlink" title="Part 9.2 旋转卡壳"></a>Part 9.2 旋转卡壳</h3><blockquote><p>旋转卡壳是一种求出凸包所有对踵点对的算法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1452">P1452 Beauty Contest</a></li><li><a href="https://www.luogu.org/problem/P3187">P3187 [HNOI2007]最小矩形覆盖</a></li></ul><h3 id="Part-9-3-半平面交"><a href="#Part-9-3-半平面交" class="headerlink" title="Part 9.3 半平面交"></a>Part 9.3 半平面交</h3><blockquote><p>多个半平面的交集称之为半平面交。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3256">P3256 [JLOI2013]赛车</a></li><li><a href="https://www.luogu.org/problem/P2600">P2600 [ZJOI2008]瞭望塔</a></li><li><a href="https://www.luogu.org/problem/P4196">P4196 [CQOI2006]凸多边形</a></li><li><a href="https://www.luogu.org/problem/P3297">P3297 [SDOI2013]逃考</a></li><li><a href="https://www.luogu.org/problem/P4250">P4250 [SCOI2015]小凸想跑步</a></li><li><a href="https://www.luogu.org/problem/P5328">P5328 [ZJOI2019]浙江省选</a></li></ul><h2 id="Part-10-杂项"><a href="#Part-10-杂项" class="headerlink" title="Part 10 杂项"></a>Part 10 杂项</h2><blockquote><p>这里的专题，有很多都难以纳入前面的类别中，故将他们单独列入了杂项。</p></blockquote><h3 id="Part-10-1-模拟退火"><a href="#Part-10-1-模拟退火" class="headerlink" title="Part 10.1 模拟退火"></a>Part 10.1 模拟退火</h3><blockquote><p>模拟退火是一种随机化算法。当一个问题的方案数量极大（甚至是无穷的）而且不是一个单峰函数时，我们常使用模拟退火求解。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1337">P1337 [JSOI2004]平衡点 / 吊打XXX</a></li><li><a href="https://www.luogu.org/problem/P2503">P2503 [HAOI2006]均分数据</a></li><li><a href="https://www.luogu.org/problem/P3878">P3878 [TJOI2010]分金币</a></li></ul><h3 id="Part-10-2-0-1-分数规划"><a href="#Part-10-2-0-1-分数规划" class="headerlink" title="Part 10.2 0/1 分数规划"></a>Part 10.2 0/1 分数规划</h3><blockquote><p>0/1 分数规划用来求一个分式的极值。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4377">P4377 [USACO18OPEN]Talent Show</a></li><li><a href="https://www.luogu.org/problem/P3199">P3199 [HNOI2009]最小圈</a></li><li><a href="https://www.luogu.org/problem/P3288">P3288 [SCOI2014]方伯伯运椰子</a></li><li><a href="https://www.luogu.org/problem/P3705">P3705 [SDOI2017]新生舞会</a></li><li><a href="https://www.luogu.org/problem/P4322">P4322 [JSOI2016]最佳团体</a></li></ul><h3 id="Part-10-3-离线算法"><a href="#Part-10-3-离线算法" class="headerlink" title="Part 10.3 离线算法"></a>Part 10.3 离线算法</h3><blockquote><p>当题目不要求强制在线时，我们可以一次性读入所有询问来处理。</p></blockquote><h4 id="Part-10-3-1-CDQ-分治"><a href="#Part-10-3-1-CDQ-分治" class="headerlink" title="Part 10.3.1 CDQ 分治"></a>Part 10.3.1 CDQ 分治</h4><blockquote><p>CDQ 分治是一个基于分治思想的离线算法。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P3810">P3810 【模板】三维偏序（陌上花开）</a></li><li><a href="https://www.luogu.org/problem/P3157">P3157 [CQOI2011]动态逆序对</a></li><li><a href="https://www.luogu.org/problem/P2487">P2487 [SDOI2011]拦截导弹</a></li><li><a href="https://www.luogu.org/problem/P4690">P4690 [Ynoi2016]镜中的昆虫</a></li><li><a href="https://www.luogu.org/problem/P3206">P3206 [HNOI2010]城市建设</a></li></ul><h4 id="Part-10-3-2-整体二分"><a href="#Part-10-3-2-整体二分" class="headerlink" title="Part 10.3.2 整体二分"></a>Part 10.3.2 整体二分</h4><blockquote><p>整体二分，顾名思义就是把多个查询一起二分解决。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1527">P1527 [国家集训队]矩阵乘法</a></li><li><a href="https://www.luogu.org/problem/P2617">P2617 Dynamic Rankings</a></li><li><a href="https://www.luogu.org/problem/P3527">P3527 [POI2011]MET-Meteors</a></li></ul><h4 id="Part-10-3-3-莫队"><a href="#Part-10-3-3-莫队" class="headerlink" title="Part 10.3.3 莫队"></a>Part 10.3.3 莫队</h4><blockquote><p>莫队算法可以解决不少离线区间询问问题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4887">P4887 【模板】莫队二次离线（第十四分块(前体)）</a></li><li><a href="https://www.luogu.org/problem/P1494">P1494 [国家集训队]小Z的袜子</a></li><li><a href="https://www.luogu.org/problem/P1903">P1903 [国家集训队]数颜色 / 维护队列</a></li><li><a href="https://www.luogu.org/problem/P2709">P2709 小B的询问</a></li><li><a href="https://www.luogu.org/problem/P3674">P3674 小清新人渣的本愿</a></li><li><a href="https://www.luogu.org/problem/P3709">P3709 大爷的字符串题</a></li><li><a href="https://www.luogu.org/problem/P4074">P4074 [WC2013]糖果公园</a></li><li><a href="https://www.luogu.org/problem/P5501">P5501 [LnOI2019]来者不拒，去者不追</a></li></ul><h3 id="Part-10-4-奇怪的题目"><a href="#Part-10-4-奇怪的题目" class="headerlink" title="Part 10.4 奇怪的题目"></a>Part 10.4 奇怪的题目</h3><blockquote><p>OI 界中有一些非常规套路的题目，这里放出来分享。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P4920">P4920 [WC2015]未来程序</a></li><li><a href="https://www.luogu.org/problem/P5042">P5042 [国家集训队]丢失的题面（ydc的题面）</a></li><li><a href="https://www.luogu.org/problem/P5285">P5285 [十二省联考2019]骗分过样例</a></li><li><a href="https://www.luogu.org/problem/P5246">P5246 [集训队互测2016]消失的源代码</a></li></ul><h3 id="Part-10-5-非传统题"><a href="#Part-10-5-非传统题" class="headerlink" title="Part 10.5 非传统题"></a>Part 10.5 非传统题</h3><blockquote><p>在 NOI 等比赛中，非传统题正越来越频繁出现。</p><p>非传统题主要包括以下几类：提交答案题，交互题，通信题。</p></blockquote><h4 id="Part-10-5-1-提交答案题"><a href="#Part-10-5-1-提交答案题" class="headerlink" title="Part 10.5.1 提交答案题"></a>Part 10.5.1 提交答案题</h4><blockquote><p>给你一些输入，你只需要提交这些输入对应的答案，即为提交答案题。</p></blockquote><ul><li><a href="https://www.luogu.org/problem/P1335">P1335 [NOI2013]小Q的修炼</a></li><li><a href="https://www.luogu.org/problem/P1737">P1737 [NOI2016]旷野大计算</a></li><li><a href="https://www.luogu.org/problem/P3614">P3614 yyy棋 II</a></li><li><a href="https://www.luogu.org/problem/P3640">P3640 [APIO2013]出题人</a></li><li><a href="https://www.luogu.org/problem/P3782">P3782 [WC2017]排序</a></li><li><a href="https://www.luogu.org/problem/P3836">P3836 Nowruz</a></li><li><a href="https://www.luogu.org/problem/P4920">P4920 [WC2015]未来程序</a></li><li><a href="https://www.luogu.org/problem/P5402">P5402 [CTS2019]无处安放</a></li><li><a href="https://www.luogu.org/problem/P5418">P5418 [CTSC2016]NOIP十合一</a></li><li><a href="https://www.luogu.org/problem/P5600">P5600 【XR-4】尺规作图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSP-S 2019 训练略记</title>
      <link href="/2019/10/26/2019-xun-lian-lue-ji/"/>
      <url>/2019/10/26/2019-xun-lian-lue-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="Day-20"><a href="#Day-20" class="headerlink" title="Day -20"></a>Day -20</h3><p>集中训练第一天。</p><p>终于还是停了周考，卸下了一部分包袱。</p><p>上午打了Luogu TG Autumn -2（其实是敲了几道暴力</p><p><del>orz zyy &amp; yxy</del></p><p>下午复习树状数组，卡死在逆序对问题QAQ</p><p>晚上Codeforces Round #596 (Div. 2)，感觉码力终于有所回升<del>（菜</del></p><h3 id="Day-19"><a href="#Day-19" class="headerlink" title="Day -19"></a>Day -19</h3><p><del>咕咕咕的lhw</del></p><p>今天Luogu LGR-062 div 2月赛，202分去世</p><p>第一题正解暴力，强行搞了字符串哈希</p><p>第二题暴力+贪心</p><h3 id="Day-18"><a href="#Day-18" class="headerlink" title="Day -18"></a>Day -18</h3><p>今晚统一集训延迟</p><p>决定复习数学部分，刷了素数和最大公约数的题</p><h3 id="Day-17"><a href="#Day-17" class="headerlink" title="Day -17"></a>Day -17</h3><p>训练前得知wch与fjc会回来出题讲评，开心qwq</p><p>晚上两道题，切了一晚上T2<del>（被题切</del></p><p>考虑了LCA，点分治与数学，终于在集训结束前切了出来</p><ul><li><input disabled="" type="checkbox"> flag: 要加强码力</li></ul><h3 id="Day-16"><a href="#Day-16" class="headerlink" title="Day -16"></a>Day -16</h3><p>听取bilibili讲评qwq</p><p><del>fjc最强！</del></p><h3 id="Day-15"><a href="#Day-15" class="headerlink" title="Day -15"></a>Day -15</h3><p>第二轮训练qaq</p><p>第一题模拟，第二题DP</p><p>第三题…（数据结构？</p><p>自闭ing…</p><h3 id="Day-14-Day-11"><a href="#Day-14-Day-11" class="headerlink" title="Day -14 ~ Day -11"></a>Day -14 ~ Day -11</h3><p>照常训练</p><p>（感动于doorwen的奉献与fjc &amp; wch的耐心讲解qwq</p><h3 id="Day-11"><a href="#Day-11" class="headerlink" title="Day -11"></a>Day -11</h3><p>制定10天冲刺计划<del>（其实就是复习了</del></p><h3 id="Day-10"><a href="#Day-10" class="headerlink" title="Day -10"></a>Day -10</h3><p>复习线段树与树状数组</p><h3 id="Day-9"><a href="#Day-9" class="headerlink" title="Day -9"></a>Day -9</h3><p>复习<del>冰茶姬</del>并查集</p><h3 id="Day-6"><a href="#Day-6" class="headerlink" title="Day -6"></a>Day -6</h3><p>晚上来打Luogu月赛</p><p>第三题不会自闭</p><p>第四题搞了$O(n^2 \log n)$的数据结构优化的大暴力</p><p>（然而8分滚粗qaq</p><h3 id="Day-5"><a href="#Day-5" class="headerlink" title="Day -5"></a>Day -5</h3><p>翘了今天的课（</p><p>上午Luogu TG -5两道题全部调炸了QAQ</p><p>下午<del>虚心学习</del>复习主席树qwq</p><p><del>orz fjc AK ICPC</del></p><h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day -4"></a>Day -4</h3><p>最后一天上文化课（欢呼</p><p>晚上开始补扫描线</p><h3 id="Day-3-amp-期中考试-Day-1"><a href="#Day-3-amp-期中考试-Day-1" class="headerlink" title="Day -3 &amp; 期中考试 Day 1"></a>Day -3 &amp; 期中考试 Day 1</h3><p><del>不考期中考试真好（逃</del></p><p>复习扫描线&amp;珂朵莉树（？</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day -2"></a>Day -2</h3><p>越复习越感觉不会的东西好多qaq…</p><p>今天学习了KMP和CDQ分治</p>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>肥城一中FOI 2019级宣传</title>
      <link href="/2019/09/20/2019-ji-oi-xuan-chuan/"/>
      <url>/2019/09/20/2019-ji-oi-xuan-chuan/</url>
      
        <content type="html"><![CDATA[<h3 id="OI是什么？"><a href="#OI是什么？" class="headerlink" title="OI是什么？"></a>OI是什么？</h3><p><strong>信息学奥林匹克竞赛(OI,Olympiad in Informatics)。</strong></p><p>与大家熟知的数学、物理、化学、生物竞赛合称为高中五大学科竞赛。</p><p><strong>肥城一中FOI为学校官方组织，也是唯一的官方社团，又名信息学奥赛小组。</strong></p><h3 id="OI学什么？"><a href="#OI学什么？" class="headerlink" title="OI学什么？"></a>OI学什么？</h3><p>通俗来说，OI主要考查C++语言编程以及算法和数据结构。</p><p><strong>OI不涉及电子竞技、网络安全以及软硬件开发。</strong></p><p>在义务教育阶段任何一所学校都<strong>不会</strong>涉及到有关OI的知识。</p><p>正因为如此，无论是计算机小白，还是理科大佬，都可以成为一名OIer，<strong>从零起步</strong>学习OI。</p><h3 id="OI竞赛有哪些活动？"><a href="#OI竞赛有哪些活动？" class="headerlink" title="OI竞赛有哪些活动？"></a>OI竞赛有哪些活动？</h3><ul><li><p><del>全国青少年信息学奥林匹克联赛(NOIP, National Olympiad in Informatics in Provinces)，即省级联赛，分为10月举办的初赛和11月举办的复赛。</del></p><ul><li>已替代为非专业级软件能力认证(CSP, Certified Software Professional)，分为10月举办的第一轮和11月举办的第二轮。</li></ul></li><li><p>全国青少年信息学奥林匹克冬令营(NOIWC, National Olympiad in Informatics Winter Camp)，一般于次年2月举办。</p></li><li><p>亚洲与太平洋地区信息学奥赛(APIO, Asia Pacific Informatics Olympiad)，5月举办。</p></li><li><p>IOI中国代表队选拔赛(CTS<del>C</del>, China Team Selection <del>Competition</del>)，5月举办。</p></li><li><p>全国青少年信息学奥林匹克竞赛(NOI, National Olympiad in Informatics)，即全国决赛，一般于7月举办。</p></li><li><p>国际信息学奥林匹克(IOI)，中国是世界公认的信息学奥林匹克竞赛大国，在IOI中奖牌数及金牌数位居世界第一。</p></li></ul><p><img src="https://studyingfather.com/wp-content/uploads/2019/08/leader.png"></p><p>更多详情可以参看<a href="www.noi.cn">NOI官网的有关介绍</a>。</p><h3 id="学OI的好处？"><a href="#学OI的好处？" class="headerlink" title="学OI的好处？"></a>学OI的好处？</h3><p>很多高中老师认为OI是边缘竞赛，<strong>唯一原因只是它不是高考科目而已。</strong></p><p>引自知乎-Yan Gu 在 “信息学竞赛算是边缘竞赛吗？”下的回答：</p><blockquote><p>作为高中生，尤其是优秀高中生，一定要认识到高中老师视野的狭隘性和局限性，尽量不要被他们所迷惑。</p><p>这是唯一一门既能锻炼智商又切实有用的竞赛。当然前提是你将来是IT从业者，但是从现在（美国）的发展趋势来看，今后二十年IT业都将是人类进步的主要输出力量之一和最大的劳动力需求市场，所以如果你真的喜欢的话，IT业是一定不会亏欠你的。</p></blockquote><p>OI在自主招生中，一直被各大高校重视，依据省级联赛奖、全国决赛奖，各高校可以给予降低10-60分录取分数线的优惠，最多可以降至一本线录取。</p><p>在NOI现场就会有数个国内排名前二十的高校签约获奖选手。</p><p>另外在每年5月举办的清华大学、北京大学信息学体验营中如果取得优异的成绩，也可以拿到不同的优惠政策。</p><p>很多老师家长因为不了解算法竞赛，以为就是“玩电脑”，浪费时间，影响课内学习。实际上如果训练计划科学，那么不需要担心这个问题。相反，<strong>学习编程以及算法可以训练数学能力（尤其是逻辑数学思维能力）。</strong></p><p>算法竞赛主要研究对象的是<strong>离散数学</strong>，虽然很多学生并没有意识到这一点。即使是小学生，知识储备还很有限，但是即使写一些简单的题目，也是对思维的训练。效果是对数字、形状与抽象结构的理解更加透彻。小学或者初一小朋友理解一些抽象的东西起来会有一些困难，但是经过编程的训练，就可以很大的提升这一方面的能力。对，就是非常有助于中学阶段的理科学习。</p><p>对于中学生来说，学习算法竞赛除了上一点所说的培养兴趣以外，还能学习到一些数论、概率统计方面的一些知识。这些知识很可能在学校的课堂上并不会教授，但是在学习中学数学中是可以用得到的。除此之外，学习算法竞赛可以给同学提供另外的思路，比如递推思想、枚举思想等，<strong>这些思维方式在实际生活中是很有用的。</strong></p><h3 id="OI考什么？"><a href="#OI考什么？" class="headerlink" title="OI考什么？"></a>OI考什么？</h3><p>信息学竞赛的考察形式分为笔试和上机两种形式。不仅是信息学竞赛，包括计算机考级、大学生程序设计比赛、信息技术高考等相关考试竞赛的形式也无外乎这两种。信息学竞赛以上机测试为主，但是笔试也是重要的组成部分。</p><h4 id="信息学竞赛的笔试"><a href="#信息学竞赛的笔试" class="headerlink" title="信息学竞赛的笔试"></a>信息学竞赛的笔试</h4><p>信息学竞赛无论入门组还是提高组，初赛的形式是笔试，在固定的时间内完成一份试卷，试卷内容包括计算机基本常识、计算机科学简单数学知识、程序设计语言基础和简单数据结构与算法。原则上不允许使用计算器，但是因考场而异。批改是按照市级赛区统一批改然后统一划线决定复赛名单。</p><p>信息学竞赛除了初赛是笔试以外，NOI全国决赛也有100分的笔试环节，全部都是选择题。</p><h4 id="信息学竞赛的上机测试"><a href="#信息学竞赛的上机测试" class="headerlink" title="信息学竞赛的上机测试"></a>信息学竞赛的上机测试</h4><p>复赛、省选以及冬令营、APIO、CTSC等竞赛，以及NOI的主要比赛，都是上机测试，上机测试是信息学竞赛的重头戏，能直接决定你能获得什么奖。根据比赛的不同，每场上机测试限时3-5小时，需要完成3-4个题目。NOIP提高组、NOI和某些省选会分2天进行两次上机测试。</p><p>上机测试的题型有多种形式，但是无论是什么形式，本质上都是要求你编写程序，可以将给定的输入数据按照题目要求处理成符合要求的输出。</p><p>最常见的试题形式叫做“传统题”。传统题是指给你一个题目描述、输入输出格式、输入输出样例（有时会给你样例解释帮助你更好的理解题意）以及数据范围，你需要根据这些信息编写出一个程序，能够将给定的输入进行处理，然后输出答案。</p><p>选手按照要求编写完程序后需要自己进行测试、保证程序符合题目要求。赛后统一提交并进行评测。出题人会生成构造多组测试数据，向选手编写的程序编译后的可执行文件输入，得到的选手输出和标准输出进行比对；如果选手输出和标准输出一致（或者通过特殊判断认为选手输出是合法的）就能够获得这部分的分数。如果输出了错误的答案或者运行时间过久、运行时错误等问题则不能得分。</p><h3 id="在肥城一中学习OI的优势？"><a href="#在肥城一中学习OI的优势？" class="headerlink" title="在肥城一中学习OI的优势？"></a>在肥城一中学习OI的优势？</h3><p>肥城市第一高级中学自2015年就开始组织OI培训，至今成果斐然，在每年NOIP奖项中肥城近乎全部的选手来自一中：</p><p><img src="https://i.loli.net/2019/09/20/MJpjrS5zZKNnTPA.png"></p><p>获奖学生分别被西安交通大学、北京邮电大学、南京航空航天大学等高校降分数线录取。</p><p>学校也十分重视一中OI的发展，我们有经验丰富的教练、完备的教学体系、系统的学习资源。</p><p>精致的小型活动室以及实验电教中心里3个<del>旧式</del>机房；</p><p><img src="https://i.loli.net/2019/09/20/E5fNGkeRvUo8aLM.jpg"></p><p><strong>和幽默风趣的学姐学长：</strong></p><p>由于OI知识更新换代速度极快，学生往往走在知识提出、运用的最前沿，<strong>学姐学长在新一届OIer的教学中也起着很大的作用。</strong></p><p>另外，由于OI竞赛的性质，OI圈的主要组成部分是ACGer以及技术宅，在哔哩哔哩中经常能见到OIer的身影，比如：</p><p><img src="https://s1.ax1x.com/2018/03/31/9xba3n.png"></p><p><img src="https://s1.ax1x.com/2018/03/31/9xbU9s.png"></p><h3 id="新高一OI培训计划？"><a href="#新高一OI培训计划？" class="headerlink" title="新高一OI培训计划？"></a>新高一OI培训计划？</h3><p>首先，参加OI培训无门槛，完全自愿。</p><p>目前正在计划开设第一批零基础培训班，旨在训练通过初赛的新高一学生迅速接近NOIP水准，有能力参加CSP-S 2019。</p><p>同时也有针对初赛学生的视频讲解。</p><p>开始后上课在每周五、周日晚自习，会有优质讲师与学长讲解。<strong>培训免费！</strong></p><p><strong>肥城一中FOI大家庭期待您的加入！</strong></p><p><img src="https://i.loli.net/2019/09/20/WAL7hxXQ1J6mC4o.jpg"></p><p><img src="https://s1.ax1x.com/2018/03/31/9xbE7D.png"></p><blockquote><p>参考：</p><p>Studying Father’s blog<br>kkksc03: 信息学竞赛全攻略3：信息学竞赛考什么<br>kkksc03: 信息学竞赛全攻略2：为什么要参加竞赛</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宣传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】基于链式前向星的图论算法（三） 拓扑排序</title>
      <link href="/2019/09/13/tuo-bu-pai-xu/"/>
      <url>/2019/09/13/tuo-bu-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>有向无环图(DAG)可用来表示各种事物的顺序。比如以各项工作为顶点，用有向边来表示工作顺序。</p><p>如果对这种表示顺序关系的DAG进行拓扑排序， 我们便能得到一个恰当的工作顺序。</p><p>拓扑排序不是用于将n个数从小到大排序，而是对于一个DAG，对图上的点进行排序，使得对于图上的任意一条有向边(u, v)，在排序后的序列中，u出现在v之前。</p><p>如何进行拓扑排序：</p><ul><li>用边表存下边，记录下每个点的入度 (即有多少条边以该点为终点)</li><li>先将所有入度为0的点加入操作队列<br>• 在操作队列中<br>• 将队头设为操作点，并弹出队头<br>• 将操作点相连的边从图中删除<br>（实际实现中我们只需要将该点能到达的点的入度减一）<br>• 查看该点能到达的点是否有入度为0的点，有的话将其加入队列<br>• 此时点进入队列时的标号就是一种可行的拓扑排序</li></ul>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】基于链式前向星的图论算法（二） 最短路</title>
      <link href="/2019/09/13/zui-duan-lu/"/>
      <url>/2019/09/13/zui-duan-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-1-单源最短路（SSSP）"><a href="#Part-1-单源最短路（SSSP）" class="headerlink" title="Part 1 单源最短路（SSSP）"></a>Part 1 单源最短路（SSSP）</h3><h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><p><strong>Dijkstra只能用于无负权边的图。</strong></p><p>设图$G=(V,E)$所有顶点的集合为$V$，起点为$s$,最短路径树中包含的顶点集合为$S$。</p><p>在各计算步骤中，我们将选岀最短路径树的边和顶点并将其添加至$S$。</p><p>对于各顶点$i$，设仅经由$S$内顶点的$s$到$i$的最短路径成本为$d[i]$，$i$在最短路径树中的父结点为$p[i]$。</p><ul><li><p>初始状态下将$S$置空。</p><p>初始化$S$的$d[s] = 0$；除s以外，所有属于V的顶点i的$d[i]=\infty$</p></li><li><p>循环进行下述处理，直至$S=F$为止。</p><ul><li><p>从$V-S$中选岀$d[u]$最小的顶点$u$</p></li><li><p>将$u$添加$S$至，同时将与$u$相邻且属于$V-S$的所有顶点$v$的值按下述方式更新：</p></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span>    d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>伪代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">dijkstra</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    将所有顶点u的color<span class="token punctuation">[</span>u<span class="token punctuation">]</span>设为WHITE，d<span class="token punctuation">[</span>u<span class="token punctuation">]</span>初始化为INFTY    d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    p<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">true</span>        mincost <span class="token operator">=</span> INFTY        <span class="token keyword">for</span> i从<span class="token number">0</span>至n<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">if</span> color<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> BLACK <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mincost                mincost <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                u <span class="token operator">=</span> i        <span class="token keyword">if</span> mincost <span class="token operator">==</span> INFTY            <span class="token keyword">break</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> BLACK        <span class="token keyword">for</span> v从<span class="token number">0</span>至n<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">if</span> color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> BLACK且u和v之间存在边                <span class="token keyword">if</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> M<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                    d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> M<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span>                    p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u                    color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邻接矩阵实现的Dijkstra算法复杂度为$O(|V|^2)$。使用邻接表时，更新最短距离只需访问每条边一次，因此更新最短距离复杂度为$O(|E|)$。<br>但是要枚举所有顶点来查找下一个使用的顶点，因此最终复杂度还是$O(|V|^2)$。</p><h4 id="Dijkstra堆优化"><a href="#Dijkstra堆优化" class="headerlink" title="Dijkstra堆优化"></a>Dijkstra堆优化</h4><p>把每个顶点当前的最短距离用堆维护，可以省去松弛和查找操作，直接把节点和数据丢进优先队列。</p><p>更新最短距离时，每次从堆中取出的最小值就是下一次要使用的顶点。</p><p>在使用堆优化时，加入堆的应为当前将要被更新的点的编号和当前距离；而当距离被更新时，应新加入一个包含当前点的编号和当前距离的节点。</p><ul><li>在单源最短路的题目中，Dijkstra是最好用的算法。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-11-06 19:00:52 * @LastEditTime: 2019-11-10 20:38:18 * @Description: Dijkstra */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_V</span> <span class="token expression"><span class="token number">100005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// typedef pair&lt;int,int&gt; P;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span> cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> V<span class="token punctuation">,</span> E<span class="token punctuation">,</span> S<span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>edge e<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>edge<span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token operator">&gt;</span> que<span class="token punctuation">;</span>    <span class="token function">fill</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> d<span class="token operator">+</span>V<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> p<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span>                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>V<span class="token punctuation">,</span> <span class="token operator">&amp;</span>E<span class="token punctuation">,</span> <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token operator">--</span><span class="token punctuation">;</span>        v<span class="token operator">--</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span>to <span class="token operator">=</span> v<span class="token punctuation">;</span>        e<span class="token punctuation">.</span>cost <span class="token operator">=</span> w<span class="token punctuation">;</span>        G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//e.to = u;</span>        <span class="token comment">//G[v].push_back(e);</span>    <span class="token punctuation">}</span>    <span class="token function">dijkstra</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h4><p>Bellman-Ford算法基于动态规划的思想，即反复用已有的边来更新最短距离。即如果$d[u] + cost(u, v) &lt; d[v]$则更新d[v]。</p><p>因为最短路经过的边数量不超过n − 1，所以至多n − 1次更新后d[x]即为源点S到地图上其余每个点的最短距离。</p><ul><li><p>d[S] = 0，其余d[x] = INF</p></li><li><p>对于每条边$(u, v)$，如果$d[u] &lt; INF$且$d[u] + cost(u, v) &lt; d[v]$，则$d[v] = d[u] + cost(u, v) &lt; d[v]$</p></li><li><p>循环上一步至多n − 1次</p></li><li><p>对于每条边$(u, v)$，如果$d[u] &lt; INF$且$d[u] + cost(u, v) &lt; d[v]$，则图中存在负权回路</p></li></ul><p>总时间复杂度$O(nm)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Author: thyzzs * @Date: 2019-11-06 19:00:52 * @LastEditTime: 2019-11-10 20:38:18 * @Description: Bellman-Ford */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climit&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_E</span> <span class="token expression"><span class="token number">500005</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_V</span> <span class="token expression"><span class="token number">10005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> from<span class="token punctuation">,</span> to<span class="token punctuation">,</span> cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>edge es<span class="token punctuation">[</span>MAX_E<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>MAX_V<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> V<span class="token punctuation">,</span> E<span class="token punctuation">,</span> S<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Bellman_Ford</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> V<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> update <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                update <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>update<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> V <span class="token operator">&gt;&gt;</span> E <span class="token operator">&gt;&gt;</span> S<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>from <span class="token operator">&gt;&gt;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">&gt;&gt;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Bellman_Ford</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> V<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bellman-Ford队列优化（SPFA）"><a href="#Bellman-Ford队列优化（SPFA）" class="headerlink" title="Bellman-Ford队列优化（SPFA）"></a>Bellman-Ford队列优化（SPFA）</h4><p>SPFA队列优化在随机数据下复杂度较优，但在构造数据下容易被卡。</p><p>通常来讲，就是有网格套链式菊花图外挂诱导次短路节点就可以用一个数据卡掉所有的SPFA。</p><h3 id="Part-2-所有点对间最短路径（APSP）"><a href="#Part-2-所有点对间最短路径（APSP）" class="headerlink" title="Part 2 所有点对间最短路径（APSP）"></a>Part 2 所有点对间最短路径（APSP）</h3><p>所有点对间最短路径问题（All Pairs Shortest Path, APSP) 是以图$G = (V, E)$为对象，求$G$中每两点之间的最短路径（距离）的问题。</p><h4 id="Dijkstra-1"><a href="#Dijkstra-1" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><p>如果$G$中不存在权值为负的边，我们可以将各个顶点作为起点执行$|K|$次Dijkstra算法来求解这类问题。</p><p>这样做的算法复杂度为$O(|V|^3)$</p><p>用优先级队列实现的话可以简化至$O(|V|(|E|+|V|) \log |V|)$</p><h4 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h4><p><strong>使用邻接矩阵存图</strong></p><p>先初始化f[i][i] = 0；若i不能到j，f[i][j] = INF</p><p>若从i到j有一条边权为a[i][j]的边，则f[i][j] = a[i][j]</p><p>Floyd的本质是一个三维的DP，f[k][i][j]表示可以用1到k的点作为中间点从i到j的最短距离。</p><p><code>f[k][i][j] = min(f[k − 1][i][j], f[k − 1][i][k] + f[k − 1][k][j])</code></p><p>而实际我们可以去掉k这一维</p><p><code>f[i][j] = min(f[i][j], f[i][k] + f[k][j])</code></p><ul><li><p>值f[i][j]不变就对应<code>f[k][i][j] = f[k − 1][i][j]</code></p></li><li><p>值改变就对应<code>f[k][i][j] = f[k − 1][i][k] + f[k − 1][k][j]</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】基于链式前向星的图论算法（一） 搜索</title>
      <link href="/2019/09/08/sou-suo/"/>
      <url>/2019/09/08/sou-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-0-缘起"><a href="#Part-0-缘起" class="headerlink" title="Part 0 缘起"></a>Part 0 缘起</h3><p>近日整理笔记时发现，初学时的图论算法都是基于邻接矩阵储存的，使用时非常不方便。所以就写了这篇博文，聊作图论学习的回顾。</p><h3 id="Part-1-图的链式前向星表示"><a href="#Part-1-图的链式前向星表示" class="headerlink" title="Part 1 图的链式前向星表示"></a>Part 1 图的链式前向星表示</h3><p>链式前向星又称为邻接表的静态建表方式，其最开始确实是基于前向星，是以提高前向星的构造效率为目的设计的存储方式，最终演变成了一个变形的邻接表这一数据结构。</p><p>链式前向星采用数组模拟链表的方式实现邻接表的功能。（为方便使用，以下代码使用vector实现链式前向星）</p><h4 id="无权图的链式前向星表示"><a href="#无权图的链式前向星表示" class="headerlink" title="无权图的链式前向星表示"></a>无权图的链式前向星表示</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//表示有MAX_N个顶点的图的链式前向星</span><span class="token operator">:</span> <span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从顶点u向顶点v连边</span><span class="token comment">//G[v].push_back(u); //无向图时再从顶点v向顶点u连边</span><span class="token operator">:</span> <span class="token operator">:</span><span class="token comment">//搜索与顶点u相邻的顶点v</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">:</span> <span class="token operator">:</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加权图的链式前向星表示"><a href="#加权图的链式前向星表示" class="headerlink" title="加权图的链式前向星表示"></a>加权图的链式前向星表示</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//表示有MAX_N个顶点的图的链式前向星</span><span class="token operator">:</span> <span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从顶点u向顶点v连权值为c的边</span><span class="token comment">//G[v].push_back(make_pair(u, c)); //无向图时再从顶点v向顶点u连权值为c的边</span><span class="token operator">:</span> <span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//搜索与顶点u相邻的顶点v</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token operator">:</span> <span class="token operator">:</span>    <span class="token comment">//顶点u与顶点v之间的边权</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token operator">:</span> <span class="token operator">:</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Part-2-图的深度优先搜索"><a href="#Part-2-图的深度优先搜索" class="headerlink" title="Part 2 图的深度优先搜索"></a>Part 2 图的深度优先搜索</h3><p>在图的搜索算法中，深度优先搜索采取的思路是尽可能地访问相邻顶点。</p><p>设仍存在未搜索邻接边的顶点中最后一个被发现的顶点为v，那么深度优先搜索就是对顶点v的邻接边递归地进行搜索, 当v的边全部搜索完毕后，程序沿发现v时所经过的边回归，继续搜索前一顶点。</p><p>搜索一直持续到发现当前起点可到达的所有顶点为止。如果仍有顶点未被发现，则选择其中编号最小的一个作为新起点继续搜索。</p><p>深度优先搜索中，对各顶点记录以下两个时间戳：</p><ul><li>时间戳d[v]: 记录第一次访问v的时刻（发现时刻）</li><li>时间戳f[v]: 记录调查完v的相邻顶点的时刻（结束时刻）</li></ul><p>该算法通常的时间复杂度为$O(|V| + |E|)$</p><h4 id="使用栈的深度优先搜索"><a href="#使用栈的深度优先搜索" class="headerlink" title="使用栈的深度优先搜索"></a>使用栈的深度优先搜索</h4><ul><li><p>将最初访问的顶点压入栈。</p></li><li><p>只要栈中仍有顶点，就循环进行下述操作：</p><ul><li><p>访问栈顶部的顶点u</p></li><li><p>从当前访问的顶点u移动至顶点v时，将v压入栈。如果当前顶点不存在末访问的相邻顶点，则将u从栈中删除</p></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">dfs_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//顶点编号为 0 起点</span>    将所有顶点的 color 设置为 WHITE    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//以顶点0为起点进行深度优先搜索</span><span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token comment">//将起点u压入栈</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time<span class="token keyword">while</span> S 不为空    u <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    v <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token comment">//依次获取与 u 相邻的顶点</span>    <span class="token keyword">if</span> v <span class="token operator">!=</span> NIL    <span class="token keyword">if</span> color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> WHITE        color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY        d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time        S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">else</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> BLACK        f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用递归的深度优先搜索"><a href="#使用递归的深度优先搜索" class="headerlink" title="使用递归的深度优先搜索"></a>使用递归的深度优先搜索</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">dfs_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//顶点编号为 0 起点</span>    将所有顶点的 color 设置为 WHITE    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time    <span class="token keyword">for</span> 顶点 v 从 <span class="token number">0</span> 到<span class="token operator">|</span>V<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> M<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> WHITE            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> BLACK    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_N</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WHITE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRAY</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLACK</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> color<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">,</span> tt<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs_visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY<span class="token punctuation">;</span>    d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tt<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> WHITE<span class="token punctuation">)</span>            <span class="token function">dfs_visit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//init</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> WHITE<span class="token punctuation">;</span>    tt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> WHITE<span class="token punctuation">)</span>            <span class="token function">dfs_visit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token operator">--</span><span class="token punctuation">;</span>            G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某些语言或环境下，对规模较大的图使用递归思路的深度优先搜索算法会导致栈溢出。</p><p>目前大部分算法竞赛（包括CSP<del>NOIP</del>、大部分省选以及 CCF 举办的各项赛事）都支持无限栈空间 ，即：栈空间不单独限制，但总内存空间仍然受题面限制。</p><h3 id="Part-3-图的广度优先搜索"><a href="#Part-3-图的广度优先搜索" class="headerlink" title="Part 3 图的广度优先搜索"></a>Part 3 图的广度优先搜索</h3><ul><li><p>将最初访问的顶点压入队列。</p></li><li><p>只要队列中仍有顶点，就循环进行下述操作：</p><ul><li><p>访问队首的顶点u</p></li><li><p>从当前访问的顶点u移动至顶点v时，将v压入队列</p></li></ul></li></ul><p>该算法通常的时间复杂度为$O(|V| + |E|)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//顶点编号为 0 起点</span>    将所有顶点的 color 设置为 WHITE    将所有顶点的 d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> 设置为 INFTY    color<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY    d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    Q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">while</span> Q不为空        u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> v 为 <span class="token number">0</span> 到<span class="token operator">|</span>V<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">if</span> M<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> color<span class="token punctuation">[</span>v<span class="token punctuation">]</span>                color<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> GRAY                d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                Q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>        color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> BLACK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX_N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> num<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>MAX_N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// 标记为已经访问</span>                flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 更新长度</span>                d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">// 压入栈内</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        u<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化</span>        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token operator">--</span><span class="token punctuation">;</span>            G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】C++的常数优化技巧</title>
      <link href="/2019/09/08/c-chang-shu-you-hua/"/>
      <url>/2019/09/08/c-chang-shu-you-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="Part-0-时间复杂度常数优化的意义"><a href="#Part-0-时间复杂度常数优化的意义" class="headerlink" title="Part 0 时间复杂度常数优化的意义"></a>Part 0 时间复杂度常数优化的意义</h3><p>在科学研究意义上，时间复杂度的常数优化并不是十分重要的。</p><p>但在信息学竞赛中，同样的复杂度为$O(n^2)$的程序，对于一组 $n=5000$ 的数据，有的可能常数为20，需要运行1000ms，有的可能常数为5，需要运行500ms。</p><p>这样，两个看似相同的算法，一个超时错误，一个正确得分。</p><p>同一个程序设计思想，用不同算法，会有不同的运行效率；而即使是同样的算法，由于在代码的细节方面设计有所不同，执行起来效率也会有所不同。</p><p>当遇到所需时间较长的问题时，一个常数级优化可能是AC的关键所在。</p><h3 id="Part-1-基本运算"><a href="#Part-1-基本运算" class="headerlink" title="Part 1 基本运算"></a>Part 1 基本运算</h3><p>众所周知，除法和取模运算的运行时间相对赋值、比较、加、减、乘运算要慢得多，而由于计算机内部的原因，位运算的速度是最快的。</p><p>因此，我们应当尽可能用速度较快的运算代替速度慢的运算。</p><h4 id="位压缩的技巧："><a href="#位压缩的技巧：" class="headerlink" title="位压缩的技巧："></a>位压缩的技巧：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">读取第 k 位： a <span class="token operator">&gt;&gt;</span> k <span class="token operator">&amp;</span> <span class="token number">1</span>读取第 k 位并取反： <span class="token operator">~</span>a <span class="token operator">&gt;&gt;</span> k <span class="token operator">&amp;</span> <span class="token number">1</span>将第 k 位清 <span class="token number">0</span>： a <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span>将第 k 位置 <span class="token number">1</span>： a <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k将第 k 位取反： a <span class="token operator">^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k将第 k1<span class="token operator">~</span>k2 位反转： a <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k2 <span class="token operator">-</span> k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> k2是否恰好只有一个 <span class="token boolean">true</span>： <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x判断是否有两个相邻的 <span class="token boolean">true</span>： x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> x是否有三个相邻的 <span class="token boolean">true</span>： x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊运算："><a href="#特殊运算：" class="headerlink" title="特殊运算："></a>特殊运算：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">乘除<span class="token number">2</span>的整数幂x<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>k<span class="token punctuation">)</span><span class="token operator">=</span>x<span class="token operator">&lt;&lt;</span>kx<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>k<span class="token punctuation">)</span><span class="token operator">=</span>x<span class="token operator">&gt;&gt;</span>k乘除常数的优化x<span class="token operator">*</span><span class="token number">10</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token number">13</span><span class="token operator">=</span>x<span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token number">14</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token number">17</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>xx<span class="token operator">*</span><span class="token number">63</span><span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">-</span>x对<span class="token number">2</span><span class="token operator">^</span>k取模优化x<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>k<span class="token punctuation">)</span><span class="token operator">=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>k<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="位运算代替四则运算："><a href="#位运算代替四则运算：" class="headerlink" title="位运算代替四则运算："></a>位运算代替四则运算：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">//加法</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> carry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">negative</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token comment">//取补码</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">//减法</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">negative</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token comment">//正数乘法</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//b最后一位是否为1</span>            ans <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>          a <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>          b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">//除法</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//比较x是否大于y的(1&lt;&lt;i)次方，避免将x与(y&lt;&lt;i)比较，因为不确定y的(1&lt;&lt;i)次方是否溢出  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">-=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对于取模的优化："><a href="#对于取模的优化：" class="headerlink" title="对于取模的优化："></a>对于取模的优化：</h4><p>可以将其优化为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&lt;</span>Mod<span class="token operator">?</span>x<span class="token operator">:</span>x<span class="token operator">%</span>Mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而对于某些题目，仅需要对答案取模。这类题目要边运算边取模的目的一般是防止溢出。<br>故我们甚至可以写成这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&lt;=</span><span class="token number">0x3f3f3f3f</span><span class="token operator">?</span>x<span class="token operator">:</span>x<span class="token operator">%</span>Mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是乘法，我们相应地可以写成：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">&lt;=</span><span class="token number">45000</span><span class="token operator">?</span>x<span class="token operator">:</span>x<span class="token operator">%</span>Mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>总之，这个范围要保证结果在计算时不会有溢出的风险。但采用了这种方式后，最后输出时一定要取模。</p><p>对于负数取模的优化：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">MODF</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>x<span class="token operator">=</span><span class="token function">MOD</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span>x<span class="token operator">+</span>MOD<span class="token operator">:</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Part-2-内存优化"><a href="#Part-2-内存优化" class="headerlink" title="Part 2 内存优化"></a>Part 2 内存优化</h3><p>内存的访问是非常慢的，除了内存，还有寄存器(register)、高速缓存(cache)，它们的访问速度比内存更快。</p><h4 id="register循环："><a href="#register循环：" class="headerlink" title="register循环："></a>register循环：</h4><p>寄存器具有最高的访问速度，在变量前加关键词register即将其加入寄存器。但寄存器的空间是有限的，不应该滥用register，应该仅在访问最频繁的几个变量（如循环变量）前加register。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="让某个数组的大小能够卡进cache"><a href="#让某个数组的大小能够卡进cache" class="headerlink" title="让某个数组的大小能够卡进cache"></a>让某个数组的大小能够卡进cache</h4><p>cache即高速缓存，一般分为3级（有些电脑为2级），访问速度逐级递减。访问变量时，CPU会优先在cache而不是内存中查找，如果cache中不存在此变量，则会进入内存查找，这称为cache miss。</p><p>与register一样，cache的大小同样有限。一些过大的内存是不可以进入cache的。</p><p>基数排序时，以256为基数会比256*256更快。因为256大小的四个数组可以轻松进入cache。</p><ul><li><p>保证时空局部性</p><ul><li><p>时间局部性：当一个变量被使用时，它会在短时间内再次被使用。</p></li><li><p>空间局部性：当一个变量被使用时，它的内存附近的变量会再次被使用。</p></li></ul></li></ul><p>保证这两样东西的良好有益于减少cache miss。</p><ul><li><p>怎样优化空间局部性？</p><ul><li>将一些关系密切，例如经常连着使用的变量尽量定义在一起，或用结构体封装起来。</li><li>适当调整变量定义顺序</li><li>保证内存连续访问。例如：Floyd和矩阵乘法的程序中，将第三层循环作为第一层会大大提高速度。</li></ul></li><li><p>怎样优化时间局部性？</p><ul><li>尽量使用局部变量。因为堆栈的数据访问十分频繁。</li></ul></li></ul><h3 id="Part-3-I-O优化"><a href="#Part-3-I-O优化" class="headerlink" title="Part 3 I\O优化"></a>Part 3 I\O优化</h3><p>C++为了兼容性导致<code>cin</code>、<code>cout</code>极慢，对于大量数据的读入和输出往往不堪重负。这个时候使用读入优化、输出优化可以节省数倍的时间。<br>简单使用可以用<code>scanf</code>和<code>printf</code>代替<code>cin</code>和<code>cout</code>。</p><h4 id="基本读入优化"><a href="#基本读入优化" class="headerlink" title="基本读入优化"></a>基本读入优化</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> ch <span class="token operator">&gt;</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">=</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ch <span class="token operator">^</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fread优化"><a href="#fread优化" class="headerlink" title="fread优化"></a>fread优化</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">getchar</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p1<span class="token operator">==</span>p2<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>p2<span class="token operator">=</span><span class="token punctuation">(</span>p1<span class="token operator">=</span>buf<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p1<span class="token operator">==</span>p2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token constant">EOF</span><span class="token operator">:</span><span class="token operator">*</span>p1<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token operator">=</span>buf<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token operator">=</span>buf<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="基本输出优化"><a href="#基本输出优化" class="headerlink" title="基本输出优化"></a>基本输出优化</h4><p><del>其实没有<code>printf</code>快</del></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> F<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">putchar</span><span class="token punctuation">(</span> <span class="token char">'-'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>tmp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    F<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        tmp <span class="token operator">/=</span> <span class="token number">10</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">putchar</span><span class="token punctuation">(</span>F<span class="token punctuation">[</span><span class="token operator">--</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fwrite优化"><a href="#fwrite优化" class="headerlink" title="fwrite优化"></a>fwrite优化</h4><p><del>不会ing</del></p><p>留坑待填(逃</p>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思想方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93279 【最长上升子树链】</title>
      <link href="/2019/08/22/t93279/"/>
      <url>/2019/08/22/t93279/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93279">传送门</a></p><h3 id="30-的题解："><a href="#30-的题解：" class="headerlink" title="30%的题解："></a>30%的题解：</h3><ul><li>这棵树是一个链，所以直接做一遍LIS和LDS，经典DP算法，不多赘述。</li></ul><h3 id="60-的题解："><a href="#60-的题解：" class="headerlink" title="60%的题解："></a>60%的题解：</h3><ul><li>$N&lt;=1000$,可以直接$n^2$地做满分题解所说的DP。</li></ul><h3 id="满分题解："><a href="#满分题解：" class="headerlink" title="满分题解："></a>满分题解：</h3><ul><li><p>$F1[i]$表示以从以$i$为根节点的子树中出发，以$i$为结束点的LIS，同样设计一个$F2[i]$表示相同意思的LDS。</p></li><li><p>用动态开点的线段树维护，以权值为下标，记录$F1$、$F2$的值。</p></li><li><p>计算$u$节点的$F$值时，如果是计算$F1$,那么在子树中的$0 - (val[u]-1)$中找最大值，如果是计算$F2$，那么找$val[u] - inf$中的最大值。</p></li><li><p>答案就是找最大的$F1[u]+F2[u]-1$。注意子树的线段树最后要合并到父亲。时间复杂度$O(n \log n)$</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// luogu-judger-enable-o2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">inf</span> <span class="token expression"><span class="token number">1000000000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">110000</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> first<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">edge</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>MAXN <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ins</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    len<span class="token operator">++</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> v<span class="token punctuation">;</span>    e<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    first<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span> L<span class="token punctuation">[</span>MAXN <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span>MAXN <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>MAXN <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> root<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        u <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">upd</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> c<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">upd</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> c<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> fl<span class="token punctuation">,</span> <span class="token keyword">int</span> fr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fl <span class="token operator">&gt;</span> fr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fl <span class="token operator">==</span> l <span class="token operator">&amp;&amp;</span> fr <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> fl<span class="token punctuation">,</span> fr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fl <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> fl<span class="token punctuation">,</span> fr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">Find</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> fl<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Find</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u1<span class="token punctuation">,</span> <span class="token keyword">int</span> u2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        u1 <span class="token operator">=</span> u2<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    t<span class="token punctuation">[</span>u1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>u1<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>u2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span>u1<span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span>u2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>u1<span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span>u2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">upd</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">upd</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> de <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> first<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token punctuation">;</span> k <span class="token operator">=</span> e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f2 <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span>        de <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>de<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">merge</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//cout &lt;&lt; in &lt;&lt; " " &lt;&lt; de &lt;&lt; endl;</span>    <span class="token function">upd</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> in <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">upd</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> de <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//cout &lt;&lt; in &lt;&lt; endl;</span>    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> in <span class="token operator">+</span> de <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fa<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fa<span class="token punctuation">)</span> <span class="token function">ins</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93270 【轰炸城市】</title>
      <link href="/2019/08/20/t93270/"/>
      <url>/2019/08/20/t93270/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93270">传送门</a></p><h4 id="30-的题解："><a href="#30-的题解：" class="headerlink" title="30%的题解："></a>30%的题解：</h4><ul><li>直接每次询问枚举所有点。</li></ul><h4 id="60-的题解："><a href="#60-的题解：" class="headerlink" title="60%的题解："></a>60%的题解：</h4><ul><li>坐标值很小，可以尝试用链表，可以做到$O(n)$的时间复杂度</li></ul><h4 id="100-的题解："><a href="#100-的题解：" class="headerlink" title="100%的题解："></a>100%的题解：</h4><ul><li><p>$map$套$multiset$</p></li><li><p>$X$坐标开个$mapx$，里面存的是每个$X$坐标的不同$Y$坐标，这些$Y$坐标用$multiset$保存。</p></li><li><p>$Y$坐标也同理开一个$mapy$。</p></li><li><p>统计点的时候，以平行于$y$轴的轰炸带为例，在$X$坐标的$mapx$中，枚举所有在$n1-n2$范围内的$x$，然后统计每个x里面所有的$y$，同时删去在$mapy$中对应的点，最后把$mapx$中$n1-n2$范围的所有元素都删掉。</p></li><li><p>时间复杂度$O(n \log n)$</p></li><li><p>也可以使用珂朵莉树。</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token number">100010</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> bo<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> mapx<span class="token punctuation">,</span> mapy<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>                mapx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapy<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> o<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>o<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> iterator it<span class="token punctuation">,</span> it1<span class="token punctuation">,</span> it2<span class="token punctuation">;</span>            it1 <span class="token operator">=</span> mapx<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            it2 <span class="token operator">=</span> mapx<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> it1<span class="token punctuation">;</span> it <span class="token operator">!=</span> it2<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>myset <span class="token operator">=</span> <span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> it <span class="token operator">-&gt;</span> first<span class="token punctuation">;</span>                cnt <span class="token operator">+=</span>myset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> iterator it <span class="token operator">=</span> myset<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>                    mapy<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mapx<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> it2<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token keyword">else</span><span class="token punctuation">{</span>            map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> iterator it<span class="token punctuation">,</span> it1<span class="token punctuation">,</span> it2<span class="token punctuation">;</span>            it1 <span class="token operator">=</span> mapy<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            it2 <span class="token operator">=</span> mapy<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> it1<span class="token punctuation">;</span> it <span class="token operator">!=</span> it2<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>myset <span class="token operator">=</span> <span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> it <span class="token operator">-&gt;</span> first<span class="token punctuation">;</span>                cnt <span class="token operator">+=</span>myset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span> iterator it <span class="token operator">=</span> myset<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myset<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">*</span>it<span class="token punctuation">;</span>                    mapx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            mapy<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> it2<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93222 【生成树】</title>
      <link href="/2019/08/20/t93222/"/>
      <url>/2019/08/20/t93222/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93222">传送门</a></p><h4 id="30-的题解："><a href="#30-的题解：" class="headerlink" title="30%的题解："></a>30%的题解：</h4><ul><li>是一棵树，所以只要枚举根，然后计算代价即可</li></ul><h4 id="100-的题解："><a href="#100-的题解：" class="headerlink" title="100%的题解："></a>100%的题解：</h4><ul><li><p>$vals[S]$表示集合$S$的权值和</p></li><li><p>设计状态$F[S][h]$, 表示现在已经选择了的点的集合是$S$，$h$表示当前深度</p></li><li><p>枚举S的补集的子集$S_2$，只要满足$S_2$中每个点都有和$S$集合中某个点相连的话，就可以转移到$F[S|S_2][h+1]$,转移费用是$(h+1)*vals[S_2]$</p></li><li><p>时间复杂度$O（n \times 3n）$</p></li><li><p>这题修改自NOIP2017宝藏</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93336 【最短路】</title>
      <link href="/2019/08/20/t93284/"/>
      <url>/2019/08/20/t93284/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93336">传送门</a></p><h3 id="30-的做法"><a href="#30-的做法" class="headerlink" title="30%的做法"></a>30%的做法</h3><ul><li><p>floyd预处理出每两点间的最短路,每次询问$O(1)$回答</p></li><li><p>复杂度$O(n^3+q)$</p></li></ul><hr><h3 id="另外20-的做法"><a href="#另外20-的做法" class="headerlink" title="另外20%的做法"></a>另外20%的做法</h3><ul><li><p>树的情况</p></li><li><p>对于$u,v$的最短路，求出他们的LCA为$k$，$ans=d[u]+d[v]-2*d[k]$</p></li><li><p>可以用tarjan算法离线求LCA，那么总复杂度$O(n+q)$</p></li><li><p>也可以倍增 / 转化为RMQ在线求，复杂度$O(n+q \log n)$ / $O(n \log n+q)$</p></li></ul><hr><h3 id="100-的做法"><a href="#100-的做法" class="headerlink" title="100%的做法"></a>100%的做法</h3><ul><li><p>$M&lt;=N+20$，因此考虑沿用树的做法</p></li><li><p>我们可以从任一点为根开始，将整个图当成树做一个dfs（随便取一棵生成树）</p></li><li><p>那么整个图就是在这棵生成树$T$的基础上，多加了最多21条边。</p></li><li><p>考虑两个点的最短路，有两种情况：</p></li><li><ul><li>1.不经过这多出来的21条边，那么可以用树的方法在$O(1)$或者$O(\log n)$的做法求出</li></ul></li><li><ul><li>2.经过这多出来的21条边。这种情况如何处理？</li></ul></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul><li><p>21条多出来的边最多涉及到42个图中的点，如果最短路经过这21条多出的边，那么一定经过这些点之一。</p></li><li><p>我们可以预处理出多出来的边涉及到的点为源点，到其它各点的最短路。</p></li><li><p>那么对于第2种情况，我们只需要枚举这些点作为中转点，取$\min$即可。两种情况取一个$\min$，即为他们实际的最短路。</p></li><li><p>例：设多出来的边涉及到的点为$k_1,k_2,..k_s$，我们要求$u,v$间的最短路。先求生成树T中他们间的路径长度，然后分别尝试以$k_1,k_2…k_s$中转的最短路，对这$s+1$个值取$\min$</p></li><li><p>单源最短路用dijkstra算法求出</p></li><li><p>复杂度$O(n \log n+q)$</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// luogu-judger-enable-o2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pb</span> <span class="token expression">push_back</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mp</span> <span class="token expression">make_pair</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100005</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pa<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> G1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> C1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pcnt<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dist<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">,</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dep<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> index<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">==</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span>x<span class="token operator">:</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">!=</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> u<span class="token operator">=</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span> u<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> u<span class="token operator">=</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token operator">=</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span><span class="token punctuation">{</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>dep<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>fa<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>di<span class="token operator">=</span>C<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>fa<span class="token punctuation">)</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>di<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">bool</span> ok<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token operator">=</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1e18</span><span class="token punctuation">;</span>    ok<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>pa<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pa<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>pa<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span><span class="token number">0ll</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token operator">=</span>pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ok<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>G1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> v<span class="token operator">=</span>G1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token operator">=</span>C1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">;</span>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">mp</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>d<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>G1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> C1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>G1<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> C1<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pb</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>    index<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>index<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span><span class="token operator">++</span>pcnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token function">dijkstra</span><span class="token punctuation">(</span>pcnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">17</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span><span class="token function">lca</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>pcnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93284 【最大公因数】</title>
      <link href="/2019/08/18/t93336/"/>
      <url>/2019/08/18/t93336/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93284">传送门</a></p><h3 id="30-的做法"><a href="#30-的做法" class="headerlink" title="30%的做法"></a>30%的做法</h3><ul><li>暴力枚举删掉哪些数即可，复杂度$O(n \log (\max(a_i)) \times 2^n)$</li></ul><h3 id="另外20-的做法"><a href="#另外20-的做法" class="headerlink" title="另外20%的做法"></a>另外20%的做法</h3><ul><li><p>枚举删掉一些数后的最大公因数$g$，那么不能被$g$整除的数的个数即为要删的数的个数，对结果取$\min$即可</p></li><li><p>复杂度$O(n \times \max(a_i))$</p></li></ul><h3 id="100-的做法"><a href="#100-的做法" class="headerlink" title="100%的做法"></a>100%的做法</h3><ul><li><p>首先，用这个序列的$\gcd$去除每个$a_i$，得到一个序列$b_i$</p></li><li><p>序列$b_i$的$\gcd=1$</p></li><li><p>问题转化为最少删掉多少个数使得$b_i$的$\gcd&gt;1$</p></li><li><p>我们删掉一些数以后使得存在一个质数$p$，能整除剩下的所有$b$</p></li><li><p>我们可以统计$b_i$在$[1,10^6]$每个值有多少个点</p></li><li><p>做一次埃筛，在筛的过程中可以顺便统计出每个素数能整除多少个$b_i$</p></li><li><p>我们取能整除最多$b_i$的那个素数即可</p></li><li><p>复杂度与埃筛相同，$O(m \log \log m)$ , $m=\max(a_i)$</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100005</span><span class="token punctuation">,</span> M<span class="token operator">=</span><span class="token number">1000001</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> is<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span>g<span class="token punctuation">;</span> cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span>N<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token operator">=</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>k<span class="token operator">+=</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>is<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>n<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 T93283 【集合】</title>
      <link href="/2019/08/18/t93283/"/>
      <url>/2019/08/18/t93283/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problem/T93283">传送门</a></p><h4 id="考虑如何将s中的每种数分到-a-和-b-集中"><a href="#考虑如何将s中的每种数分到-a-和-b-集中" class="headerlink" title="考虑如何将s中的每种数分到$a$和$b$集中"></a>考虑如何将s中的每种数分到$a$和$b$集中</h4><h4 id="假设一个数-x-有-k-个，可以对-a-和-b-集“好的”数的个数差产生什么影响？"><a href="#假设一个数-x-有-k-个，可以对-a-和-b-集“好的”数的个数差产生什么影响？" class="headerlink" title="假设一个数$x$有$k$个，可以对$a$和$b$集“好的”数的个数差产生什么影响？"></a>假设一个数$x$有$k$个，可以对$a$和$b$集“好的”数的个数差产生什么影响？</h4><h4 id="k-1"><a href="#k-1" class="headerlink" title="$k=1$"></a>$k=1$</h4><ul><li>让一个集合“好的”数个数++，另一集合的个数不变</li></ul><h4 id="k-2"><a href="#k-2" class="headerlink" title="$k=2$"></a>$k=2$</h4><ul><li><p>让两个集合“好的”数个数都++</p></li><li><p>让两个集合“好的”数个数不变</p></li></ul><h4 id="k-gt-2"><a href="#k-gt-2" class="headerlink" title="$k>2$"></a>$k&gt;2$</h4><ul><li><p>让一个集合“好的”数个数++，另一集合的个数不变</p></li><li><p>让两个集合“好的”数个数不变</p></li></ul><h4 id="因此-k-2-的情况对答案没有影响"><a href="#因此-k-2-的情况对答案没有影响" class="headerlink" title="因此$k=2$的情况对答案没有影响"></a>因此$k=2$的情况对答案没有影响</h4><p>$k=1$的$x$会使两个集合的差别++，$k&gt;2$的$x$可以起到“平衡”的作用</p><h4 id="可如下分类讨论："><a href="#可如下分类讨论：" class="headerlink" title="可如下分类讨论："></a>可如下分类讨论：</h4><ul><li><p>$k=1$的数个数为偶数，平均分到两组即可。其它的数可以不产生影响。</p></li><li><p>$k=1$的数个数为奇数，必然有一个集合多出一个。</p><ul><li><p>如果存在$k&gt;2$的数，那么可以平衡这多出的一个。</p></li><li><p>否则是唯一的无解情况。</p></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> T<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c1 <span class="token operator">+=</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2 <span class="token operator">+=</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>c1 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>c2<span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Life in OI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
